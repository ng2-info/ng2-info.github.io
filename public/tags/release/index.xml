<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Release on Angular2 Info</title>
    <link>https://ng2-info.github.io/tags/release/</link>
    <description>Recent content in Release on Angular2 Info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 16 Sep 2016 00:36:17 +0900</lastBuildDate>
    <atom:link href="https://ng2-info.github.io/tags/release/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>🎉✨ Angular 2.0.0がリリースされました 🎉✨</title>
      <link>https://ng2-info.github.io/2016/09/angular-2-final/</link>
      <pubDate>Fri, 16 Sep 2016 00:36:17 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/09/angular-2-final/</guid>
      <description>

&lt;p&gt;どうも、らこです。&lt;/p&gt;

&lt;p&gt;ついに&lt;strong&gt;Angular 2.0.0が正式リリースされました&lt;/strong&gt;！めでたい！！&lt;br /&gt;
今回はRC.7も含めた変更点の解説に加えて、正式リリース後のAngularの予定についても紹介します。&lt;/p&gt;

&lt;h2 id=&#34;rc-6からの変更点&#34;&gt;RC.6からの変更点&lt;/h2&gt;

&lt;p&gt;RC.7、2.0.0ともに、ほとんどがバグ修正とドキュメンテーションの追加で、破壊的な変更はRC.7にひとつあるだけです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-rc7-2016-09-13&#34; target=&#34;_blank&#34;&gt;2.0.0-RC.7&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-2016-09-14&#34; target=&#34;_blank&#34;&gt;2.0.0&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;破壊的変更&#34;&gt;破壊的変更&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;...Metadata&lt;/code&gt;系のクラスを廃止&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/angular/angular/commit/63e15ff&#34; target=&#34;_blank&#34;&gt;refactor(core): remove `…Metadata` for all decorators and use the dec… · angular/angular@63e15ff&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RC.6までは、&lt;code&gt;@Component&lt;/code&gt;デコレーターに渡すオブジェクトの型は&lt;code&gt;ComponentMetadata&lt;/code&gt;というクラスになっていて、&lt;br /&gt;
&lt;code&gt;Component&lt;/code&gt;以外にもそれぞれのデコレーターに対応した&lt;code&gt;...Metadata&lt;/code&gt;クラスが存在しました。&lt;/p&gt;

&lt;p&gt;RC.7で&lt;code&gt;...Metadata&lt;/code&gt;クラスはそのデコレーターと同じ名前のインターフェースに統一されました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before: &lt;code&gt;new ComponentMetadata(…)&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;After: &lt;code&gt;new Component(…)&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;依存パッケージの更新&#34;&gt;依存パッケージの更新&lt;/h3&gt;

&lt;p&gt;2.0.0時点で、依存パッケージはそれぞれ次のバージョンに更新されました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;zone.js@0.6.21&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;rxjs@5.0.0-beta.12&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;修正されたバグ-抜粋&#34;&gt;修正されたバグ(抜粋)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ShadowCSSのパフォーマンスリグレッションを修正&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/angular/angular/commit/78ad9ad&#34; target=&#34;_blank&#34;&gt;fix(ShadowCss): fix perf regression (#11420) · angular/angular@78ad9ad&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RC.6リリースによって起きていた、ShadowCSSの重大なパフォーマンス問題を修正しています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;実装漏れのHTML5標準要素をスキーマに追加&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/angular/angular/commit/d309f77&#34; target=&#34;_blank&#34;&gt;fix(DomSchema): add missing elements · angular/angular@d309f77&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;要素や&lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt;要素など、HTML5仕様に含まれているがAngularが認識できていなかった要素をスキーマに取り入れました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Title&lt;/code&gt;サービスが&lt;code&gt;BrowserModule&lt;/code&gt;から提供されていなかったのを修正&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/angular/angular/commit/85d9db6&#34; target=&#34;_blank&#34;&gt;fix(platform-browser): provide Title service as part of the module (#… · angular/angular@85d9db6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;platform-browser&lt;/code&gt;から提供されている、ウィンドウのタイトルを操作するための&lt;code&gt;Title&lt;/code&gt;サービスが、&lt;code&gt;BrowserModule&lt;/code&gt;に含まれていなかったのを修正しています。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;angularの今後&#34;&gt;Angularの今後&lt;/h2&gt;

&lt;p&gt;さて、2.0.0正式リリースを迎えたAngularの、今後の動きについて紹介していきます。&lt;br /&gt;
正式リリースが発表されたイベントでの発言からいくつかポイントを抜粋しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=xTIWBXkpvDc&#34; target=&#34;_blank&#34;&gt;Angular Special Event - YouTube&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;semantic-versioningの導入&#34;&gt;Semantic Versioningの導入&lt;/h3&gt;

&lt;p&gt;Angular 2.0.0から、&lt;a href=&#34;http://semver.org/&#34; target=&#34;_blank&#34;&gt;Semantic Versioning&lt;/a&gt;に従ってバージョンを付与するようになりました。&lt;br /&gt;
また、&lt;strong&gt;最低6ヶ月間&lt;/strong&gt;は破壊的変更を含めず、メジャーバージョンを維持することを宣言しています。&lt;br /&gt;
つまり、最短で2017年の2月ごろに、Angularはバージョン3.0.0を迎えるということです。&lt;/p&gt;

&lt;p&gt;これまでと全く違うバージョニングに戸惑う方も多いと思いますが、&lt;br /&gt;
Angular 1から2のような断絶を避けるために、今後は後方互換性を保ったまま緩やかにアップデートを続けていきます。&lt;br /&gt;
Angular 2の正式版に至るまでと同じように、将来的に廃止される予定のAPIは非推奨なAPIにして、&lt;br /&gt;
段階的にマイグレーションが可能になるようなアップデートを予定しています。&lt;/p&gt;

&lt;p&gt;新しいバージョニングに合わせて、AngularJSやAngular2といった呼称はすべて、&lt;strong&gt;Angular&lt;/strong&gt;に統一されることになります。&lt;br /&gt;
現在のバージョン2のことは、Angular 2.0や、Angular v2という風に呼ぶことになります。&lt;/p&gt;

&lt;h3 id=&#34;angular-2の今後&#34;&gt;Angular 2の今後&lt;/h3&gt;

&lt;p&gt;Angular 2としてこれから取り組む項目は次のとおりです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;多くのバグ修正と、破壊的でない機能追加&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ドキュメンテーションの拡充&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;アニメーションAPIの拡充&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Angular Material 2の拡充&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Web Worker向けAPIの安定化&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Angular Universalの拡充と、対応言語の拡張&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;高速化と軽量化&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今後数ヶ月間、Angularチームはこれらを中心に取り組んでいきます。&lt;/p&gt;

&lt;h3 id=&#34;angular-1のサポートについて&#34;&gt;Angular 1のサポートについて&lt;/h3&gt;

&lt;p&gt;Angular 1のサポートは、今後も長い間続けられます。&lt;br /&gt;
ひとつの指標として、Angular 2がAngular 1よりもメジャーになるまでは、Angular 1をしっかりサポートすると言っています。&lt;br /&gt;
現在Angular 1のユーザーは約130万人、それに対してAngular 2のユーザーは48万人程度です。&lt;br /&gt;
これが逆転するまでは、ひとまずAngular 1はこれまでどおりメンテナンスされ続けるでしょう。&lt;/p&gt;

&lt;p&gt;そして、シェアの逆転が起きたところで、それはすぐにAngular 1が終わりになるわけではなく、&lt;br /&gt;
その後もしばらくはコアチームによってアップデートが続けられる予定です。&lt;/p&gt;

&lt;h3 id=&#34;aotについて&#34;&gt;AoTについて&lt;/h3&gt;

&lt;p&gt;今後Angularは、デフォルトでAoTを用いるようにする予定です。&lt;br /&gt;
現在はcompiler-cliを使ってコンパイルしていますが、近いうちにWebpackだけで解決できるような仕組みを提供する予定があると話しています。&lt;/p&gt;

&lt;h3 id=&#34;angularcliについて&#34;&gt;AngularCLIについて&lt;/h3&gt;

&lt;p&gt;AngularCLIはついにデフォルトでWebpackを使うようになり、使いやすさが格段にあがりました。&lt;br /&gt;
今後はコアチームのメンバーも積極的にコントリビュートして、AngularCLIをより便利にしていく予定です。&lt;br /&gt;
スキャフォールディングのカスタマイズ機能についても前向きに検討しているとのことです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上、RC.6からの変更点と、Angular 2.0の今後についてのまとめでした。&lt;br /&gt;
いきなりではありましたが、何はともあれ嬉しいニュースです。&lt;br /&gt;
いままで正式リリースじゃないという理由で迷っていた方も、ぜひ秋の夜長にAngular 2に入門してみてください。&lt;/p&gt;

&lt;p&gt;それではまた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular 2 RC.6がリリースされました</title>
      <link>https://ng2-info.github.io/2016/09/angular-2-rc-6/</link>
      <pubDate>Thu, 01 Sep 2016 21:23:17 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/09/angular-2-rc-6/</guid>
      <description>

&lt;p&gt;どうも、らこです。Angular 2のRC.6がリリースされました。&lt;br /&gt;
RC.6はFinalリリースへの最後の一歩です。&lt;br /&gt;
非推奨だったAPIがきれいに削除され、RC.5で導入されたNgModuleを基本としたAPIに整えられました。&lt;br /&gt;
RC.5でAngularモジュール(&lt;code&gt;NgModule&lt;/code&gt;)対応が済んでいないと、RC.6にアップデートできません。&lt;br /&gt;
まずはRC.5で準備を整えてから、最終リリースへの階段を登りましょう。&lt;/p&gt;

&lt;p&gt;それでは今回の重要な変更点をピックアップしていきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-rc6-2016-08-31&#34; target=&#34;_blank&#34;&gt;2.0.0-RC.6&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;破壊的変更&#34;&gt;破壊的変更&lt;/h2&gt;

&lt;p&gt;まずはRC.6の破壊的変更から。破壊的変更とはいいますが、ほとんどはRC.5時点で非推奨となったAPIの完全な削除です。&lt;/p&gt;

&lt;h3 id=&#34;npmパッケージの構成の変更&#34;&gt;npmパッケージの構成の変更&lt;/h3&gt;

&lt;p&gt;RC.6から、npmパッケージとして配布されるAngular 2のソースコードは、 &lt;strong&gt;ESM&lt;/strong&gt; (ES6 Modules)形式のJavaScriptになりました。&lt;br /&gt;
これはRollupや、Webpack2などの、Tree Shakingに対応したbundlerのための変更です。&lt;br /&gt;
これまでどおりCommonJS形式でAngular 2を読み込む場合は、 &lt;code&gt;bundles/*.umd.js&lt;/code&gt; にあるUMD形式のファイルを使う必要があります。&lt;br /&gt;
ただし、ほとんどの場合はpackage.jsonの&lt;code&gt;main&lt;/code&gt;プロパティによって自動的にそちらに誘導されるので、特に設定を変える必要はありません。&lt;/p&gt;

&lt;p&gt;SystemJSに関しては、&lt;a href=&#34;https://github.com/angular/quickstart/blob/3b7452cc444c49c139ea39523ced0468c2362c16/systemjs.config.js#L17-L34&#34; target=&#34;_blank&#34;&gt;こちらの設定&lt;/a&gt;を参考にするとよいでしょう。&lt;/p&gt;

&lt;h3 id=&#34;zone-jsのアップデートにともなうtestingへの影響&#34;&gt;zone.jsのアップデートにともなうtestingへの影響&lt;/h3&gt;

&lt;p&gt;依存するzone.jsのバージョンが上がったことにともない、ユニットテスト環境でのzone.jsの読み込みに変更があります。&lt;br /&gt;
詳細は &lt;a href=&#34;https://github.com/angular/quickstart/blob/3b7452cc444c49c139ea39523ced0468c2362c16/karma.conf.js#L31-L38&#34; target=&#34;_blank&#34;&gt;こちら&lt;/a&gt;を参考にしてください。&lt;/p&gt;

&lt;p&gt;なお、今回の変更により &lt;strong&gt;Jasmine&lt;/strong&gt; 以外のテスティングフレームワークを使おうとするとエラーが発生する問題が起きています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/issues/11230&#34; target=&#34;_blank&#34;&gt;RC6 unit tests with mocha fail to run · Issue #11230 · angular/angular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mocha&lt;/strong&gt;などのフレームワークを使っている場合は、今のところはRC.6へのアップデートは避けたほうがよいでしょう。&lt;br /&gt;
上記Issueをウォッチしておくことをおすすめします。&lt;/p&gt;

&lt;h3 id=&#34;sanitizationservice-domsanitizationservice-の改名&#34;&gt;&lt;code&gt;SanitizationService&lt;/code&gt;/&lt;code&gt;DomSanitizationService&lt;/code&gt;の改名&lt;/h3&gt;

&lt;p&gt;上記APIはそれぞれ、 &lt;code&gt;Sanitizer&lt;/code&gt;/&lt;code&gt;DomSanitizer&lt;/code&gt;に名前が変更されました。&lt;br /&gt;
名前以外の変更はありません。&lt;/p&gt;

&lt;h3 id=&#34;component-directives-pipes-の完全廃止&#34;&gt;&lt;code&gt;@Component.directives/pipes&lt;/code&gt;の完全廃止&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;@Component&lt;/code&gt;デコレーターが受け取るメタデータについて、&lt;br /&gt;
&lt;code&gt;directives&lt;/code&gt;プロパティと、&lt;code&gt;pipes&lt;/code&gt;プロパティが完全に削除されました。&lt;br /&gt;
RC.5で導入された&lt;code&gt;@NgModule&lt;/code&gt;デコレーターの&lt;code&gt;declarations&lt;/code&gt;を使用してください。&lt;/p&gt;

&lt;p&gt;また、この変更にともなって、Component単位でのコンパイルも廃止されています。&lt;br /&gt;
具体的には以下のAPIが廃止されています&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DynamicComponentLoader&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ComponentResolver&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Compiler.compileComponentAsync/Sync&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SystemJsComponentResolver&lt;/code&gt;/&lt;code&gt;SystemJsCmpFactoryResolver&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;動的なコンポーネント作成の際は、&lt;code&gt;ComponentFactoryResolver&lt;/code&gt;から該当のコンポーネントの&lt;code&gt;ComponentFactory&lt;/code&gt;を取得してください。&lt;/p&gt;

&lt;h3 id=&#34;アニメーション定義の非推奨なテンプレートシンタックスを廃止&#34;&gt;アニメーション定義の非推奨なテンプレートシンタックスを廃止&lt;/h3&gt;

&lt;p&gt;RC.5で追加された新しいシンタックスに移行し、古いシンタックスは廃止されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- this is now invalid --&amp;gt;
&amp;lt;div @flip=&amp;quot;flipState&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;!-- change that to --&amp;gt;
&amp;lt;div [@flip]=&amp;quot;flipState&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@&lt;/code&gt;プレフィックスではなく&lt;code&gt;animate-&lt;/code&gt;プレフィックスを使う場合も同様で、&lt;code&gt;bind-&lt;/code&gt;プレフィックスが必須になります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- this is now invalid --&amp;gt;
&amp;lt;div animate-flip=&amp;quot;flipState&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;!-- is valid now --&amp;gt;
&amp;lt;div bind-animate-flip=&amp;quot;flipState&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;非推奨なプロバイダー宣言を廃止&#34;&gt;非推奨なプロバイダー宣言を廃止&lt;/h3&gt;

&lt;p&gt;これまで非推奨だったプロバイダーの宣言方法が廃止され、ひとつの書き方に統一されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// NG
bind(MyClass).toFactory(...)
new Provider(MyClass, toFactory: ...)

// OK
{provider: MyClass, toFactory: ...}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ngzoneerror-の廃止&#34;&gt;&lt;code&gt;NgZoneError&lt;/code&gt;の廃止&lt;/h3&gt;

&lt;p&gt;非推奨にされていた&lt;code&gt;NgZoneError&lt;/code&gt;が削除されました。&lt;/p&gt;

&lt;h3 id=&#34;非推奨なboostrap-apiの廃止&#34;&gt;非推奨なboostrap APIの廃止&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;coreBootstrap&lt;/code&gt;と&lt;code&gt;coreLoadAndBootstrap&lt;/code&gt;が廃止されました&lt;/p&gt;

&lt;h3 id=&#34;applicationref-platformref-の非推奨apiの廃止&#34;&gt;&lt;code&gt;ApplicationRef&lt;/code&gt;,&lt;code&gt;PlatformRef&lt;/code&gt;の非推奨APIの廃止&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ApplicationRef&lt;/code&gt;と&lt;code&gt;PlatformRef&lt;/code&gt;関連のAPIで非推奨なものがすべて廃止されました&lt;/p&gt;

&lt;h3 id=&#34;非推奨な-directive-properties-events-の廃止&#34;&gt;非推奨な&lt;code&gt;@Directive.properties/events&lt;/code&gt;の廃止&lt;/h3&gt;

&lt;p&gt;非推奨なAPIだった&lt;code&gt;@Directive&lt;/code&gt;や&lt;code&gt;@Component&lt;/code&gt;デコレーターの&lt;code&gt;properties&lt;/code&gt;プロパティと&lt;code&gt;events&lt;/code&gt;プロパティが廃止されました。&lt;br /&gt;
これらは&lt;code&gt;inputs&lt;/code&gt;と&lt;code&gt;outputs&lt;/code&gt;を使用します。&lt;/p&gt;

&lt;h3 id=&#34;query-viewquery-の廃止&#34;&gt;&lt;code&gt;Query&lt;/code&gt;/&lt;code&gt;ViewQuery&lt;/code&gt;の廃止&lt;/h3&gt;

&lt;p&gt;非推奨でした(略)&lt;/p&gt;

&lt;h3 id=&#34;testcomponentbuilder-の廃止&#34;&gt;&lt;code&gt;TestComponentBuilder&lt;/code&gt;の廃止&lt;/h3&gt;

&lt;p&gt;RC.5で&lt;code&gt;TestBed&lt;/code&gt;になりました。&lt;/p&gt;

&lt;h3 id=&#34;シンタックスと-var-シンタックスの廃止&#34;&gt;&lt;code&gt;#&lt;/code&gt;シンタックスと&lt;code&gt;var-&lt;/code&gt;シンタックスの廃止&lt;/h3&gt;

&lt;p&gt;非推奨でした。ローカル変数宣言には&lt;code&gt;let-&lt;/code&gt;を使います&lt;/p&gt;

&lt;h3 id=&#34;http-providers-と-jsonp-providers-の廃止&#34;&gt;&lt;code&gt;HTTP_PROVIDERS&lt;/code&gt;と&lt;code&gt;JSONP_PROVIDERS&lt;/code&gt;の廃止&lt;/h3&gt;

&lt;p&gt;それぞれ&lt;code&gt;HttpModule&lt;/code&gt;と&lt;code&gt;JsonpModule&lt;/code&gt;になります&lt;/p&gt;

&lt;h3 id=&#34;cached-template-provider-の改名&#34;&gt;&lt;code&gt;CACHED_TEMPLATE_PROVIDER&lt;/code&gt;の改名&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CACHED_TEMPLATE_PROVIDER&lt;/code&gt;は&lt;code&gt;RESOURCE_CACHE_PROVIDER&lt;/code&gt;に改名されました&lt;/p&gt;

&lt;h3 id=&#34;ngswitchwhen-の廃止&#34;&gt;&lt;code&gt;NgSwitchWhen&lt;/code&gt;の廃止&lt;/h3&gt;

&lt;p&gt;非推奨でした。現在は&lt;code&gt;NgSwitchCase&lt;/code&gt;を使います&lt;/p&gt;

&lt;h3 id=&#34;replacepipe-の廃止&#34;&gt;&lt;code&gt;ReplacePipe&lt;/code&gt;の廃止&lt;/h3&gt;

&lt;p&gt;非推奨でした。&lt;/p&gt;

&lt;h3 id=&#34;upgradeadapter-addprovider-の廃止&#34;&gt;&lt;code&gt;UpgradeAdapter#addProvider&lt;/code&gt;の廃止&lt;/h3&gt;

&lt;p&gt;非推奨でした。Angularモジュールを使います&lt;/p&gt;

&lt;h3 id=&#34;commonパッケージのforms-apiの廃止&#34;&gt;commonパッケージのForms APIの廃止&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;@angular/common&lt;/code&gt;パッケージから提供されていた古いForms APIは廃止されました。&lt;br /&gt;
&lt;code&gt;@angular/forms&lt;/code&gt;を使います&lt;/p&gt;

&lt;h3 id=&#34;web-worker関連apiのパッケージ分割&#34;&gt;Web Worker関連APIのパッケージ分割&lt;/h3&gt;

&lt;p&gt;これまではplatform-browserパッケージに同梱されていましたが、今回から独立した&lt;code&gt;platform-webworker&lt;/code&gt;パッケージで提供さてます。&lt;br /&gt;
新しく&lt;code&gt;@angular/platform-webworker&lt;/code&gt;と&lt;code&gt;@angular/platform-webworker-dynamic&lt;/code&gt;が公開されています。&lt;/p&gt;

&lt;h2 id=&#34;その他の変更&#34;&gt;その他の変更&lt;/h2&gt;

&lt;h3 id=&#34;core&#34;&gt;core&lt;/h3&gt;

&lt;h4 id=&#34;no-errors-schema-の追加&#34;&gt;&lt;code&gt;NO_ERRORS_SCHEMA&lt;/code&gt;の追加&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/c631cfc&#34; target=&#34;_blank&#34;&gt;feat(core): add NO_ERRORS_SCHEMA that allows any properties to be set… · angular/angular@c631cfc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RC.5で、テンプレート中でのカスタムエレメントの使用を許可する、&lt;code&gt;CUSTOM_ELEMENT_SCHEMA&lt;/code&gt;が実装されましたが、&lt;br /&gt;
今回はどんなテンプレートでもエラーを発生させないスキーマが追加されました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CUSTOM_ELEMENT_SCHEMA&lt;/code&gt;と同様に&lt;code&gt;NgModule.schema&lt;/code&gt;に設定します。&lt;br /&gt;
基本的にアプリケーションでは使用しないAPIで、ユニットテスト時に使うことが想定されています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;TestBed.configureTestingModule({
  schemas: [NO_ERRORS_SCHEMA]
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;animation-apiのイベントオブジェクトに-totaltime-を追加&#34;&gt;Animation APIのイベントオブジェクトに&lt;code&gt;totalTime&lt;/code&gt;を追加&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/4f8f8cf&#34; target=&#34;_blank&#34;&gt;feat(animations): make sure animation callback reports the totalTime … · angular/angular@4f8f8cf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Animation APIのトランジションイベントで受け取れるオブジェクトが、&lt;code&gt;AnimationTransitionEvent&lt;/code&gt;というクラスのインスタンスになりました。&lt;br /&gt;
&lt;code&gt;AnimationTransitionEvent#totalTime&lt;/code&gt;プロパティでトランジションにかかった時間を取得できます。&lt;/p&gt;

&lt;h3 id=&#34;compiler&#34;&gt;compiler&lt;/h3&gt;

&lt;h4 id=&#34;compiler-cliのtypescript-2-0対応&#34;&gt;compiler-cliのTypeScript 2.0対応&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/fc2fe00&#34; target=&#34;_blank&#34;&gt;fix(compiler): allow tsc-wrapped to be compile with TypeScript 2.0 (#… · angular/angular@fc2fe00&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今まで1.9.0-devバージョンに依存していたtsc-wrappedパッケージがTypeScript 2.0に対応しました&lt;/p&gt;

&lt;h4 id=&#34;entrycomponents-から-declarations-への自動的な適用を廃止&#34;&gt;&lt;code&gt;entryComponents&lt;/code&gt;から&lt;code&gt;declarations&lt;/code&gt;への自動的な適用を廃止&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/c56f3f2&#34; target=&#34;_blank&#34;&gt;fix(compiler): do not autoinclude components declared as entry points… · angular/angular@c56f3f2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これまで&lt;code&gt;entryComponents&lt;/code&gt;に指定されたコンポーネントは自動的に&lt;code&gt;declarations&lt;/code&gt;にも適用されていましたが、&lt;br /&gt;
今後はどちらも明示的に指定する必要があります。&lt;/p&gt;

&lt;h4 id=&#34;テンプレート中に未知の要素が存在することを検知し-エラーを発生させるようになった&#34;&gt;テンプレート中に未知の要素が存在することを検知し、エラーを発生させるようになった&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/1df69cb&#34; target=&#34;_blank&#34;&gt;fix(DomSchemaRegistry): detect invalid elements · angular/angular@1df69cb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTML標準の要素でもなければAngularモジュールに登録されたディレクティブでもない未知の要素について、&lt;br /&gt;
テンプレート中に存在するとエラーが発生するようになりました。&lt;br /&gt;
その要素がWeb Components仕様のカスタムエレメントである場合は、Angularモジュールに&lt;code&gt;CUSTOM_ELEMENT_SCHEMA&lt;/code&gt;を追加します。&lt;br /&gt;
そうでない場合は適切なディレクティブをAngularモジュールに登録します。&lt;/p&gt;

&lt;p&gt;この件で、一部のHTML標準の要素が認められていないバグが発生しています。&lt;br /&gt;
たとえば &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;要素については、&lt;a href=&#34;https://github.com/angular/angular/issues/11219&#34; target=&#34;_blank&#34;&gt;こちらのIssue&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;h4 id=&#34;host-host-context-の修正&#34;&gt;&lt;code&gt;:host&lt;/code&gt;,&lt;code&gt;:host-context&lt;/code&gt;の修正&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/af63378&#34; target=&#34;_blank&#34;&gt;fix(ShadowCss): properly shim selectors after :host and :host-context… · angular/angular@af63378&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ViewEncapsulation&lt;/code&gt;がデフォルトの時、&lt;code&gt;:host&lt;/code&gt;セレクターと&lt;code&gt;:host-context&lt;/code&gt;セレクターがうまく適用されないバグが修正されました&lt;/p&gt;

&lt;h3 id=&#34;common&#34;&gt;common&lt;/h3&gt;

&lt;h4 id=&#34;datepipe-がfloat形式の文字列を受け取れるように修正&#34;&gt;&lt;code&gt;DatePipe&lt;/code&gt;がfloat形式の文字列を受け取れるように修正&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/712c7d5&#34; target=&#34;_blank&#34;&gt;fix(datePipe): allow float for date pipe input (#10687) · angular/angular@712c7d5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;quot;123456789.11&amp;quot;&lt;/code&gt;のような文字列を扱えるようになりました。&lt;/p&gt;

&lt;h3 id=&#34;http&#34;&gt;http&lt;/h3&gt;

&lt;h4 id=&#34;bodyが空の時に-responce-text-が空文字列を返すように修正&#34;&gt;bodyが空の時に&lt;code&gt;Responce#text()&lt;/code&gt;が空文字列を返すように修正&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/7cd4741&#34; target=&#34;_blank&#34;&gt;https://github.com/angular/angular/commit/7cd4741&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;i18n&#34;&gt;i18n&lt;/h3&gt;

&lt;h4 id=&#34;locale-id-の導入&#34;&gt;&lt;code&gt;LOCALE_ID&lt;/code&gt;の導入&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/ce4eae6&#34; target=&#34;_blank&#34;&gt;feat(i18n): provide LOCALE_ID and NgLocalization · angular/angular@ce4eae6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;i18n機能用の新たなAPIとして、アプリケーションのロケールを管理する&lt;code&gt;LOCALE_ID&lt;/code&gt;が追加されました。&lt;br /&gt;
次のようにロケールを指定できます。デフォルトは&lt;code&gt;en-US&lt;/code&gt;になっています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;providers: [{provide: LOCALE_ID, useValue: &#39;en-US&#39;}]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;currencypipe-datepipe-numberpipe-がロケールを参照するように変更&#34;&gt;&lt;code&gt;CurrencyPipe&lt;/code&gt;,&lt;code&gt;DatePipe&lt;/code&gt;,&lt;code&gt;NumberPipe&lt;/code&gt;がロケールを参照するように変更&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/0a053a4&#34; target=&#34;_blank&#34;&gt;https://github.com/angular/angular/commit/0a053a4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これまでは&lt;code&gt;en-US&lt;/code&gt;で固定だったこれらのパイプが、&lt;code&gt;LOCALE_ID&lt;/code&gt;を参照するようになりました。&lt;/p&gt;

&lt;h3 id=&#34;router&#34;&gt;router&lt;/h3&gt;

&lt;h4 id=&#34;ルーティングのカスタムエラーハンドリングをサポート&#34;&gt;ルーティングのカスタムエラーハンドリングをサポート&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/2fc5c57&#34; target=&#34;_blank&#34;&gt;feat(router): add support for custom error handlers · angular/angular@2fc5c57&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RouterModule.forRoot()&lt;/code&gt;の第2引数で、ルーティングエラーのハンドル用関数を渡せるようになりました。&lt;br /&gt;
また、&lt;code&gt;Router#errorHandler&lt;/code&gt;に対しても関数をセット可能です&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;RouterModule.forRoot(appRoutes, {
    errorHandler: (error: any) =&amp;gt; { 
        // ...
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;this.router.errorHandler = (error: any) =&amp;gt; {
    // ...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;routertestingmodule-withroutes-の追加&#34;&gt;&lt;code&gt;RouterTestingModule.withRoutes&lt;/code&gt;の追加&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/53c99cf&#34; target=&#34;_blank&#34;&gt;feat(router): add syntax sugar for confuguring RouterTestingModule (#… · angular/angular@53c99cf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ユニットテスト用の&lt;code&gt;RouterTestingModule&lt;/code&gt;に&lt;code&gt;withRoutes&lt;/code&gt;関数が実装され、&lt;br /&gt;
&lt;code&gt;provideRoutes()&lt;/code&gt;関数を別に呼び出す必要がなくなりました&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;TestBed.configureTestingModule({
    imports: [
      RouterTestingModule.withRoutes(
          [{path: &#39;&#39;, component: BlankCmp}, {path: &#39;simple&#39;, component: SimpleCmp}]),
      TestModule
    ]
});
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;以上、RC.6の主な変更点でした。量こそ多いですがほとんどは非推奨APIの廃止です。&lt;br /&gt;
計画通りなら、次は2.0.0 Finalリリースです。&lt;br /&gt;
今月末にはロンドンでAngularConnectも開催されますので楽しみにしていましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://angularconnect.com/&#34; target=&#34;_blank&#34;&gt;AngularConnect 2016 - Europe’s Largest Angular Conference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;それではまた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular 2 RC.5がリリースされました</title>
      <link>https://ng2-info.github.io/2016/08/angular-2-rc-5/</link>
      <pubDate>Wed, 10 Aug 2016 21:13:11 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/08/angular-2-rc-5/</guid>
      <description>

&lt;p&gt;どうも、らこです。ついにAngular 2のRC.5がリリースされました。&lt;br /&gt;
2.0最終リリースに向けた最後の大規模アップデートということで、変更の量は凄まじいものがあります。&lt;br /&gt;
&lt;code&gt;NgModule&lt;/code&gt; APIを始めとした既存APIの刷新は、一見バージョンアップ対応のハードルは高そうに見えますが、&lt;br /&gt;
RC.5に合わせた書き方に直していけば、これまでよりもわかりやすく直感的なAPIになっていることが感じられるはずです。&lt;/p&gt;

&lt;p&gt;それでは重要な変更点をピックアップしていきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-rc5-2016-08-09&#34; target=&#34;_blank&#34;&gt;2.0.0-RC.5&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ngmodule-について&#34;&gt;&lt;code&gt;NgModule&lt;/code&gt;について&lt;/h2&gt;

&lt;p&gt;新しい&lt;code&gt;NgModule&lt;/code&gt; APIについては、 &lt;a href=&#34;https://ng2-info.github.io/2016/07/preparing-for-ngmodule&#34;&gt;こちらの記事&lt;/a&gt;で簡単な解説をしているので、まずはそちらを読んでください。&lt;/p&gt;

&lt;h2 id=&#34;破壊的変更&#34;&gt;破壊的変更&lt;/h2&gt;

&lt;p&gt;まずは破壊的変更についてまとめておきます。&lt;/p&gt;

&lt;h3 id=&#34;bootstrappingに関する変更&#34;&gt;bootstrappingに関する変更&lt;/h3&gt;

&lt;p&gt;一番大きな変更は、アプリケーションのbootstrappingに関するAPIの変更です。&lt;br /&gt;
&lt;code&gt;NgModule&lt;/code&gt;を前提とした新しいAPIが標準となり、今までのコンポーネントベースのbootstrapingは非推奨になりました。&lt;/p&gt;

&lt;p&gt;アプリケーションを実装するにあたって、まずはモジュールを作ることになります。モジュールは次のように&lt;code&gt;@NgModule&lt;/code&gt;デコレータを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {NgModule} from &#39;@angular/core&#39;;

@NgModule({
  declarations: […], // モジュールに読み込むディレクティブ、コンポーネント、パイプ
  imports: [BrowserModule], // 依存するモジュール
  providers: […], // DIプロバイダ
  boostrap: [MainComponent], // アプリケーションのエントリポイントになるコンポーネント
})
class MyAppModule {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうして宣言したモジュールは、次のようにbootstrappingします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {platformBrowserDynamic} from ‘@angular/platform-browser-dynamic’;

platformBrowserDynamic().bootstrapModule(MyAppModule);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AoT(Ahead of Time)コンパイルを利用する場合は、次のようになります&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {platformBrowser} from ‘@angular/platform-browser’;

platformBrowser().bootstrapModuleFactory(MyAppModuleNgFactory);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;web-worker向けapiの変更&#34;&gt;Web Worker向けAPIの変更&lt;/h4&gt;

&lt;p&gt;これまでWeb Workerでアプリケーションを起動するには&lt;code&gt;bootstrapWorkerApp&lt;/code&gt;を使っていましたが、&lt;br /&gt;
&lt;code&gt;WorkerAppModule&lt;/code&gt;と&lt;code&gt;workerAppPlatform()&lt;/code&gt;を使って、モジュールをbootstrapすることになります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bootstrapWorkerUi&lt;/code&gt;についても、&lt;code&gt;WorkerUiModule&lt;/code&gt;をインポートして、&lt;code&gt;workerUiPlatform()&lt;/code&gt;でbootstrapします。&lt;/p&gt;

&lt;h4 id=&#34;server向けapiの変更&#34;&gt;Server向けAPIの変更&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;serverBootstrap&lt;/code&gt;は廃止され、アプリケーションのモジュールを&lt;code&gt;serverDynamicPlatform()&lt;/code&gt;でbootstrapすることになります&lt;/p&gt;

&lt;h3 id=&#34;compiler-に関する変更&#34;&gt;&lt;code&gt;Compiler&lt;/code&gt;に関する変更&lt;/h3&gt;

&lt;p&gt;コンポーネントコンパイラは常に&lt;code&gt;Compiler&lt;/code&gt;クラスでInjectするようになりました。&lt;br /&gt;
&lt;code&gt;RuntimeCompiler&lt;/code&gt;クラスや&lt;code&gt;OfflineCompiler&lt;/code&gt;クラスを直接Injectすることはできません。&lt;/p&gt;

&lt;h3 id=&#34;applicationref-に関する変更&#34;&gt;&lt;code&gt;ApplicationRef&lt;/code&gt;に関する変更&lt;/h3&gt;

&lt;p&gt;アプリケーションの主体がモジュールに移行したことから、&lt;code&gt;ApplicationRef&lt;/code&gt;関連のAPIの多くが非推奨になりました。&lt;/p&gt;

&lt;h4 id=&#34;applicationref-waitforasyncinitializers-の廃止&#34;&gt;&lt;code&gt;ApplicationRef#waitForAsyncInitializers&lt;/code&gt;の廃止&lt;/h4&gt;

&lt;p&gt;アプリケーションの初期化が完了したことを受け取るためのAPIだった&lt;code&gt;ApplicationRef#waitForAsyncInitializers&lt;/code&gt;が廃止されました。&lt;br /&gt;
代わりに&lt;code&gt;AppInitStatus#donePromise(): Promise&lt;/code&gt;か、&lt;code&gt;AppInitStatus#done: boolean&lt;/code&gt;を使います。&lt;br /&gt;
&lt;code&gt;AppInitStatus&lt;/code&gt;は新しく導入されたクラスで、Injection経由でインスタンスを取得できます。&lt;/p&gt;

&lt;h4 id=&#34;applicationref-registerbootstraplistener-の廃止&#34;&gt;&lt;code&gt;ApplicationRef.registerBootstrapListener&lt;/code&gt;の廃止&lt;/h4&gt;

&lt;p&gt;bootstrapが完了した後に呼び出されるイベントリスナーを登録するためのAPIだった&lt;code&gt;ApplicationRef.registerBootstrapListener&lt;/code&gt;が廃止されました。&lt;br /&gt;
代わりに、&lt;code&gt;APP_BOOTSTRAP_LISTENER&lt;/code&gt;トークンを使って、multi providerを設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;[
    {
        provide: APP_BOOTSTRAP_LISTENER,
        multi: true,
        useValue: (cmp: ComponentRef) =&amp;gt; {
            // bootstrapされたコンポーネントのComponentRefが渡される
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;applicationref-dispose-の廃止&#34;&gt;&lt;code&gt;ApplicationRef#dispose&lt;/code&gt;の廃止&lt;/h4&gt;

&lt;p&gt;アプリケーションを破棄する&lt;code&gt;ApplicationRef#dispose&lt;/code&gt;が廃止されました。&lt;br /&gt;
代わりにモジュールを破棄する&lt;code&gt;NgModuleRef#destroy&lt;/code&gt;を使います。&lt;/p&gt;

&lt;h4 id=&#34;aplicationref-registerdisposelistener-の廃止&#34;&gt;&lt;code&gt;AplicationRef#registerDisposeListener&lt;/code&gt;の廃止&lt;/h4&gt;

&lt;p&gt;アプリケーションが破棄されたイベントを受け取るためのAPIが廃止されました。&lt;br /&gt;
代わりにモジュールのクラスで&lt;code&gt;ngOnDestroy&lt;/code&gt;ライフサイクルメソッドを実装するか、&lt;br /&gt;
&lt;code&gt;NgModuleRef&lt;/code&gt;クラスをInjectして、&lt;code&gt;NgModuleRef#onDestroy&lt;/code&gt;メソッドでイベントリスナーを登録します。&lt;/p&gt;

&lt;h4 id=&#34;applicationref-run-の廃止&#34;&gt;&lt;code&gt;ApplicationRef#run&lt;/code&gt;の廃止&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;ApplicationRef#run&lt;/code&gt;は廃止され、代わりに&lt;code&gt;NgZone#run&lt;/code&gt;を直接使うようになります。&lt;/p&gt;

&lt;h4 id=&#34;applicationref-injector-の廃止&#34;&gt;&lt;code&gt;ApplicationRef#injector&lt;/code&gt;の廃止&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;ApplicationRef#injector&lt;/code&gt;は廃止され、代わりに&lt;code&gt;Injector&lt;/code&gt;を直接Injectするか、&lt;code&gt;NgModuleRef#injector&lt;/code&gt;を使います。&lt;/p&gt;

&lt;h4 id=&#34;applicationref-zone-の廃止&#34;&gt;&lt;code&gt;ApplicationRef#zone&lt;/code&gt;の廃止&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;ApplicationRef#zone&lt;/code&gt;は廃止され、&lt;code&gt;NgZone&lt;/code&gt;を直接使います。&lt;/p&gt;

&lt;h3 id=&#34;disposeplatform-の廃止&#34;&gt;&lt;code&gt;disposePlatform&lt;/code&gt;の廃止&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;disposePlatform&lt;/code&gt;は&lt;code&gt;destroyPlatform&lt;/code&gt;に名前が変わりました。&lt;br /&gt;
全体として&lt;code&gt;dispose&lt;/code&gt;から&lt;code&gt;destroy&lt;/code&gt;に統一するためです。&lt;/p&gt;

&lt;p&gt;同様に、&lt;code&gt;PlatformRef#dipose()&lt;/code&gt;から&lt;code&gt;PlatformRef#destroy()&lt;/code&gt;に、&lt;br /&gt;
&lt;code&gt;PlatformRef#registerDisposeListener&lt;/code&gt;から&lt;code&gt;PlatformRef.onDestroy&lt;/code&gt;に、&lt;br /&gt;
&lt;code&gt;PlaformRef#diposed&lt;/code&gt;から&lt;code&gt;PlatformRef#destroyed&lt;/code&gt;に、それぞれ改名されました。&lt;/p&gt;

&lt;h3 id=&#34;テンプレートスキーマに関する挙動の変更&#34;&gt;テンプレートスキーマに関する挙動の変更&lt;/h3&gt;

&lt;p&gt;デフォルトでは、テンプレート中の未知の要素に対するデータバインディングはエラーを起こすようになっています。&lt;br /&gt;
ただし、&lt;code&gt;CUSTOM_ELEMENTS_SCHEMA&lt;/code&gt;を有効にすると、要素名に&lt;code&gt;-&lt;/code&gt;を含む場合はその要素をCustom Elementsとして扱い、既知の要素として扱います。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CUSTOM_ELEMENTS_SCHEMA&lt;/code&gt;は&lt;code&gt;@NgModule&lt;/code&gt;の&lt;code&gt;schemas&lt;/code&gt;に設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;@NgModule({
    declarations: [MyComponentThatUsesAWebComponent],
    imports: [BrowserModule],
    schemas: [CUSTOM_ELEMENTS_SCHEMA],
    boostrap:  [MyComponentThatUsesAWebComponent],
})
export class MyAppModule{}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;coreloadandbootstrap-corebootstrap-の廃止&#34;&gt;&lt;code&gt;coreLoadAndBootstrap&lt;/code&gt;/&lt;code&gt;coreBootstrap&lt;/code&gt;の廃止&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;coreLoadAndBootstrap&lt;/code&gt;と&lt;code&gt;coreBootstrap&lt;/code&gt;は廃止されました。代わりには&lt;code&gt;bootstrapModule&lt;/code&gt;か&lt;code&gt;bootstrapModuleFactory&lt;/code&gt;を使います。&lt;/p&gt;

&lt;h3 id=&#34;routeconfigと-declarations-に関する規定&#34;&gt;RouteConfigと&lt;code&gt;declarations&lt;/code&gt;に関する規定&lt;/h3&gt;

&lt;p&gt;ルート設定に含まれるすべてのコンポーネントは、モジュールの&lt;code&gt;declarations&lt;/code&gt;に含まれている必要があります。&lt;br /&gt;
これはJITコンパイル、AoTコンパイル、遅延ロードによらず常に必要です。&lt;/p&gt;

&lt;h3 id=&#34;テスティングapiに関する変更&#34;&gt;テスティングAPIに関する変更&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;@angular/core/testing&lt;/code&gt;をはじめとするテスティングAPIも、&lt;code&gt;NgModule&lt;/code&gt;を前提としたAPIに刷新されました。&lt;/p&gt;

&lt;h4 id=&#34;testinjector-の廃止と-testbed-の導入&#34;&gt;&lt;code&gt;TestInjector&lt;/code&gt;の廃止と&lt;code&gt;TestBed&lt;/code&gt;の導入&lt;/h4&gt;

&lt;p&gt;これまでユニットテスト中のInjectionを管理していた&lt;code&gt;TestInjector&lt;/code&gt;が廃止され、&lt;br /&gt;
代わりにユニットテスト用のモジュールを管理する&lt;code&gt;TestBed&lt;/code&gt; APIが導入されました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;withProviders&lt;/code&gt;は&lt;code&gt;TestBed.withModule&lt;/code&gt;に、&lt;code&gt;addProviders&lt;/code&gt;は&lt;code&gt;TestBed.configureTestingModule&lt;/code&gt;に変更されます。&lt;br /&gt;
&lt;code&gt;TestComponentBuilder&lt;/code&gt;も&lt;code&gt;TestBed.createComponent&lt;/code&gt;に変更されます。&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {TestBed} from &#39;@angular/core/testing&#39;;

describe(&#39;TestComponent&#39;, () =&amp;gt; {
  beforeEach(() =&amp;gt; {
    // テスト用モジュールのセットアップ
    TestBed.configureTestingModule({
      declarations: [TestComponent]
    });
  });

  it(&#39;component test&#39;, async(() =&amp;gt; {
    // Component設定の上書き
    TestBed.overrideComponent(TestComponent, {set: {
      template: &#39;&amp;lt;p&amp;gt;Content&amp;lt;/p&amp;gt;&#39;
    }});
    // コンポーネントのコンパイル
    TestBed.compileComponents().then(() =&amp;gt; {
      // コンポーネントインスタンスの作成 
      var fixture = TestBed.createComponent(TestComponent);
      fixture.detectChanges();
      var compiled = fixture.debugElement.nativeElement;

      expect(compiled).toContainText(&#39;Content&#39;);
    });
  }));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テスト環境のセットアップを行う&lt;code&gt;setBaseTestProviders&lt;/code&gt;も、&lt;code&gt;TestBed.initTestEnvironment()&lt;/code&gt;に変更されます。&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {setBaseTestProviders} from &#39;@angular/core/testing&#39;;
import {
    TEST_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
    TEST_BROWSER_DYNAMIC_APPLICATION_PROVIDERS
} from &#39;@angular/platform-browser-dynamic/testing&#39;;

setBaseTestProviders(
    TEST_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
    TEST_BROWSER_DYNAMIC_APPLICATION_PROVIDERS
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {TestBed} from &#39;@angular/core/testing&#39;;
import {BrowserDynamicTestingModule, platformBrowserDynamicTesting} from &#39;@angular/platform-browser-dynamic/testing&#39;;

TestBed.initTestEnvironment(
    BrowserDynamicTestingModule,
    platformBrowserDynamicTesting()
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ngmodel-の挙動の変更と-ユニットテストへの影響&#34;&gt;&lt;code&gt;ngModel&lt;/code&gt;の挙動の変更と、ユニットテストへの影響&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ngModel&lt;/code&gt;は常に非同期的な挙動を取るようになりました。&lt;br /&gt;
つまり、ユニットテスト時には&lt;code&gt;ComponentFixture#detectChanges&lt;/code&gt;の呼び出しではなく、&lt;br /&gt;
&lt;code&gt;ComponentFixture#whenStable&lt;/code&gt;を使って非同期的に変更の反映を待つ必要があります。&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;let fixture = TestBed.createComponent(InputComp);
fixture.detectChanges();

let inputBox = &amp;lt;HTMLInputElement&amp;gt; fixture.debugElement.query(By.css(&#39;input&#39;)).nativeElement;
expect(inputBox.value).toEqual(&#39;Original Name&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;let fixture = TedBed.createComponent(InputComp);
fixture.whenStable().then(() =&amp;gt; {
    let inputBox = &amp;lt;HTMLInputElement&amp;gt; fixture.debugElement.query(By.css(&#39;input&#39;)).nativeElement;
    expect(inputBox.value).toEqual(&#39;Original Name&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;formsのモジュール化&#34;&gt;Formsのモジュール化&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;@angular/forms&lt;/code&gt;を使用するためのAPIが変わります。今後は各フォームAPI用のモジュールをインポートします。&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {disableDeprecatedForms, provideForms} from @angular/forms;

bootstrap(App, [
  disableDeprecatedForms(),
  provideForms()
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {DeprecatedFormsModule, FormsModule, ReactiveFormsModule} from @angular/common;

@NgModule({
  declarations: [MyComponent],
  imports: [BrowserModule, DeprecatedFormsModule],
  boostrap:  [MyComponent],
})
export class MyAppModule{}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;platform-pipes-と-platform-directives-の廃止&#34;&gt;&lt;code&gt;PLATFORM_PIPES&lt;/code&gt;と&lt;code&gt;PLATFORM_DIRECTIVES&lt;/code&gt;の廃止&lt;/h3&gt;

&lt;p&gt;どちらも&lt;code&gt;NgModule#declarations&lt;/code&gt;を使うようになりました&lt;/p&gt;

&lt;h3 id=&#34;routerの挙動の変更&#34;&gt;Routerの挙動の変更&lt;/h3&gt;

&lt;p&gt;クエリパラメータやフラグメントなど、URLに付随する要素は、デフォルトでは保持されなくなりました。&lt;br /&gt;
ナビゲーションの際に保持したい場合は、&lt;code&gt;preserveQueryParams&lt;/code&gt;/&lt;code&gt;preserveFragments&lt;/code&gt;オプションをtrueにします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;router.navigate([&amp;quot;/&amp;quot;], { preserveQueryParams: true });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;routerLinkの場合は、&lt;code&gt;[preserveQueryParams]&lt;/code&gt;として設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;a routerLink=&amp;quot;/&amp;quot; [preserveQueryParams]=&amp;quot;true&amp;quot;&amp;gt;top&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;アニメーションのテンプレートシンタックスの変更&#34;&gt;アニメーションのテンプレートシンタックスの変更&lt;/h3&gt;

&lt;p&gt;アニメーションのトリガーの式は&lt;code&gt;@prop&lt;/code&gt;という書き方でしたが、&lt;code&gt;[@prop]&lt;/code&gt;に変更されました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;// 非推奨
&amp;lt;div @trigger=&amp;quot;expression&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

// 新しい書き方
&amp;lt;div [@trigger]=&amp;quot;expression&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ngupgrade関連の変更&#34;&gt;ngUpgrade関連の変更&lt;/h3&gt;

&lt;p&gt;ngUpgradeもモジュール対応しました。&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;let upgradeAdapter = new UpgradeAdapter();
upgradeAdapter.addProviders([myProvidersArray);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;@NgModule({
  providers: myProvidersArray
})
class MyModule {}

let upgradeAdapter = new UpgradeAdapter(MyModule);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;その他の変更&#34;&gt;その他の変更&lt;/h2&gt;

&lt;p&gt;破壊的変更以外にも要注意の変更はいくつもあるので、それぞれ見ていきます。&lt;/p&gt;

&lt;h3 id=&#34;core&#34;&gt;core&lt;/h3&gt;

&lt;h4 id=&#34;ngforの挙動の修正&#34;&gt;ngForの挙動の修正&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/e18626b&#34; target=&#34;_blank&#34;&gt;e18626b&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ngForの挙動が修正され、必要なときだけ要素の追加・移動・削除を行うようになりました。&lt;br /&gt;
この変更はアニメーションに影響するものです。&lt;/p&gt;

&lt;h4 id=&#34;selector-を持たないコンポーネントを許容するように修正&#34;&gt;&lt;code&gt;selector&lt;/code&gt;を持たないコンポーネントを許容するように修正&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/9b39e49&#34; target=&#34;_blank&#34;&gt;9b39e49&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これまでは&lt;code&gt;selector&lt;/code&gt;が設定されていないコンポーネントを動的に読み込んだとき、DOM上は&lt;code&gt;&amp;lt;undefined&amp;gt;&lt;/code&gt;として展開されていましたが、&lt;br /&gt;
今後は&lt;code&gt;&amp;lt;ng-component&amp;gt;&lt;/code&gt;として展開されるようになりました。&lt;/p&gt;

&lt;h3 id=&#34;compiler&#34;&gt;compiler&lt;/h3&gt;

&lt;h4 id=&#34;ngifの右辺でパイプが使えるように修正&#34;&gt;ngIfの右辺でパイプが使えるように修正&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/8efbcc9&#34; target=&#34;_blank&#34;&gt;8efbcc9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*ngIf&lt;/code&gt;の右辺の式でパイプが使えるようになりました。&lt;/p&gt;

&lt;h4 id=&#34;safe-operator-の評価の挙動を修正&#34;&gt;Safe Operator(&lt;code&gt;?.&lt;/code&gt;)の評価の挙動を修正&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/4ec2a30&#34; target=&#34;_blank&#34;&gt;4ec2a30&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a?.b.c&lt;/code&gt;という式について&lt;code&gt;a&lt;/code&gt;がnullあるいはundefinedだった場合、これまでは&lt;code&gt;a&lt;/code&gt;をnullと評価したあとに&lt;code&gt;b&lt;/code&gt;の評価に進んでしまい、&lt;br /&gt;
&lt;code&gt;a?.b?.c&lt;/code&gt;と書かないとエラーになっていました。&lt;br /&gt;
この修正により、&lt;code&gt;a&lt;/code&gt;の時点でSafe Operatorが働いた場合はその先の評価を行わなずに全体を&lt;code&gt;null&lt;/code&gt;とするように修正されました。&lt;/p&gt;

&lt;h3 id=&#34;common&#34;&gt;common&lt;/h3&gt;

&lt;h4 id=&#34;currencypipe-の規定の挙動の変更&#34;&gt;&lt;code&gt;CurrencyPipe&lt;/code&gt;の規定の挙動の変更&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/d455942&#34; target=&#34;_blank&#34;&gt;d455942&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CurrencyPipe&lt;/code&gt;の各パラメータの規定値が、Intl APIのデフォルトを使うようになりました。&lt;/p&gt;

&lt;h4 id=&#34;numberpipe-がstring型を許容するようになった&#34;&gt;&lt;code&gt;NumberPipe&lt;/code&gt;がstring型を許容するようになった&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/f3dd91e&#34; target=&#34;_blank&#34;&gt;f3dd91e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NumberPipe&lt;/code&gt;が文字列型の数値も許容するようになりました。&lt;/p&gt;

&lt;h3 id=&#34;http&#34;&gt;http&lt;/h3&gt;

&lt;h4 id=&#34;httpヘッダの処理をcase-insensitiveに修正&#34;&gt;HTTPヘッダの処理をcase-insensitiveに修正&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/7f64782&#34; target=&#34;_blank&#34;&gt;7f64782&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これまでケースセンシティブになっていたのが修正されました&lt;/p&gt;

&lt;h4 id=&#34;content-type-ヘッダの上書きをサポート&#34;&gt;&lt;code&gt;content-type&lt;/code&gt;ヘッダの上書きをサポート&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/bdb5912&#34; target=&#34;_blank&#34;&gt;bdb5912&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;body&lt;/code&gt;に渡されたオブジェクトの型から自動的に判別される&lt;code&gt;content-type&lt;/code&gt;は、&lt;br /&gt;
&lt;code&gt;headers&lt;/code&gt;に明示的に指定されたもので上書きできるようになりました。&lt;/p&gt;

&lt;h4 id=&#34;arraybuffer-型と-blob-型のレスポンスをサポート&#34;&gt;&lt;code&gt;arraybuffer&lt;/code&gt;型と&lt;code&gt;blob&lt;/code&gt;型のレスポンスをサポート&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/1266460&#34; target=&#34;_blank&#34;&gt;1266460&lt;/a&gt;, &lt;a href=&#34;https://github.com/angular/angular/commit/76b8a49&#34; target=&#34;_blank&#34;&gt;76b8a49&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Response#arrayBuffer()&lt;/code&gt;と&lt;code&gt;Response#blob()&lt;/code&gt;がサポートされました。&lt;/p&gt;

&lt;h4 id=&#34;optionsメソッドをサポート&#34;&gt;OPTIONSメソッドをサポート&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/0bd97ec&#34; target=&#34;_blank&#34;&gt;0bd97ec&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTTPのOPTIONSメソッドのための&lt;code&gt;Http#options()&lt;/code&gt;が追加されました。&lt;/p&gt;

&lt;h3 id=&#34;router&#34;&gt;router&lt;/h3&gt;

&lt;p&gt;routerについては個別のチェンジログがあります&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/modules/@angular/router/CHANGELOG.md&#34; target=&#34;_blank&#34;&gt;Router CHANGELOG&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;routermodule-の導入&#34;&gt;&lt;code&gt;RouterModule&lt;/code&gt;の導入&lt;/h4&gt;

&lt;p&gt;Routerもモジュール化され、&lt;code&gt;RouterModule&lt;/code&gt;をインポートするようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;@NgModule({
    imports: [RouterModule.forRoot(appRoutes, {enableTracing: true})]
})
class MyAppModule {}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;クエリパラメータの値が空の時の挙動を修正&#34;&gt;クエリパラメータの値が空の時の挙動を修正&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/0d6cc17&#34; target=&#34;_blank&#34;&gt;0d6cc17&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;値が空(&lt;code&gt;?key=&lt;/code&gt;)のクエリパラメータを含むURLで初回のルーティングを行うと、値に&lt;code&gt;true&lt;/code&gt;がセットされてしまうバグを修正しました。&lt;/p&gt;

&lt;h4 id=&#34;canactivatechild-canload-の追加&#34;&gt;&lt;code&gt;canActivateChild&lt;/code&gt;/&lt;code&gt;canLoad&lt;/code&gt;の追加&lt;/h4&gt;

&lt;p&gt;ガードの種類に、すべての子ルートのアクティベーションをチェックする&lt;code&gt;canActivateChild&lt;/code&gt;と、&lt;br /&gt;
遅延ロードが可能かどうかをチェックする&lt;code&gt;canLoad&lt;/code&gt;が追加されました&lt;/p&gt;

&lt;h4 id=&#34;routeroutlet-のイベントを追加&#34;&gt;&lt;code&gt;RouterOutlet&lt;/code&gt;のイベントを追加&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;router-outlet&amp;gt;&lt;/code&gt;要素から&lt;code&gt;activate&lt;/code&gt;イベントと&lt;code&gt;deactivate&lt;/code&gt;イベントが発火されるようになりました。&lt;/p&gt;

&lt;h4 id=&#34;guardとresolverがpromiseをサポート&#34;&gt;GuardとResolverがPromiseをサポート&lt;/h4&gt;

&lt;p&gt;各種GaurdとResolverのインターフェースで、戻り値としてPromiseが使えるようになりました。&lt;br /&gt;
Observableと同様に、Promiseを返した場合は完了するまでナビゲーションが待機されます。&lt;/p&gt;

&lt;h4 id=&#34;activateroute-が-routeconfig-を返せるようになった&#34;&gt;&lt;code&gt;ActivateRoute&lt;/code&gt;が&lt;code&gt;routeConfig&lt;/code&gt;を返せるようになった&lt;/h4&gt;

&lt;p&gt;現在アクティブなルートの設定を&lt;code&gt;ActivateRoute&lt;/code&gt;から取得できます。&lt;/p&gt;

&lt;h4 id=&#34;queryparams-や-fragment-が-activateroute-から取得するようになった&#34;&gt;&lt;code&gt;queryParams&lt;/code&gt;や&lt;code&gt;fragment&lt;/code&gt;が&lt;code&gt;ActivateRoute&lt;/code&gt;から取得するようになった&lt;/h4&gt;

&lt;p&gt;これまで&lt;code&gt;Router#routerState&lt;/code&gt;から取得していたクエリパラメータやフラグメントは&lt;code&gt;ActivateRoute&lt;/code&gt;から取得するようになりました&lt;/p&gt;

&lt;h3 id=&#34;forms&#34;&gt;forms&lt;/h3&gt;

&lt;h4 id=&#34;ngform-reset-の追加&#34;&gt;&lt;code&gt;NgForm#reset&lt;/code&gt;の追加&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/da8eb9f&#34; target=&#34;_blank&#34;&gt;da8eb9f&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;フォームを初期化する&lt;code&gt;NgForm#reset()&lt;/code&gt;が追加されました&lt;/p&gt;

&lt;h4 id=&#34;multipleなselect要素で-change-イベントを使うように修正&#34;&gt;multipleなselect要素で&lt;code&gt;change&lt;/code&gt;イベントを使うように修正&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/3cbded6&#34; target=&#34;_blank&#34;&gt;3cbded6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これまで&lt;code&gt;input&lt;/code&gt;イベントで処理していたバグが修正されました。&lt;/p&gt;

&lt;h4 id=&#34;フォーム内のコントロールを簡単に取得するためのapiを追加&#34;&gt;フォーム内のコントロールを簡単に取得するためのAPIを追加&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/8d44999&#34; target=&#34;_blank&#34;&gt;8d44999&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;フォーム内のコントロールを名前で取得できる&lt;code&gt;get()&lt;/code&gt;メソッドが追加されました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;@Component({
  selector: &#39;my-app&#39;,
  template: `
    &amp;lt;div&amp;gt;
      &amp;lt;form #f=&amp;quot;ngForm&amp;quot;&amp;gt;
        &amp;lt;input name=&amp;quot;a&amp;quot; ngModel&amp;gt;
      &amp;lt;/form&amp;gt;
      &amp;lt;button (click)=&amp;quot;checkForm(f)&amp;quot;&amp;gt;Check Form&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  `,
})
export class App {
  checkForm(f: NgForm) {
    f.form.get(&amp;quot;a&amp;quot;) // FormControl
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;コントロールに-invalid-pending-プロパティを追加&#34;&gt;コントロールに&lt;code&gt;invalid&lt;/code&gt;/&lt;code&gt;pending&lt;/code&gt;プロパティを追加&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/e0eea6c&#34; target=&#34;_blank&#34;&gt;e0eea6c&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;コントロールの状態を取得するプロパティが追加されました。&lt;/p&gt;

&lt;h3 id=&#34;animation&#34;&gt;animation&lt;/h3&gt;

&lt;h4 id=&#34;component-host-プロパティでのアニメーショントリガーの設定をサポート&#34;&gt;&lt;code&gt;Component#host&lt;/code&gt;プロパティでのアニメーショントリガーの設定をサポート&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/806a254&#34; target=&#34;_blank&#34;&gt;806a254&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@Component&lt;/code&gt;の&lt;code&gt;host&lt;/code&gt;プロパティでアニメーションのトリガー設定ができるようになりました。&lt;br /&gt;
この結果として、Routerによるナビゲーションにアニメーションを付与することができるようになります。&lt;br /&gt;
&lt;code&gt;[@routeAnimation]&lt;/code&gt;をtrueに設定しておくと、&lt;code&gt;routeAnimation&lt;/code&gt;トリガーで、表示(&lt;code&gt;void =&amp;gt; *&lt;/code&gt;)と、離脱(&lt;code&gt;* =&amp;gt; void&lt;/code&gt;)のアニメーションを記述できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;@Component({
  selector: &#39;home&#39;,
  template: `Home`,
   host: {
     &#39;[@routeAnimation]&#39;: &#39;true&#39;,
   },
  animations: [
    trigger(&#39;routeAnimation&#39;, [
      state(&#39;*&#39;, style({transform: &#39;translateX(0)&#39;, opacity: 1})),
      transition(&#39;void =&amp;gt; *&#39;, [
        style({transform: &#39;translateX(-100%)&#39;, opacity: 0}),
        animate(1000)
      ]),
      transition(&#39;* =&amp;gt; void&#39;, animate(1000, style({transform: &#39;translateX(100%)&#39;, opacity: 0})))
    ])
  ]
})
class HomeCmp {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際に動くサンプルは&lt;a href=&#34;http://plnkr.co/edit/hH667v6ODDc28vBqCBvT?p=preview&#34; target=&#34;_blank&#34;&gt;こちら&lt;/a&gt;です&lt;/p&gt;

&lt;iframe src=&#34;http://embed.plnkr.co/hH667v6ODDc28vBqCBvT/?show=preview&#34; frameborder=&#34;0&#34; width=&#34;100%&#34; height=&#34;300&#34;&gt;&lt;/iframe&gt;  

&lt;hr /&gt;

&lt;p&gt;RC.5の変更点のまとめは以上です。かなり抜粋しましたがそれでもこの量です。&lt;br /&gt;
今回のアップデートではAoTコンパイルに関する情報も出てきていますが、この記事では扱いません。&lt;br /&gt;
後日AoTコンパイルの手順については改めて書こうと思います。&lt;/p&gt;

&lt;p&gt;それではFinalリリースまであと少し、頑張っていきましょう。よい夏を！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular 2 RC.4の変更点</title>
      <link>https://ng2-info.github.io/2016/07/angular-2-rc-4/</link>
      <pubDate>Fri, 08 Jul 2016 21:57:10 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/07/angular-2-rc-4/</guid>
      <description>

&lt;p&gt;こんにちは、らこです。RC.3に引き続きアップデートからしばらく経ってしまいましたが、変更点についてまとめておきます。&lt;br /&gt;
今回は破壊的な変更もそこそこあるのでしっかり把握しておきましょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-rc4-2016-06-30&#34; target=&#34;_blank&#34;&gt;2.0.0-RC.4&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;破壊的変更&#34;&gt;破壊的変更&lt;/h3&gt;

&lt;h4 id=&#34;テスト関連&#34;&gt;テスト関連&lt;/h4&gt;

&lt;p&gt;テスト関連の変更が非常に多いのでざっくりまとめます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;なくなったもの&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;it&lt;/code&gt;, &lt;code&gt;iit&lt;/code&gt;, &lt;code&gt;xit&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;describe&lt;/code&gt;, &lt;code&gt;ddescribe&lt;/code&gt;, &lt;code&gt;xdescribe&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expect&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toThrowErrorWith&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toMatchPattern&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jasmineの関数をラップしていたものたち&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {beforeEachProviders, it, describe, inject} from &#39;@angular/core/testing&#39;;

describe(&#39;my code&#39;, () =&amp;gt; {
    beforeEachProviders(() =&amp;gt; [MyService]);

    it(&#39;does stuff&#39;, inject([MyService], (service) =&amp;gt; {
      // actual test
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {addProviders, inject} from &#39;@angular/core/testing&#39;;

describe(&#39;my code&#39;, () =&amp;gt; {
    beforeEach(() =&amp;gt; {
        addProviders([MyService]);
    });

    it(&#39;does stuff&#39;, inject([MyService], (service) =&amp;gt; {
        // actual test
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MockLocationStrategy&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;browserDetection&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatchEvent&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;el&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;normalizeCSS&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stringifyElement&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内部用APIに。Locationのテストは&lt;code&gt;SpyLocation&lt;/code&gt;で。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;injectAsync&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clearPendingTimers&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Log&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MockAppliacationRef&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MockNgZone&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clearPendingTimers&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getTypeOf&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instantiateType&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不要になったものたち&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;変わったもの&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;beforeEachProviders&lt;/code&gt; =&amp;gt; &lt;code&gt;addProviders&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;任意のタイミングで使う汎用のAPIとなった&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TestComponentBuilder.createSync&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;与えられたコンポーネントのテンプレートが事前にインラインにコンパイルされていなければエラーを出すようになった&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;移動したもの&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TestComponentBuilder&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TestComponentRenderer&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ComponentFixture&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ComponentFixtureAutoDetect&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;compiler/testing&lt;/code&gt; =&amp;gt; &lt;code&gt;core/testing&lt;/code&gt; に移動しました。&lt;/p&gt;

&lt;h4 id=&#34;その他&#34;&gt;その他&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;httpモジュールの&lt;code&gt;URLSearchParams&lt;/code&gt;を使った時に、クエリパラメータが誤ってエンコードされていたのを修正したため、&lt;br /&gt;
RC.4の前後でリクエストのクエリパラメータが変化することがあります。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RC.4からのデフォルトでは、クエリパラメータ中に含まれる&lt;code&gt;@ : $ , ; + ? /&lt;/code&gt;記号はそのまま使用されます。&lt;br /&gt;
この挙動をカスタマイズするには、 &lt;code&gt;URLSearchParams&lt;/code&gt;のコンストラクタの第2引数に&lt;code&gt;QueryEncoder&lt;/code&gt;を継承したクラスのインスタンスを渡します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {URLSearchParams, QueryEncoder} from &#39;@angular/http&#39;;

class MyQueryEncoder extends QueryEncoder {
    encodeKey(k: string): string {
        return myEncodingFunction(k);
    }
 
    encodeValue(v: string): string {
        return myEncodingFunction(v);
    }
}
let params = new URLSearchParams(&#39;&#39;, new MyQueryEncoder());
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;RC.3以前は同じ要素に対して&lt;code&gt;*ngFor&lt;/code&gt;と&lt;code&gt;*ngIf&lt;/code&gt;のように&lt;code&gt;*&lt;/code&gt;プレフィックスのディレクティブ(テンプレートバインディング)を複数付与することができていましたが、&lt;br /&gt;
今後はこれは禁止されます。&lt;br /&gt;
これまでは使用可能ではありましたが大抵の場合は想定外の結果を招いていました。&lt;br /&gt;
&lt;code&gt;*ngIf&lt;/code&gt;と&lt;code&gt;*ngFor&lt;/code&gt;が両方必要な場合には入れ子要素にするか、&lt;code&gt;*&lt;/code&gt;プレフィックスを使わずに&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;タグを明示的に使う記法を選択してください。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;DomEventsPlugin&lt;/code&gt;と&lt;code&gt;KeyEventsPlugin&lt;/code&gt;はこれまでパブリックなAPIとして公開されていましたが、非公開APIとなりました。&lt;br /&gt;
また、非推奨になっていた&lt;code&gt;BROWSER_PROVIDERS&lt;/code&gt;は削除されました。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;アニメーション関連&#34;&gt;アニメーション関連&lt;/h3&gt;

&lt;p&gt;アニメーション周りのバグ修正がいくつか入っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;animations:&lt;/strong&gt; ensure void =&amp;gt; * animations are triggered when an expression is omitted (&lt;a href=&#34;https://github.com/angular/angular/commit/e0b0a59&#34; target=&#34;_blank&#34;&gt;e0b0a59&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/9327&#34; target=&#34;_blank&#34;&gt;#9327&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/9381&#34; target=&#34;_blank&#34;&gt;#9381&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;void =&amp;gt; *&lt;/code&gt;をトリガーとするアニメーションが条件により発火しないバグが修正されました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;animations:&lt;/strong&gt; make sure the easing value is passed into the web-animations player (&lt;a href=&#34;https://github.com/angular/angular/commit/c43aec2&#34; target=&#34;_blank&#34;&gt;c43aec2&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/9517&#34; target=&#34;_blank&#34;&gt;#9517&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/9523&#34; target=&#34;_blank&#34;&gt;#9523&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;easing&lt;/code&gt;オプションがアニメーションプレイヤーに渡されていなかったバグが修正されました。&lt;/p&gt;

&lt;h3 id=&#34;その他-1&#34;&gt;その他&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;support *directive on &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; (&lt;a href=&#34;https://github.com/angular/angular/issues/9691&#34; target=&#34;_blank&#34;&gt;#9691&lt;/a&gt;) (&lt;a href=&#34;https://github.com/angular/angular/commit/3fec279&#34; target=&#34;_blank&#34;&gt;3fec279&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7315&#34; target=&#34;_blank&#34;&gt;#7315&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;*&lt;/code&gt;プレフィックスのディレクティブが&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;タグ上でも使えるようになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;core:&lt;/strong&gt; properly report missing providers and viewProviders (&lt;a href=&#34;https://github.com/angular/angular/issues/9411&#34; target=&#34;_blank&#34;&gt;#9411&lt;/a&gt;) (&lt;a href=&#34;https://github.com/angular/angular/commit/f114dd3&#34; target=&#34;_blank&#34;&gt;f114dd3&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8237&#34; target=&#34;_blank&#34;&gt;#8237&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コンポーネントやサービスのインスタンス化において、解決できないDIのがあったときのエラーがわかりやすくなりました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;One or more of providers for &amp;quot;MyBrokenComp3&amp;quot; were not defined: [?, SimpleService, ?].&lt;/code&gt; のように、解決できなかった位置に?が表示されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; add select multiple accessor as built-in accessor (&lt;a href=&#34;https://github.com/angular/angular/commit/9f00a1b&#34; target=&#34;_blank&#34;&gt;9f00a1b&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;multipleなselect要素の値へのアクセスをデフォルトでサポートするようになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; emit statusChange when child controls have async validator (&lt;a href=&#34;https://github.com/angular/angular/issues/9652&#34; target=&#34;_blank&#34;&gt;#9652&lt;/a&gt;) (&lt;a href=&#34;https://github.com/angular/angular/commit/797914e&#34; target=&#34;_blank&#34;&gt;797914e&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;async validatorを使っているときに、バリデーション結果が変化したことを&lt;code&gt;statusChange&lt;/code&gt;イベントで検知できるようになりました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; make radio button selection logic more flexible (&lt;a href=&#34;https://github.com/angular/angular/issues/9646&#34; target=&#34;_blank&#34;&gt;#9646&lt;/a&gt;) (&lt;a href=&#34;https://github.com/angular/angular/commit/ed0ade6&#34; target=&#34;_blank&#34;&gt;ed0ade6&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/9558&#34; target=&#34;_blank&#34;&gt;#9558&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これまでラジオボタンに対する&lt;code&gt;removeControl&lt;/code&gt;はtimeoutが必要でしたが、必要なくなりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; ngModel should emit valueChanges and statusChanges asynchronously (&lt;a href=&#34;https://github.com/angular/angular/commit/97a2119&#34; target=&#34;_blank&#34;&gt;97a2119&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ngModel&lt;/code&gt; が&lt;code&gt;valueChanges&lt;/code&gt;や&lt;code&gt;statusChanges&lt;/code&gt;イベントを発火するタイミングが非同期的になりました。&lt;/p&gt;

&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;

&lt;p&gt;機能の追加もいくつか行われています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;compiler:&lt;/strong&gt; support sync runtime compile (&lt;a href=&#34;https://github.com/angular/angular/commit/bf598d6&#34; target=&#34;_blank&#34;&gt;bf598d6&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7084&#34; target=&#34;_blank&#34;&gt;#7084&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/9594&#34; target=&#34;_blank&#34;&gt;#9594&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ComponentResolver&lt;/code&gt;に代わる新しいAPI、 &lt;code&gt;Compiler&lt;/code&gt;が、&lt;code&gt;compileComponentAsync&lt;/code&gt;と&lt;code&gt;compileComponentSync&lt;/code&gt;の2つのメソッドを持つようになりました。&lt;br /&gt;
&lt;code&gt;compileComponentSync&lt;/code&gt;はコンポーネントを同期的にコンパイルできますが、テンプレートがインライン、あるいはすでに読み込まれたものでなければなりません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;core:&lt;/strong&gt; add &lt;code&gt;[@Component](https://github.com/Component).precompile&lt;/code&gt; and &lt;code&gt;ComponentFactoryResolver&lt;/code&gt; (&lt;a href=&#34;https://github.com/angular/angular/commit/6c5b653&#34; target=&#34;_blank&#34;&gt;6c5b653&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/9543&#34; target=&#34;_blank&#34;&gt;#9543&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;@Component&lt;/code&gt;デコレータに新しいプロパティ&lt;code&gt;precompile&lt;/code&gt;が追加されました。&lt;br /&gt;
このプロパティは、対象のコンポーネントがOffline Compileされる際に、一緒にコンパイルされて欲しいコンポーネントを指定できるものです。&lt;br /&gt;
今はまだドキュメントがないですが、RC.5が出てくる頃には用意されるでしょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; add support for formArrayName (&lt;a href=&#34;https://github.com/angular/angular/commit/c03e1f2&#34; target=&#34;_blank&#34;&gt;c03e1f2&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/9251&#34; target=&#34;_blank&#34;&gt;#9251&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; add support for standalone ngModel dirs inside forms (&lt;a href=&#34;https://github.com/angular/angular/commit/6edf047&#34; target=&#34;_blank&#34;&gt;6edf047&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/9230&#34; target=&#34;_blank&#34;&gt;#9230&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; expose ValidatorFn and AsyncValidatorFn (&lt;a href=&#34;https://github.com/angular/angular/commit/17dcbf6&#34; target=&#34;_blank&#34;&gt;17dcbf6&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8834&#34; target=&#34;_blank&#34;&gt;#8834&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; make valueChanges and statusChanges available on abstract control directives (&lt;a href=&#34;https://github.com/angular/angular/commit/de12710&#34; target=&#34;_blank&#34;&gt;de12710&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; support updating of validators on exiting controls (&lt;a href=&#34;https://github.com/angular/angular/issues/9516&#34; target=&#34;_blank&#34;&gt;#9516&lt;/a&gt;) (&lt;a href=&#34;https://github.com/angular/angular/commit/638fd74&#34; target=&#34;_blank&#34;&gt;638fd74&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; use formControlName on radio buttons when name is absent (&lt;a href=&#34;https://github.com/angular/angular/issues/9681&#34; target=&#34;_blank&#34;&gt;#9681&lt;/a&gt;) (&lt;a href=&#34;https://github.com/angular/angular/commit/0961bd1&#34; target=&#34;_blank&#34;&gt;0961bd1&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Forms周りは引き続き作業中という感じです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;QueryList:&lt;/strong&gt; implement some() (&lt;a href=&#34;https://github.com/angular/angular/issues/9464&#34; target=&#34;_blank&#34;&gt;#9464&lt;/a&gt;) (&lt;a href=&#34;https://github.com/angular/angular/commit/f6a410a&#34; target=&#34;_blank&#34;&gt;f6a410a&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/9443&#34; target=&#34;_blank&#34;&gt;#9443&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;QueryList#.some()&lt;/code&gt;が実装されました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;router:&lt;/strong&gt; add pathMatch property to replace terminal (&lt;a href=&#34;https://github.com/angular/angular/commit/fcfddbf&#34; target=&#34;_blank&#34;&gt;fcfddbf&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RouteConfigの&lt;code&gt;terminal&lt;/code&gt;が廃止され、&lt;code&gt;pathMatch&lt;/code&gt;フィールドが追加されました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pathMatch: &amp;quot;full&amp;quot;&lt;/code&gt;の場合は、パスと完全一致した時にだけそのルートが使われます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;router:&lt;/strong&gt; implement data and resolve (&lt;a href=&#34;https://github.com/angular/angular/commit/f2f1ec0&#34; target=&#34;_blank&#34;&gt;f2f1ec0&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ActivatedRouteに&lt;code&gt;data&lt;/code&gt;が追加されました。また、&lt;code&gt;resolve&lt;/code&gt;も追加されました。&lt;/p&gt;

&lt;p&gt;dataは単純に固定の値をRouteConfig側で設定しておき、それがActivatedRouteからアクセスできるだけの機能です。&lt;br /&gt;
主に同じコンポーネントを複数のルートで使う時に、どのルートが使われているかの判別などに用います。&lt;/p&gt;

&lt;p&gt;resolveはDIを使って、動的なデータをActivatedRouteから受け取るための機能です。&lt;br /&gt;
dataもresolveもまだ公式ドキュメントは追いついていないので、&lt;br /&gt;
&lt;a href=&#34;https://github.com/angular/angular/blob/master/modules/%40angular/router/test/router.spec.ts#L418-L458&#34; target=&#34;_blank&#34;&gt;このあたり&lt;/a&gt;のテストコードを読むと使い方がわかるでしょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;いやはや、今回も長かったですね。RC.5では&lt;code&gt;AppModule&lt;/code&gt;が導入され、bootstrap周りに大きな動きが出る予定です。&lt;br /&gt;
&lt;code&gt;PLATFORM_DIRECTIVES&lt;/code&gt;や&lt;code&gt;PLATFORM_PIPES&lt;/code&gt;、さらには&lt;code&gt;APP_INITIALIZER&lt;/code&gt;あたりが非推奨APIとなります。&lt;br /&gt;
デザインドキュメントは&lt;a href=&#34;https://docs.google.com/document/d/13-LUm1QvOff2631tHz6C4goIHuMzma2_1_PFiLryoIs/edit&#34; target=&#34;_blank&#34;&gt;こちら&lt;/a&gt;にあるので、先取りしたい方は読んでおくとよいでしょう。&lt;br /&gt;
トラッキングイシューは&lt;a href=&#34;https://github.com/angular/angular/issues/9726&#34; target=&#34;_blank&#34;&gt;こちら&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;それではまた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular2 RC.3の変更点</title>
      <link>https://ng2-info.github.io/2016/06/angular-2-rc-3/</link>
      <pubDate>Wed, 29 Jun 2016 00:25:32 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/06/angular-2-rc-3/</guid>
      <description>

&lt;p&gt;どうも、らこです。リリースから少し時間が経ってしまいましたが、RC.3の変更点をまとめておきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-rc3-2016-06-21&#34; target=&#34;_blank&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;bug-fixes&#34;&gt;Bug Fixes&lt;/h3&gt;

&lt;p&gt;RC.2までの幾つかのバグが修正されました。重要なものだけをピックアップします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;change_detection:&lt;/strong&gt; ChangeDetectorRef reattach should restore original mode (&lt;a href=&#34;https://github.com/angular/angular/commit/773c349&#34; target=&#34;_blank&#34;&gt;773c349&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7078&#34; target=&#34;_blank&#34;&gt;#7078&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/7080&#34; target=&#34;_blank&#34;&gt;#7080&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ChangeDetectorRef.reattach&lt;/code&gt;が常に&lt;code&gt;CheckAlways&lt;/code&gt;を使用していたバグが修正されました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; ngModel should export as ngModel (&lt;a href=&#34;https://github.com/angular/angular/commit/8e6e90e&#34; target=&#34;_blank&#34;&gt;8e6e90e&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;NgModel&lt;/code&gt;ディレクティブが&lt;code&gt;ngForm&lt;/code&gt;としてexportされていたのが修正されました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;perf:&lt;/strong&gt; support prod mode again (&lt;a href=&#34;https://github.com/angular/angular/commit/c0f2a22&#34; target=&#34;_blank&#34;&gt;c0f2a22&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/9318&#34; target=&#34;_blank&#34;&gt;#9318&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/8508&#34; target=&#34;_blank&#34;&gt;#8508&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/9318&#34; target=&#34;_blank&#34;&gt;#9318&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RC.2でうまく動かなくなっていた&lt;code&gt;enableProdMode&lt;/code&gt;が復活しました。&lt;/p&gt;

&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;

&lt;p&gt;新しい機能や改善も幾つか含まれています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;compiler:&lt;/strong&gt; make interpolation symbols configurable (&lt;code&gt;@Component&lt;/code&gt; config) (#9367) (&lt;a href=&#34;https://github.com/angular/angular/commit/1b28cf7&#34; target=&#34;_blank&#34;&gt;1b28cf7&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/9158&#34; target=&#34;_blank&#34;&gt;#9158&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Component&lt;/code&gt;デコレータに&lt;code&gt;interpolation&lt;/code&gt;プロパティが追加され、そのコンポーネントのテンプレート中でのInterpolationのシンボルが変更できるようになりました。&lt;br /&gt;
この機能は私が実装して、@vicbがしっかりレビューしてくれました。&lt;br /&gt;
merge前のちょっとしたミスで私のcommitではなくなってしまいましたがそれはご愛嬌ということで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;datePipe:&lt;/strong&gt; numeric string support (&lt;a href=&#34;https://github.com/angular/angular/commit/5c8d315&#34; target=&#34;_blank&#34;&gt;5c8d315&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;DatePipe&lt;/code&gt;が文字列型の数値を受け付けられるようになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;QueryList:&lt;/strong&gt; support index in callbacks (&lt;a href=&#34;https://github.com/angular/angular/commit/5fe6075&#34; target=&#34;_blank&#34;&gt;5fe6075&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/9278&#34; target=&#34;_blank&#34;&gt;#9278&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;QueryList&lt;/code&gt;の各メソッドのコールバックで&lt;code&gt;index&lt;/code&gt;が第2引数に追加されました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;radio:&lt;/strong&gt; support radio button sharing a control (&lt;a href=&#34;https://github.com/angular/angular/commit/39e0b49&#34; target=&#34;_blank&#34;&gt;39e0b49&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ラジオボタンに対する&lt;code&gt;ngModel&lt;/code&gt;が使いやすくなりました。&lt;br /&gt;
複数のラジオボタンに対して同じオブジェクトを&lt;code&gt;ngModel&lt;/code&gt;で渡した時に、選択状態のラジオボタンのvalueがセットされるようになりました。&lt;/p&gt;

&lt;p&gt;今までは配列やオブジェクトなどを用いて面倒でしたが、Angular 1と似た書き方になり、とても簡単になりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form&amp;gt;
    &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;food&amp;quot; [(ngModel)]=&amp;quot;data.food&amp;quot; value=&amp;quot;chicken&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;food&amp;quot;  [(ngModel)]=&amp;quot;data.food&amp;quot; value=&amp;quot;fish&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;drink&amp;quot; [(ngModel)]=&amp;quot;data.drink&amp;quot; value=&amp;quot;cola&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;drink&amp;quot; [(ngModel)]=&amp;quot;data.drink&amp;quot; value=&amp;quot;sprite&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;breaking-changes&#34;&gt;BREAKING CHANGES&lt;/h3&gt;

&lt;p&gt;わずかな破壊的変更も含まれています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parse5Adapter is no longer exported as public API, use serverBootstrap()&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Parse5Adapter&lt;/code&gt;はこれまでパブリックなAPIでしたが、RC.3からはexportされなくなりました。&lt;br /&gt;
代わりに&lt;code&gt;serverBootstrap()&lt;/code&gt;関数を呼び出します。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上、RC.3の変更点でした。RC.2でパフォーマンスの問題を発生させてなければもう少し先になっていたと思いますが、&lt;br /&gt;
思っていた以上に深刻な不具合だったので、だいぶ前倒しでRC.3がリリースされました。&lt;br /&gt;
RC.4は予定通り、FormsやTestingのAPIの改善が完了してからの落ち着いたリリースになるでしょう。&lt;/p&gt;

&lt;p&gt;それではまた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular 2 RC.2がリリースされました</title>
      <link>https://ng2-info.github.io/2016/06/angular-2-rc-2/</link>
      <pubDate>Thu, 16 Jun 2016 20:51:37 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/06/angular-2-rc-2/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt; : CHANGELOG以外の情報を追加しました。&lt;/p&gt;

&lt;p&gt;どうも、らこです。ようやくRC.2がリリースされたので変更点を確認しましょう。&lt;br /&gt;
1ヶ月以上の間に多くの変更が盛り込まれたので数は多いですが、破壊的変更はほとんどないので、&lt;br /&gt;
落ち着いて移行していきましょう&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-rc2-2016-06-15&#34; target=&#34;_blank&#34;&gt;angular/CHANGELOG.md at master · angular/angular&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;angular-2-rc-2-変更点&#34;&gt;Angular 2 RC.2 変更点&lt;/h2&gt;

&lt;p&gt;CHANGELOG.mdを見ればわかるようにとんでもない変更の数なので、分類してまとまりごとに見ていきましょう。&lt;br /&gt;
まず、アプリケーション開発に関係のあるものだけを抽出すると次のようになります&lt;/p&gt;

&lt;h3 id=&#34;bug-fixes&#34;&gt;Bug Fixes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bootstrap:&lt;/strong&gt; Swap coreBootstrap() and coreLoadAndBootstrap() arguments (&lt;a href=&#34;https://github.com/angular/angular/commit/f95a604&#34; target=&#34;_blank&#34;&gt;f95a604&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;compiler:&lt;/strong&gt; Support for comment finishing with multiple dashes (&lt;a href=&#34;https://github.com/angular/angular/commit/60a2ba8&#34; target=&#34;_blank&#34;&gt;60a2ba8&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7119&#34; target=&#34;_blank&#34;&gt;#7119&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;compiler:&lt;/strong&gt; have CSS parser support nested parentheses inside functions (&lt;a href=&#34;https://github.com/angular/angular/commit/ceac045&#34; target=&#34;_blank&#34;&gt;ceac045&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7580&#34; target=&#34;_blank&#34;&gt;#7580&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control:&lt;/strong&gt; Support select multiple with Control class (#8069) (&lt;a href=&#34;https://github.com/angular/angular/commit/84f859d&#34; target=&#34;_blank&#34;&gt;84f859d&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;facade:&lt;/strong&gt; change EventEmitter to be sync by default (#8761) (&lt;a href=&#34;https://github.com/angular/angular/commit/e5904f4&#34; target=&#34;_blank&#34;&gt;e5904f4&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; rename old forms folder to forms-deprecated (&lt;a href=&#34;https://github.com/angular/angular/commit/515a8e0&#34; target=&#34;_blank&#34;&gt;515a8e0&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; update accessor value when native select value changes (&lt;a href=&#34;https://github.com/angular/angular/commit/7a2ce7f&#34; target=&#34;_blank&#34;&gt;7a2ce7f&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8710&#34; target=&#34;_blank&#34;&gt;#8710&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; update value and validity when controls are added (&lt;a href=&#34;https://github.com/angular/angular/commit/50acb96&#34; target=&#34;_blank&#34;&gt;50acb96&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8826&#34; target=&#34;_blank&#34;&gt;#8826&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; separate ngModelGroup from formGroupName (&lt;a href=&#34;https://github.com/angular/angular/commit/5c0cfdee48ba5aa48528a1c20ffd99318ee716ae&#34; target=&#34;_blank&#34;&gt;5c0cfde&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http:&lt;/strong&gt; Set response.ok (&lt;a href=&#34;https://github.com/angular/angular/commit/9234035&#34; target=&#34;_blank&#34;&gt;9234035&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/6390&#34; target=&#34;_blank&#34;&gt;#6390&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/6503&#34; target=&#34;_blank&#34;&gt;#6503&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;metadata:&lt;/strong&gt; Allow spacing in multiple selectors (#7418) (&lt;a href=&#34;https://github.com/angular/angular/commit/b2e804c&#34; target=&#34;_blank&#34;&gt;b2e804c&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ngSwitch:&lt;/strong&gt; use switchCase instead of switchWhen (#9076) (&lt;a href=&#34;https://github.com/angular/angular/commit/e1fcab7&#34; target=&#34;_blank&#34;&gt;e1fcab7&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Request:&lt;/strong&gt; Change Request.text&amp;rsquo;s return type to string (&lt;a href=&#34;https://github.com/angular/angular/commit/b2e0946&#34; target=&#34;_blank&#34;&gt;b2e0946&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8138&#34; target=&#34;_blank&#34;&gt;#8138&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;router:&lt;/strong&gt; Added pushState fallback for IE 9 browser. (&lt;a href=&#34;https://github.com/angular/angular/commit/bab6023&#34; target=&#34;_blank&#34;&gt;bab6023&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/6506&#34; target=&#34;_blank&#34;&gt;#6506&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/7929&#34; target=&#34;_blank&#34;&gt;#7929&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testing:&lt;/strong&gt;  add discardPeriodicTasks to be used with fakeAsync (#8629) (&lt;a href=&#34;https://github.com/angular/angular/commit/0cb93a4&#34; target=&#34;_blank&#34;&gt;0cb93a4&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8616&#34; target=&#34;_blank&#34;&gt;#8616&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;upgrade:&lt;/strong&gt; allow deeper nesting of ng2 components/directives (#8949) (&lt;a href=&#34;https://github.com/angular/angular/commit/48bf349&#34; target=&#34;_blank&#34;&gt;48bf349&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;upgrade:&lt;/strong&gt; allow functions for template and templateUrl (#9022) (&lt;a href=&#34;https://github.com/angular/angular/commit/a19c4e8&#34; target=&#34;_blank&#34;&gt;a19c4e8&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;upgrade:&lt;/strong&gt; Ensure upgrade adapter works on angular.js 1.2 (#8647) (&lt;a href=&#34;https://github.com/angular/angular/commit/cbc8d0a&#34; target=&#34;_blank&#34;&gt;cbc8d0a&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;upgrade:&lt;/strong&gt; fallback to root ng2 injector when element is compiled outside the document (#86 (&lt;a href=&#34;https://github.com/angular/angular/commit/db82906&#34; target=&#34;_blank&#34;&gt;db82906&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;upgrade:&lt;/strong&gt; make bindings available on $scope in controller &amp;amp; link function (#8645) (&lt;a href=&#34;https://github.com/angular/angular/commit/6cdc53c&#34; target=&#34;_blank&#34;&gt;6cdc53c&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ChangeDetectorRef:&lt;/strong&gt; make detectChanges() correct (&lt;a href=&#34;https://github.com/angular/angular/commit/6028368&#34; target=&#34;_blank&#34;&gt;6028368&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8599&#34; target=&#34;_blank&#34;&gt;#8599&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;common:&lt;/strong&gt; DatePipe supports ISO string (&lt;a href=&#34;https://github.com/angular/angular/commit/abc266f&#34; target=&#34;_blank&#34;&gt;abc266f&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7794&#34; target=&#34;_blank&#34;&gt;#7794&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;common/datePipe:&lt;/strong&gt; change date formatter to use correct pattern closes #7008 (#8154) (&lt;a href=&#34;https://github.com/angular/angular/commit/324f014&#34; target=&#34;_blank&#34;&gt;324f014&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7008&#34; target=&#34;_blank&#34;&gt;#7008&lt;/a&gt; [(#8154](&lt;a href=&#34;https://github.com/(/issues/8154&#34; target=&#34;_blank&#34;&gt;https://github.com/(/issues/8154&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;compiler:&lt;/strong&gt; Add support for &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; (&lt;a href=&#34;https://github.com/angular/angular/commit/0dbff55bc6750653c5f8decc06d07e7269e3d6a5&#34; target=&#34;_blank&#34;&gt;0dbff55&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ComponentResolver:&lt;/strong&gt; Add a SystemJS resolver for compiled apps (#9145) (&lt;a href=&#34;https://github.com/angular/angular/commit/a6e5ddc&#34; target=&#34;_blank&#34;&gt;a6e5ddc&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;core:&lt;/strong&gt; add a component resolver that can load components lazily using system.js (&lt;a href=&#34;https://github.com/angular/angular/commit/1a0aea6&#34; target=&#34;_blank&#34;&gt;1a0aea6&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;core:&lt;/strong&gt; introduce support for animations (&lt;a href=&#34;https://github.com/angular/angular/commit/5e0f8cf&#34; target=&#34;_blank&#34;&gt;5e0f8cf&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8734&#34; target=&#34;_blank&#34;&gt;#8734&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;core/linker:&lt;/strong&gt; add SimpleChanges type to lifecycle_hooks to simplify OnChanges signature (&lt;a href=&#34;https://github.com/angular/angular/commit/0a872ff&#34; target=&#34;_blank&#34;&gt;0a872ff&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8557&#34; target=&#34;_blank&#34;&gt;#8557&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;debug:&lt;/strong&gt; collect styles and classes for the DebugElement (&lt;a href=&#34;https://github.com/angular/angular/commit/155b882&#34; target=&#34;_blank&#34;&gt;155b882&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;enableDebugTools:&lt;/strong&gt; return ComponentRef (&lt;a href=&#34;https://github.com/angular/angular/commit/4086b49&#34; target=&#34;_blank&#34;&gt;4086b49&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; add the submitted flag to NgForm and NgFormModel directives (&lt;a href=&#34;https://github.com/angular/angular/commit/420e83a&#34; target=&#34;_blank&#34;&gt;420e83a&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/2960&#34; target=&#34;_blank&#34;&gt;#2960&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/7449&#34; target=&#34;_blank&#34;&gt;#7449&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; allow ngModel to register with parent form (&lt;a href=&#34;https://github.com/angular/angular/commit/4ed6cf7&#34; target=&#34;_blank&#34;&gt;4ed6cf7&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; compose validator fns automatically if arrays (&lt;a href=&#34;https://github.com/angular/angular/commit/61960c51a3b21d1cfba523f53016f6284182d4e3&#34; target=&#34;_blank&#34;&gt;61960c5&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; support setting control name in ngModelOptions (&lt;a href=&#34;https://github.com/angular/angular/commit/a191e9697c32062eda06cd1f1cfd856d89c16026&#34; target=&#34;_blank&#34;&gt;a191e96&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; add easy way to switch between forms modules (&lt;a href=&#34;https://github.com/angular/angular/commit/22916bb5d1abf2818d7d8d99d39605af251f42e4&#34; target=&#34;_blank&#34;&gt;22916bb&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http:&lt;/strong&gt; added withCredentials support (&lt;a href=&#34;https://github.com/angular/angular/commit/95af14b&#34; target=&#34;_blank&#34;&gt;95af14b&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7281&#34; target=&#34;_blank&#34;&gt;#7281&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/7281&#34; target=&#34;_blank&#34;&gt;#7281&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http:&lt;/strong&gt; automatically set request Content-Type header based on body type (&lt;a href=&#34;https://github.com/angular/angular/commit/0f0a8ad&#34; target=&#34;_blank&#34;&gt;0f0a8ad&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7310&#34; target=&#34;_blank&#34;&gt;#7310&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http:&lt;/strong&gt; implement Response.prototype.toString() to make for a nicer error message (&lt;a href=&#34;https://github.com/angular/angular/commit/89f6108&#34; target=&#34;_blank&#34;&gt;89f6108&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7511&#34; target=&#34;_blank&#34;&gt;#7511&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http:&lt;/strong&gt; set the statusText property from the XMLHttpRequest instance (&lt;a href=&#34;https://github.com/angular/angular/commit/3019140&#34; target=&#34;_blank&#34;&gt;3019140&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/4162&#34; target=&#34;_blank&#34;&gt;#4162&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NgTemplateOutlet:&lt;/strong&gt; add context to NgTemplateOutlet (&lt;a href=&#34;https://github.com/angular/angular/commit/164a091&#34; target=&#34;_blank&#34;&gt;164a091&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/9042&#34; target=&#34;_blank&#34;&gt;#9042&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NgZone:&lt;/strong&gt; isStable (&lt;a href=&#34;https://github.com/angular/angular/commit/587c119&#34; target=&#34;_blank&#34;&gt;587c119&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8108&#34; target=&#34;_blank&#34;&gt;#8108&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security:&lt;/strong&gt; allow data: URLs for images and videos. (&lt;a href=&#34;https://github.com/angular/angular/commit/dd50124&#34; target=&#34;_blank&#34;&gt;dd50124&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security:&lt;/strong&gt; allow url(&amp;hellip;) style values. (&lt;a href=&#34;https://github.com/angular/angular/commit/15ae710&#34; target=&#34;_blank&#34;&gt;15ae710&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8514&#34; target=&#34;_blank&#34;&gt;#8514&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security:&lt;/strong&gt; Automatic XSRF handling. (&lt;a href=&#34;https://github.com/angular/angular/commit/4d793c4&#34; target=&#34;_blank&#34;&gt;4d793c4&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;add minified bundles (&lt;a href=&#34;https://github.com/angular/angular/commit/9175a04&#34; target=&#34;_blank&#34;&gt;9175a04&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security:&lt;/strong&gt; expose the safe value types. (&lt;a href=&#34;https://github.com/angular/angular/commit/50c9bed&#34; target=&#34;_blank&#34;&gt;50c9bed&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8568&#34; target=&#34;_blank&#34;&gt;#8568&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security:&lt;/strong&gt; support transform CSS functions for sanitization. (&lt;a href=&#34;https://github.com/angular/angular/commit/8b1b427&#34; target=&#34;_blank&#34;&gt;8b1b427&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8514&#34; target=&#34;_blank&#34;&gt;#8514&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security:&lt;/strong&gt; warn users when sanitizing in dev mode. (&lt;a href=&#34;https://github.com/angular/angular/commit/3e68b7e&#34; target=&#34;_blank&#34;&gt;3e68b7e&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8522&#34; target=&#34;_blank&#34;&gt;#8522&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;shadow_css:&lt;/strong&gt; add encapsulation support for CSS @supports at-rule (&lt;a href=&#34;https://github.com/angular/angular/commit/cb84cbf&#34; target=&#34;_blank&#34;&gt;cb84cbf&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7944&#34; target=&#34;_blank&#34;&gt;#7944&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ViewEncapsulation:&lt;/strong&gt; default ViewEncapsulation to configurable (&lt;a href=&#34;https://github.com/angular/angular/commit/f93512b&#34; target=&#34;_blank&#34;&gt;f93512b&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7883&#34; target=&#34;_blank&#34;&gt;#7883&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だいぶ絞りましたがまだ多いですね。1件ずつ見ていくとキリがないのでグループごとにまとめていきます&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;コア機能関連&#34;&gt;コア機能関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;facade:&lt;/strong&gt; change EventEmitter to be sync by default (#8761) (&lt;a href=&#34;https://github.com/angular/angular/commit/e5904f4&#34; target=&#34;_blank&#34;&gt;e5904f4&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;EventEmitter&lt;/code&gt; によるイベントの伝播が、デフォルトで同期処理になりました。&lt;br /&gt;
標準のHTML要素からのイベントと同じ振る舞いをするようになり、&lt;code&gt;@Output&lt;/code&gt; との区別をしなくてよくなりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NgZone:&lt;/strong&gt; isStable (&lt;a href=&#34;https://github.com/angular/angular/commit/587c119&#34; target=&#34;_blank&#34;&gt;587c119&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8108&#34; target=&#34;_blank&#34;&gt;#8108&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;NgZone&lt;/code&gt; が &lt;code&gt;isStable&lt;/code&gt; プロパティを持ちます&lt;/p&gt;

&lt;h3 id=&#34;コンポーネント関連&#34;&gt;コンポーネント関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;compiler:&lt;/strong&gt; Support for comment finishing with multiple dashes (&lt;a href=&#34;https://github.com/angular/angular/commit/60a2ba8&#34; target=&#34;_blank&#34;&gt;60a2ba8&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7119&#34; target=&#34;_blank&#34;&gt;#7119&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;!-- --&amp;gt;&lt;/code&gt; のように複数のダッシュ記号で閉じられたコメントが許容されるようになりました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;compiler:&lt;/strong&gt; have CSS parser support nested parentheses inside functions (&lt;a href=&#34;https://github.com/angular/angular/commit/ceac045&#34; target=&#34;_blank&#34;&gt;ceac045&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7580&#34; target=&#34;_blank&#34;&gt;#7580&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コンポーネントが読み込むCSS内で入れ子の関数が許可されました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ChangeDetectorRef:&lt;/strong&gt; make detectChanges() correct (&lt;a href=&#34;https://github.com/angular/angular/commit/6028368&#34; target=&#34;_blank&#34;&gt;6028368&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8599&#34; target=&#34;_blank&#34;&gt;#8599&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私のPRです。&lt;br /&gt;
&lt;code&gt;ChangeDetectorRef#detectChanges()&lt;/code&gt; が、 &lt;code&gt;detach&lt;/code&gt; 状態でも動作するように修正されました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;compiler:&lt;/strong&gt; Add support for &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; (&lt;a href=&#34;https://github.com/angular/angular/commit/0dbff55bc6750653c5f8decc06d07e7269e3d6a5&#34; target=&#34;_blank&#34;&gt;0dbff55&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コンパイル後にHTMLコメントになりDOMに影響しない &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; が導入されました。&lt;br /&gt;
テンプレート内で階層構造だけを作りたいときに使えます。例えば &lt;code&gt;ngSwitch&lt;/code&gt; で無駄なdivタグを作らなくてよくなります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;core/linker:&lt;/strong&gt; add SimpleChanges type to lifecycle_hooks to simplify OnChanges signature (&lt;a href=&#34;https://github.com/angular/angular/commit/0a872ff&#34; target=&#34;_blank&#34;&gt;0a872ff&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8557&#34; target=&#34;_blank&#34;&gt;#8557&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ngOnChanges&lt;/code&gt; メソッドに渡される引数の型が &lt;code&gt;SimpleChanges&lt;/code&gt; 型になりました。&lt;br /&gt;
実体は&lt;code&gt;{[key:string]: SimpleChange}&lt;/code&gt; のタイプエイリアスです&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;metadata:&lt;/strong&gt; Allow spacing in multiple selectors (#7418) (&lt;a href=&#34;https://github.com/angular/angular/commit/b2e804c&#34; target=&#34;_blank&#34;&gt;b2e804c&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これも私のPRです。&lt;br /&gt;
&lt;code&gt;@ViewChildren&lt;/code&gt; や &lt;code&gt;@ContentChildren&lt;/code&gt; に文字列でテンプレート変数を渡すときにカンマ区切りの中にスペースを許容するようになりました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;shadow_css:&lt;/strong&gt; add encapsulation support for CSS @supports at-rule (&lt;a href=&#34;https://github.com/angular/angular/commit/cb84cbf&#34; target=&#34;_blank&#34;&gt;cb84cbf&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7944&#34; target=&#34;_blank&#34;&gt;#7944&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ViewEncapusulation.Emulated&lt;/code&gt; がCSSの &lt;code&gt;@supports&lt;/code&gt; に対応しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ViewEncapsulation:&lt;/strong&gt; default ViewEncapsulation to configurable (&lt;a href=&#34;https://github.com/angular/angular/commit/f93512b&#34; target=&#34;_blank&#34;&gt;f93512b&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7883&#34; target=&#34;_blank&#34;&gt;#7883&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これも私のPRです。&lt;br /&gt;
&lt;code&gt;Component&lt;/code&gt; デコレータに &lt;code&gt;encapsulation&lt;/code&gt; プロパティを設定しなかった時のデフォルトの設定を変更できるようになりました。&lt;br /&gt;
&lt;code&gt;CompilerConfig&lt;/code&gt; から変更可能です&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ComponentResolver:&lt;/strong&gt; Add a SystemJS resolver for compiled apps (#9145) (&lt;a href=&#34;https://github.com/angular/angular/commit/a6e5ddc&#34; target=&#34;_blank&#34;&gt;a6e5ddc&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;core:&lt;/strong&gt; add a component resolver that can load components lazily using system.js (&lt;a href=&#34;https://github.com/angular/angular/commit/1a0aea6&#34; target=&#34;_blank&#34;&gt;1a0aea6&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SystemJSを使ったダイナミックなコンポーネントの読み込みをサポートするための仕組みが整いつつあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;core:&lt;/strong&gt; introduce support for animations (&lt;a href=&#34;https://github.com/angular/angular/commit/5e0f8cf&#34; target=&#34;_blank&#34;&gt;5e0f8cf&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8734&#34; target=&#34;_blank&#34;&gt;#8734&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Animation APIが実装されました。詳しくは後述。&lt;/p&gt;

&lt;h3 id=&#34;http関連&#34;&gt;HTTP関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;http:&lt;/strong&gt; Set response.ok (&lt;a href=&#34;https://github.com/angular/angular/commit/9234035&#34; target=&#34;_blank&#34;&gt;9234035&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/6390&#34; target=&#34;_blank&#34;&gt;#6390&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/6503&#34; target=&#34;_blank&#34;&gt;#6503&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Request:&lt;/strong&gt; Change Request.text&amp;rsquo;s return type to string (&lt;a href=&#34;https://github.com/angular/angular/commit/b2e0946&#34; target=&#34;_blank&#34;&gt;b2e0946&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8138&#34; target=&#34;_blank&#34;&gt;#8138&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http:&lt;/strong&gt; added withCredentials support (&lt;a href=&#34;https://github.com/angular/angular/commit/95af14b&#34; target=&#34;_blank&#34;&gt;95af14b&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7281&#34; target=&#34;_blank&#34;&gt;#7281&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/7281&#34; target=&#34;_blank&#34;&gt;#7281&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http:&lt;/strong&gt; automatically set request Content-Type header based on body type (&lt;a href=&#34;https://github.com/angular/angular/commit/0f0a8ad&#34; target=&#34;_blank&#34;&gt;0f0a8ad&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7310&#34; target=&#34;_blank&#34;&gt;#7310&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http:&lt;/strong&gt; implement Response.prototype.toString() to make for a nicer error message (&lt;a href=&#34;https://github.com/angular/angular/commit/89f6108&#34; target=&#34;_blank&#34;&gt;89f6108&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7511&#34; target=&#34;_blank&#34;&gt;#7511&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http:&lt;/strong&gt; set the statusText property from the XMLHttpRequest instance (&lt;a href=&#34;https://github.com/angular/angular/commit/3019140&#34; target=&#34;_blank&#34;&gt;3019140&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/4162&#34; target=&#34;_blank&#34;&gt;#4162&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;RequestOptions&lt;/code&gt; と &lt;code&gt;BaseRequestOptions&lt;/code&gt; に &lt;code&gt;withCredentials&lt;/code&gt; プロパティが追加されたことと、&lt;br /&gt;
&lt;code&gt;post()&lt;/code&gt; や &lt;code&gt;put()&lt;/code&gt; などの第2引数 &lt;code&gt;body&lt;/code&gt; がany型となり、その型によって自動的にContent-Typeを設定してくれるようになったのが重要です。&lt;br /&gt;
今までワークアラウンドで解決していた部分が不要になるでしょう。&lt;/p&gt;

&lt;h3 id=&#34;ルーター関連&#34;&gt;ルーター関連&lt;/h3&gt;

&lt;p&gt;Router v3が出ていますのでRC.2に含まれているルーター関連のコミットはほとんど意味ないです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;router:&lt;/strong&gt; Added pushState fallback for IE 9 browser. (&lt;a href=&#34;https://github.com/angular/angular/commit/bab6023&#34; target=&#34;_blank&#34;&gt;bab6023&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/6506&#34; target=&#34;_blank&#34;&gt;#6506&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/7929&#34; target=&#34;_blank&#34;&gt;#7929&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ブラウザがPushStateに対応していない時のフォールバックが追加されました&lt;/p&gt;

&lt;h3 id=&#34;パイプ-ディレクティブ関連&#34;&gt;パイプ・ディレクティブ関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ngSwitch:&lt;/strong&gt; use switchCase instead of switchWhen (#9076) (&lt;a href=&#34;https://github.com/angular/angular/commit/e1fcab7&#34; target=&#34;_blank&#34;&gt;e1fcab7&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ngSwitchWhen&lt;/code&gt; が &lt;code&gt;ngSwitchCase&lt;/code&gt; に改名されました。JavaScriptのswitch文と合わせた形です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;common:&lt;/strong&gt; DatePipe supports ISO string (&lt;a href=&#34;https://github.com/angular/angular/commit/abc266f&#34; target=&#34;_blank&#34;&gt;abc266f&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7794&#34; target=&#34;_blank&#34;&gt;#7794&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これも私のPRです。&lt;br /&gt;
DatePipeが &lt;code&gt;Date.fromISOString&lt;/code&gt; で受け入れ可能な ISO形式の文字列を許容するようになりました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;common/datePipe:&lt;/strong&gt; change date formatter to use correct pattern closes #7008 (#8154) (&lt;a href=&#34;https://github.com/angular/angular/commit/324f014&#34; target=&#34;_blank&#34;&gt;324f014&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/7008&#34; target=&#34;_blank&#34;&gt;#7008&lt;/a&gt; [(#8154](&lt;a href=&#34;https://github.com/(/issues/8154&#34; target=&#34;_blank&#34;&gt;https://github.com/(/issues/8154&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DatePipeに渡すフォーマットが正しく動作するようになりました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NgTemplateOutlet:&lt;/strong&gt; add context to NgTemplateOutlet (&lt;a href=&#34;https://github.com/angular/angular/commit/164a091&#34; target=&#34;_blank&#34;&gt;164a091&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/9042&#34; target=&#34;_blank&#34;&gt;#9042&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ngTemplateOutlet&lt;/code&gt; にcontext を渡せるようになりました&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;template [ngTemplateOutlet]=&amp;quot;templateRefExpression&amp;quot; [ngOutletContext]=&amp;quot;objectExpression&amp;quot;&amp;gt;&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;forms関連&#34;&gt;Forms関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Control:&lt;/strong&gt; Support select multiple with Control class (#8069) (&lt;a href=&#34;https://github.com/angular/angular/commit/84f859d&#34; target=&#34;_blank&#34;&gt;84f859d&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;facade:&lt;/strong&gt; change EventEmitter to be sync by default (#8761) (&lt;a href=&#34;https://github.com/angular/angular/commit/e5904f4&#34; target=&#34;_blank&#34;&gt;e5904f4&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; rename old forms folder to forms-deprecated (&lt;a href=&#34;https://github.com/angular/angular/commit/515a8e0&#34; target=&#34;_blank&#34;&gt;515a8e0&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; update accessor value when native select value changes (&lt;a href=&#34;https://github.com/angular/angular/commit/7a2ce7f&#34; target=&#34;_blank&#34;&gt;7a2ce7f&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8710&#34; target=&#34;_blank&#34;&gt;#8710&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; update value and validity when controls are added (&lt;a href=&#34;https://github.com/angular/angular/commit/50acb96&#34; target=&#34;_blank&#34;&gt;50acb96&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8826&#34; target=&#34;_blank&#34;&gt;#8826&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; separate ngModelGroup from formGroupName (&lt;a href=&#34;https://github.com/angular/angular/commit/5c0cfdee48ba5aa48528a1c20ffd99318ee716ae&#34; target=&#34;_blank&#34;&gt;5c0cfde&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; add the submitted flag to NgForm and NgFormModel directives (&lt;a href=&#34;https://github.com/angular/angular/commit/420e83a&#34; target=&#34;_blank&#34;&gt;420e83a&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/2960&#34; target=&#34;_blank&#34;&gt;#2960&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/7449&#34; target=&#34;_blank&#34;&gt;#7449&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; allow ngModel to register with parent form (&lt;a href=&#34;https://github.com/angular/angular/commit/4ed6cf7&#34; target=&#34;_blank&#34;&gt;4ed6cf7&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; compose validator fns automatically if arrays (&lt;a href=&#34;https://github.com/angular/angular/commit/61960c51a3b21d1cfba523f53016f6284182d4e3&#34; target=&#34;_blank&#34;&gt;61960c5&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; support setting control name in ngModelOptions (&lt;a href=&#34;https://github.com/angular/angular/commit/a191e9697c32062eda06cd1f1cfd856d89c16026&#34; target=&#34;_blank&#34;&gt;a191e96&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; add easy way to switch between forms modules (&lt;a href=&#34;https://github.com/angular/angular/commit/22916bb5d1abf2818d7d8d99d39605af251f42e4&#34; target=&#34;_blank&#34;&gt;22916bb&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;@angular/common&lt;/code&gt; の中の Forms APIはすべて deprecatedになりました。&lt;br /&gt;
&lt;code&gt;ngForm&lt;/code&gt; や &lt;code&gt;ngModel&lt;/code&gt; などの基本的な機能はデフォルトで読み込まれるので気にする必要はありませんが、&lt;br /&gt;
&lt;code&gt;FormBuilder&lt;/code&gt; などのモデルドリブンフォームのAPIは &lt;code&gt;@angular/forms&lt;/code&gt; から読み込むようになっていきます。&lt;/p&gt;

&lt;p&gt;機能的には、select要素がmultipleをサポートできるようになったことや、&lt;br /&gt;
&lt;code&gt;ngModel&lt;/code&gt; を設定している時に &lt;code&gt;ngControl&lt;/code&gt; を使わなくてよくなりました。&lt;br /&gt;
また、 ngForm や ngFormModelが submitted フラグを持つようになりました。&lt;/p&gt;

&lt;h3 id=&#34;テスト-デバッグ関連&#34;&gt;テスト・デバッグ関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;enableDebugTools:&lt;/strong&gt; return ComponentRef (&lt;a href=&#34;https://github.com/angular/angular/commit/4086b49&#34; target=&#34;_blank&#34;&gt;4086b49&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;enableDebugTools&lt;/code&gt; が &lt;code&gt;ComponentRef&lt;/code&gt; を返すようになったので、 &lt;code&gt;bootstrap()&lt;/code&gt;の戻り値のPromiseの中で使いやすくなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;bootstrap(App)
  .then(enableDebugTools);
  .then(cmpRef =&amp;gt; {
      ...
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;testing:&lt;/strong&gt;  add discardPeriodicTasks to be used with fakeAsync (#8629) (&lt;a href=&#34;https://github.com/angular/angular/commit/0cb93a4&#34; target=&#34;_blank&#34;&gt;0cb93a4&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8616&#34; target=&#34;_blank&#34;&gt;#8616&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;discardPeriodicTasks&lt;/code&gt; 関数が追加されました。 &lt;code&gt;fakeAsync&lt;/code&gt; 中で残っているピリオディックなタスクを破棄します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;debug:&lt;/strong&gt; collect styles and classes for the DebugElement (&lt;a href=&#34;https://github.com/angular/angular/commit/155b882&#34; target=&#34;_blank&#34;&gt;155b882&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;DebugElement&lt;/code&gt; がstylesとclasssを持つようになりました。&lt;/p&gt;

&lt;h3 id=&#34;セキュリティ関連&#34;&gt;セキュリティ関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;security:&lt;/strong&gt; allow data: URLs for images and videos. (&lt;a href=&#34;https://github.com/angular/angular/commit/dd50124&#34; target=&#34;_blank&#34;&gt;dd50124&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security:&lt;/strong&gt; allow url(&amp;hellip;) style values. (&lt;a href=&#34;https://github.com/angular/angular/commit/15ae710&#34; target=&#34;_blank&#34;&gt;15ae710&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8514&#34; target=&#34;_blank&#34;&gt;#8514&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security:&lt;/strong&gt; Automatic XSRF handling. (&lt;a href=&#34;https://github.com/angular/angular/commit/4d793c4&#34; target=&#34;_blank&#34;&gt;4d793c4&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security:&lt;/strong&gt; expose the safe value types. (&lt;a href=&#34;https://github.com/angular/angular/commit/50c9bed&#34; target=&#34;_blank&#34;&gt;50c9bed&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8568&#34; target=&#34;_blank&#34;&gt;#8568&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security:&lt;/strong&gt; support transform CSS functions for sanitization. (&lt;a href=&#34;https://github.com/angular/angular/commit/8b1b427&#34; target=&#34;_blank&#34;&gt;8b1b427&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8514&#34; target=&#34;_blank&#34;&gt;#8514&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security:&lt;/strong&gt; warn users when sanitizing in dev mode. (&lt;a href=&#34;https://github.com/angular/angular/commit/3e68b7e&#34; target=&#34;_blank&#34;&gt;3e68b7e&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/8522&#34; target=&#34;_blank&#34;&gt;#8522&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ようやく落ち着きを見せてきたセキュリティ対応です。&lt;br /&gt;
&lt;code&gt;data:image/png&lt;/code&gt; のような値が許可されたり、スタイルの &lt;code&gt;url()&lt;/code&gt; 関数が許可されたり、CSS中の関数のバリデーションが緩和されたりしています。&lt;br /&gt;
また、ProdModeじゃない時にはセキュリティに引っかかったときにwarningメッセージが出てくるようになりました&lt;/p&gt;

&lt;h3 id=&#34;アップグレード関連&#34;&gt;アップグレード関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;upgrade:&lt;/strong&gt; allow deeper nesting of ng2 components/directives (#8949) (&lt;a href=&#34;https://github.com/angular/angular/commit/48bf349&#34; target=&#34;_blank&#34;&gt;48bf349&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ng2 &amp;gt; ng1 &amp;gt; ng2 のような複雑な入れ子構造で正しく動くようになります&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;upgrade:&lt;/strong&gt; allow functions for template and templateUrl (#9022) (&lt;a href=&#34;https://github.com/angular/angular/commit/a19c4e8&#34; target=&#34;_blank&#34;&gt;a19c4e8&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ng1側のディレクティブの &lt;code&gt;template&lt;/code&gt; や &lt;code&gt;templateUrl&lt;/code&gt; が関数の場合にその戻り値をテンプレートとして扱うようになりました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;upgrade:&lt;/strong&gt; Ensure upgrade adapter works on angular.js 1.2 (#8647) (&lt;a href=&#34;https://github.com/angular/angular/commit/cbc8d0a&#34; target=&#34;_blank&#34;&gt;cbc8d0a&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;upgrade:&lt;/strong&gt; make bindings available on $scope in controller &amp;amp; link function (#8645) (&lt;a href=&#34;https://github.com/angular/angular/commit/6cdc53c&#34; target=&#34;_blank&#34;&gt;6cdc53c&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Angular 1.2に対応しました。 &lt;code&gt;bindToController&lt;/code&gt; がないときにはディレクティブのcontroller関数やlink関数で &lt;code&gt;$scope&lt;/code&gt; から&lt;br /&gt;
ng2 componentからのデータバインディングが可能になりました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;upgrade:&lt;/strong&gt; fallback to root ng2 injector when element is compiled outside the document (#86 (&lt;a href=&#34;https://github.com/angular/angular/commit/db82906&#34; target=&#34;_blank&#34;&gt;db82906&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ui-routerのように、ディレクティブを外部でコンパイルしたものをドキュメントに挿入した時に、&lt;br /&gt;
挿入されたディレクティブがルートのInjectorを参照するようにフォールバックが追加されました&lt;/p&gt;

&lt;h3 id=&#34;その他&#34;&gt;その他&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;add minified bundles (&lt;a href=&#34;https://github.com/angular/angular/commit/9175a04&#34; target=&#34;_blank&#34;&gt;9175a04&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各パッケージごとにbundleされたumd.jsが同梱されます&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;また、CHANGELOG以外にも公式ブログでのアナウンスもされているので一緒に紹介します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://angularjs.blogspot.jp/2016/06/rc2-now-available.html&#34; target=&#34;_blank&#34;&gt;RC2 Now Available&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;animation-apiのサポート&#34;&gt;Animation APIのサポート&lt;/h3&gt;

&lt;p&gt;ついにAnimation APIが実装されました。ドキュメントも用意されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://angular.io/docs/ts/latest/guide/animations.html&#34; target=&#34;_blank&#34;&gt;Animations - ts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このドキュメントはng-confでもAnimationを担当した@teropa氏によるものです。&lt;br /&gt;
gitアニメーション付きでわかりやすくてよいです。&lt;/p&gt;

&lt;h3 id=&#34;forms-api&#34;&gt;Forms API&lt;/h3&gt;

&lt;p&gt;RC.2に新しいForms APIの一部が実装されています。オプトインになっているので試したい方は &lt;code&gt;@angular/forms&lt;/code&gt; を使ってみましょう。&lt;/p&gt;

&lt;h3 id=&#34;多くのプルリクエストの消化&#34;&gt;多くのプルリクエストの消化&lt;/h3&gt;

&lt;p&gt;100以上のPRがマージされ、多くのバグが修正され、大きく改善されました&lt;/p&gt;

&lt;h3 id=&#34;web-workerサポート&#34;&gt;Web Workerサポート&lt;/h3&gt;

&lt;p&gt;RCリリースの際に一度ドロップしていたWeb Workerサポートが完全復帰しました。&lt;/p&gt;

&lt;h3 id=&#34;今後の予定&#34;&gt;今後の予定&lt;/h3&gt;

&lt;p&gt;RCは今後もいくつか続き、最終的には2.0.0 Finalを目指していきます。&lt;br /&gt;
数ヶ月以内に辿り着きそうとのことで、FormsやRouterも含めて期待していきましょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;いかがでしたでしょうか。&lt;br /&gt;
大きく変わったのはForms周りくらいで、あとはちょっと便利な機能が増えたりバグが直ったりと嬉しい変更ばかりです。&lt;br /&gt;
新しいForms APIに関してはまだ未完成なので今後も要チェックです。しばらくは今までどおりのAPIを使っていてもいいでしょう。&lt;br /&gt;
RC.3は来月以降とのことなのでゆっくり慣らしていけるはずです。&lt;/p&gt;

&lt;p&gt;Router v3も細かい修正が重なっているので、落ち着いたところでまた変更点を紹介します。&lt;br /&gt;
それではまた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular 2 RCリリースについて</title>
      <link>https://ng2-info.github.io/2016/05/angular-2-rc-1/</link>
      <pubDate>Mon, 09 May 2016 11:35:30 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/05/angular-2-rc-1/</guid>
      <description>

&lt;p&gt;ng-confお疲れ様でした、らこです。&lt;br /&gt;
Angular 2もついにRelease Candidateとなりまして、最終リリースへのステップをまたひとつ進めたところです。&lt;br /&gt;
Betaから大きく変わっている部分もありますが基本的には機械的に対応可能な破壊的変更なので、さくっとRC対応していきましょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;パッケージの変更&#34;&gt;パッケージの変更&lt;/h2&gt;

&lt;p&gt;RCからはnpmで配布するパッケージ自体が変わりました。&lt;br /&gt;
今まではすべて &lt;code&gt;angular2&lt;/code&gt; パッケージの中にまとめられて配布されていましたが、今後は細かい単位でパッケージが分割されます。&lt;br /&gt;
古い&lt;code&gt;angular2&lt;/code&gt;のモジュールと新しいパッケージの対応は以下のようになっています。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;angular2/***&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;@angular/***&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;core&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;core&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;common&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;common&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;compiler&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;compiler&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;testing&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;core/testing, compiler/testing, platform-browser/testing,&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;platform/browser&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;platform-browser, &lt;strong&gt;platform-browser-dynamic&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;platform/server&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;platform-server&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;platform/common&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;common&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;http&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;http&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;router&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;router-deprecated&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;alt_router&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;router&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;upgrade&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;upgrade&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;@angular/core&lt;/code&gt; というパッケージ名は、npmの &lt;em&gt;scoped package&lt;/em&gt; という形式で、&lt;br /&gt;
「&amp;rdquo;angular&amp;rdquo; organizationの &amp;ldquo;core&amp;rdquo; パッケージ」という意味になります。&lt;br /&gt;
具体的には次のようなインストールコマンドを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm i @angular/core @angular/compiler @angular/common @angular/platform-browser @angular/platform-browser-dynamic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パッケージは小分けになりましたが、各パッケージはpeer dependencyで依存しあっているので、&lt;br /&gt;
もし足りないパッケージがあったとしてもインストール後にwarningが発生して教えてくれます。&lt;/p&gt;

&lt;p&gt;ところで、一部のAPI、&lt;code&gt;AnimationBuilder&lt;/code&gt;や&lt;code&gt;BrowserDomAdapter&lt;/code&gt;などがパブリックなAPIから消滅しています。&lt;br /&gt;
内部的には存在していて、無理やり使用することはできますが、自己責任で。&lt;br /&gt;
おそらくRC以降に巻き込まれて一時的に隠れているだけだと思われます。&lt;/p&gt;

&lt;h2 id=&#34;依存パッケージの変更&#34;&gt;依存パッケージの変更&lt;/h2&gt;

&lt;p&gt;今までAngular 2はいくつかのpeer dependencyを持っていましたが、それが最小限のものだけになりました。&lt;br /&gt;
具体的には、&lt;code&gt;es6-shim&lt;/code&gt;と&lt;code&gt;reflect-metadata&lt;/code&gt;がpeer dependencyから削除されました。&lt;br /&gt;
これは依存しなくなったわけではなく、使用するpolyfillをユーザーに委ねるようにした、いわゆるポリシー変更です。&lt;br /&gt;
ES6機能のpolyfillには以前からcore-jsなど他のものを使うことができましたが、es6-shimをインストールしないとwarningがでるという状態だったので、&lt;br /&gt;
扱いやすい形に変わったといえます。&lt;/p&gt;

&lt;h2 id=&#34;platform-browserとplatform-browser-dynamicの分割&#34;&gt;platform-browserとplatform-browser-dynamicの分割&lt;/h2&gt;

&lt;p&gt;従来通りランタイムでbootstrapする方式と、Offline Compilerを使ったstaticなbootstrap方式の両方をサポートするため、&lt;br /&gt;
ブラウザプラットフォーム用のパッケージが&lt;code&gt;@angular/platform-browser&lt;/code&gt;と&lt;code&gt;@angular/platform-browser-dynamic&lt;/code&gt;に分割されました。&lt;br /&gt;
元々&lt;code&gt;angular2/platform/browser&lt;/code&gt;からexportされてた&lt;code&gt;bootstrap&lt;/code&gt;関数は、&lt;code&gt;@angular/platform-browser-dynamic&lt;/code&gt;に含まれています。&lt;/p&gt;

&lt;h2 id=&#34;alt-routerがrouterに昇格&#34;&gt;alt_routerがrouterに昇格&lt;/h2&gt;

&lt;p&gt;今までの&lt;code&gt;angular2/router&lt;/code&gt;モジュールは&lt;code&gt;@angular/router-deprecated&lt;/code&gt;パッケージとなり、&lt;br /&gt;
その名の通り過去のものになってしまいました。&lt;br /&gt;
そしてVictor Savkinが作りなおした新しいパッケージが&lt;code&gt;@angular/router&lt;/code&gt;として配布されています。&lt;/p&gt;

&lt;p&gt;しかしまだ&lt;code&gt;@angular/router&lt;/code&gt;は開発途上なので、旧routerから移行するには機能が足りていない場合があります。&lt;br /&gt;
既存のAngular 2アプリケーションはまだしばらく&lt;code&gt;@angular/router-deprecated&lt;/code&gt;でもよさそうです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Beta.17まで順調についてきていればあとはパッケージ名の置換だけで済むはずなので、さくっとRC対応できるはずです。&lt;br /&gt;
RCも短いスパンでアップデートされていくのが目に見えているので、置いていかれないようにしていきましょう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beta.16とBeta.17の変更点</title>
      <link>https://ng2-info.github.io/2016/04/beta-16-and-beta-17/</link>
      <pubDate>Fri, 29 Apr 2016 23:36:29 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/04/beta-16-and-beta-17/</guid>
      <description>

&lt;p&gt;どうも、らこです。&lt;br /&gt;
今週はBeta.16とBeta.17の2つのリリースがありまして、特にBeta.16はベータ始まって以来の最大級の変更がリリースされているので、&lt;br /&gt;
みなさんにはぜひとも頑張ってBeta.17へのアップデートを乗り越えて欲しいところです。&lt;br /&gt;
破壊的変更は多いですが、基本的なAPIについては機械的に修正可能なものがほとんどです。&lt;br /&gt;
逆に、Angular 2の深いところまで潜っていた方ほど被害が大きいでしょう。&lt;br /&gt;
それでは重要な変更をピックアップしていきます。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;changelog-https-github-com-angular-angular-blob-master-changelog-md&#34;&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md&#34; target=&#34;_blank&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;location-が-angular2-platform-common-に移動しました&#34;&gt;&lt;code&gt;Location&lt;/code&gt; が &lt;code&gt;angular2/platform/common&lt;/code&gt; に移動しました&lt;/h3&gt;

&lt;p&gt;これまで &lt;code&gt;angular2/router&lt;/code&gt; モジュールから提供されていた &lt;code&gt;Location&lt;/code&gt; クラスが、&lt;br /&gt;
新しく生まれた &lt;code&gt;angular2/platform/common&lt;/code&gt; モジュールに移動しました。&lt;br /&gt;
つまり Core側のパッケージに含まれることになり、 &lt;code&gt;angular2/router&lt;/code&gt; に依存せずに使えるようになります。&lt;/p&gt;

&lt;p&gt;また、 &lt;code&gt;Location&lt;/code&gt; に関連する &lt;code&gt;APP_BASE_HREF&lt;/code&gt; や &lt;code&gt;LocationStrategy&lt;/code&gt; などのAPIも移動しています。&lt;br /&gt;
以前は次のようにインポートしていましたが、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {
  PlatformLocation,
  Location,
  LocationStrategy,
  HashLocationStrategy,
  PathLocationStrategy,
  APP_BASE_HREF}
from &#39;angular2/router&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今後は次のようにインポートするようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {
  PlatformLocation,
  Location,
  LocationStrategy,
  HashLocationStrategy,
  PathLocationStrategy,
  APP_BASE_HREF}
from &#39;angular2/platform/common&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;injector-が読み込み専用になり-reflectiveinjector-が追加されました&#34;&gt;&lt;code&gt;Injector&lt;/code&gt; が読み込み専用になり、 &lt;code&gt;ReflectiveInjector&lt;/code&gt; が追加されました&lt;/h3&gt;

&lt;p&gt;Offline Compileの実装に伴い、&lt;code&gt;Injector&lt;/code&gt;に大きな変更が入りました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://angular.io/docs/ts/latest/api/core/Injector-class.html&#34; target=&#34;_blank&#34;&gt;Injector - ts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まず第一に、 &lt;code&gt;Injector&lt;/code&gt; クラスが抽象クラスとなり、 &lt;code&gt;get&lt;/code&gt; メソッドだけを提供するようになりました。&lt;br /&gt;
これまで &lt;code&gt;Injector&lt;/code&gt;が提供していた他のメソッドは、具象クラスである &lt;code&gt;ReflectiveInjector&lt;/code&gt; が実装しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://angular.io/docs/ts/latest/api/core/ReflectiveInjector-class.html&#34; target=&#34;_blank&#34;&gt;ReflectiveInjector - ts&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;var injector = ReflectiveInjector.resolveAndCreate([]);
expect(injector.get(Injector)).toBe(injector);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、&lt;code&gt;getOptional&lt;/code&gt; メソッドが廃止され、 &lt;code&gt;get&lt;/code&gt; メソッドが第2引数としてデフォルト値を取るようになりました。&lt;br /&gt;
デフォルト値を設定しない時にプロバイダが見つからなかった時は今までどおり例外が発生します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;injector.get(optionalDependency, notFoundValue);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;compiler-の廃止と-componentfactory-の導入&#34;&gt;&lt;code&gt;Compiler&lt;/code&gt;の廃止と&lt;code&gt;ComponentFactory&lt;/code&gt;の導入&lt;/h3&gt;

&lt;p&gt;コンポーネントを動的にコンパイルするためのAPIとして、これまでは&lt;code&gt;Compiler&lt;/code&gt;が提供されていましたが、&lt;br /&gt;
これが廃止され、新たに&lt;code&gt;ComponentResolver&lt;/code&gt;と&lt;code&gt;ComponentFactory&lt;/code&gt;という2つのAPIが追加されました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/0c600cf6e31b7f69f5a36f7dea959e4884217a4d&#34; target=&#34;_blank&#34;&gt;refactor(core): introduce ComponentFactory. · angular/angular@0c600cf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ComponentResolver&lt;/code&gt;は基本的に従来の&lt;code&gt;Compiler&lt;/code&gt;とほとんど変わらないAPIを持っています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// beta.15
export abstract class Compiler {
  abstract compileInHost(componentType: Type): Promise&amp;lt;HostViewFactoryRef&amp;gt;;
  abstract clearCache();
}

// beta.17
export abstract class ComponentResolver {
  abstract resolveComponent(componentType: Type): Promise&amp;lt;ComponentFactory&amp;gt;;
  abstract clearCache();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ComponentResolver&lt;/code&gt;はプロバイダを記述しなくてもコンポーネントやディレクティブでインジェクト可能です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ComponentResolver#resolveComponent&lt;/code&gt;が返す&lt;code&gt;ComponentFactory&lt;/code&gt;は&lt;br /&gt;
後述する&lt;code&gt;ViewContainerRef.createComponent&lt;/code&gt;のメソッドの引数として使うことができます。&lt;br /&gt;
また、&lt;code&gt;ComponentFactory.create&lt;/code&gt; メソッドを使えば、ビューへの挿入なしに、&lt;code&gt;ComponentRef&lt;/code&gt;だけを生成できます。&lt;/p&gt;

&lt;h3 id=&#34;viewcontainerref-createhostview-が-createcomponent-に改名されました&#34;&gt;&lt;code&gt;ViewContainerRef.createHostView&lt;/code&gt; が &lt;code&gt;.createComponent&lt;/code&gt;に改名されました&lt;/h3&gt;

&lt;p&gt;よりわかりやすい名前に変わり、戻り値の型も &lt;code&gt;HostViewRef&lt;/code&gt; から &lt;code&gt;ComponentRef&lt;/code&gt; に変わりました。&lt;/p&gt;

&lt;p&gt;さらに、&lt;code&gt;ResolvedProvider&lt;/code&gt;クラスが廃止された影響で、第3引数は&lt;code&gt;Injector&lt;/code&gt;を要求するようになりました。&lt;br /&gt;
もしInjectorを渡したい場合は、専用の新しい子Injectorを作ってあげるのが推奨されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;let childInjector = ReflectiveInjector.resolveAndCreate(…);
vcRef.createComponent(cmpFactory, index, childInjector)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dynamiccomponentloader-loadintolocation-が廃止されました&#34;&gt;&lt;code&gt;DynamicComponentLoader.loadIntoLocation&lt;/code&gt; が廃止されました&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/efbd446d18e6e0380beafcad6e94a7751d788623&#34; target=&#34;_blank&#34;&gt;refactor(core): add &lt;code&gt;Query.read&lt;/code&gt; and remove `DynamicComponentLoader.l… · angular/angular@efbd446&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;指定した要素をコンテナとして動的にコンポーネントをビューに追加するAPIだった &lt;code&gt;DynamicComponentLoader.loadIntoLocation&lt;/code&gt; が廃止されました。&lt;br /&gt;
代わりに、指定した要素の次の位置に追加する &lt;code&gt;DynamicComponentLoader.loadNextToLocation&lt;/code&gt; が引数として&lt;code&gt;ElementRef&lt;/code&gt;ではなく&lt;code&gt;ViewContainerRef&lt;/code&gt;を要求するようになりました。&lt;br /&gt;
つまり、動的にコンポーネントをビューへ追加するには必ず&lt;code&gt;ViewContainerRef&lt;/code&gt;が必要になったということです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ViewContainerRef&lt;/code&gt;はコンポーネントやディレクティブが自身のものをDIで取得することができます。&lt;br /&gt;
また、コンポーネントのテンプレート中から任意の要素の&lt;code&gt;ViewContainerRef&lt;/code&gt;を得るには、&lt;code&gt;@ViewChild&lt;/code&gt;を使います。&lt;br /&gt;
通常、&lt;code&gt;@ViewChild(&amp;quot;loc&amp;quot;)&lt;/code&gt;とすると&lt;code&gt;#loc&lt;/code&gt;が付与された要素の&lt;code&gt;ElementRef&lt;/code&gt;が得られますが、&lt;br /&gt;
第2引数として &lt;code&gt;{read: ViewContainerRef}&lt;/code&gt;とすることでコンテナを取得することができます&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;@Component({
    selector: &#39;my-comp&#39;,
    template: &#39;&amp;lt;div #loc&amp;gt;&amp;lt;/div&amp;gt;&#39;
})
class MyComp {
  ctxBoolProp: boolean;

  @ViewChild(&#39;loc&#39;, {read: ViewContainerRef}) viewContainerRef: ViewContainerRef;

  constructor(private loader: DynamicComponentLoader){}

  loadChildComponent() {
    this.loader.loadNextToLocation(OtherComponent, this.viewContainerRef)
        .then(componentRef =&amp;gt; {
            ...
        });
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;appviewmanager-が廃止されました&#34;&gt;&lt;code&gt;AppViewManager&lt;/code&gt; が廃止されました&lt;/h3&gt;

&lt;p&gt;低レイヤーのビュー管理APIだった &lt;code&gt;AppViewManager&lt;/code&gt;が内部専用のAPIになり、外部には公開されなくなりました。&lt;br /&gt;
&lt;code&gt;AppViewManager&lt;/code&gt;でできることは&lt;code&gt;DynamicComponentLoader&lt;/code&gt;と&lt;code&gt;ViewContainerRef&lt;/code&gt;で同じことができます。&lt;/p&gt;

&lt;h3 id=&#34;componentref-dispose-が-componentref-destroy-に改名されました&#34;&gt;&lt;code&gt;ComponentRef.dispose&lt;/code&gt; が &lt;code&gt;ComponentRef.destroy&lt;/code&gt;に改名されました&lt;/h3&gt;

&lt;p&gt;名前が変わっただけです。ライフサイクルの&lt;code&gt;ngOnDestroy&lt;/code&gt;に合わせてわかりやすくした形です。&lt;/p&gt;

&lt;h3 id=&#34;非同期テストのやりかたが大きく変わりました&#34;&gt;非同期テストのやりかたが大きく変わりました&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;angular2/testing&lt;/code&gt;での非同期テストが大きく変わりました。&lt;/p&gt;

&lt;p&gt;まず最初に、非同期テストを行うために &lt;code&gt;zone.js/dist/async-test&lt;/code&gt;の読み込みが必要になりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &amp;quot;zone.js/dist/async-test&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、APIも変わっています。これまではDIを行いつつ非同期テストを行うには&lt;code&gt;injectAsync&lt;/code&gt;関数を使っていましたが、&lt;br /&gt;
DIを行う&lt;code&gt;inject&lt;/code&gt;関数と、非同期テストを行う&lt;code&gt;async&lt;/code&gt;関数の2つに分離されました&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Before:

it(&#39;should wait for returned promises&#39;, injectAsync([FancyService], (service) =&amp;gt; {
  return service.getAsyncValue().then((value) =&amp;gt; { expect(value).toEqual(&#39;async value&#39;); });
}));
it(&#39;should wait for returned promises&#39;, injectAsync([], () =&amp;gt; {
  return somePromise.then(() =&amp;gt; { expect(true).toEqual(true); });
}));

// After
it(&#39;should wait for returned promises&#39;, async(inject([FancyService], (service) =&amp;gt; {
  service.getAsyncValue().then((value) =&amp;gt; { expect(value).toEqual(&#39;async value&#39;); });
})));
it(&#39;should wait for returned promises&#39;, async(() =&amp;gt; {
  somePromise.then() =&amp;gt; { expect(true).toEqual(true); });
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;async&lt;/code&gt;関数に渡された関数は、そのテスト固有のZoneが生成され、&lt;br /&gt;
そのZoneが非同期処理の完了を監視してくれるので、&lt;code&gt;done&lt;/code&gt;のような明示的なテスト終了処理は不要です。&lt;br /&gt;
Promiseをreturnする必要もなくなりました。&lt;/p&gt;

&lt;p&gt;ちなみに、&lt;code&gt;fakeAsync&lt;/code&gt;も同様です。&lt;br /&gt;
&lt;code&gt;fakeAsync&lt;/code&gt;を使う際には追加で &lt;code&gt;zone.js/dist/fake-async-test&lt;/code&gt;の読み込みが必要になり、&lt;br /&gt;
使い方も&lt;code&gt;fakeAsync(inject([...], (...) =&amp;gt; {...}))&lt;/code&gt;のように変わります。&lt;/p&gt;

&lt;h3 id=&#34;renderer-rendercomponent-が廃止されました&#34;&gt;&lt;code&gt;Renderer.renderComponent&lt;/code&gt;が廃止されました&lt;/h3&gt;

&lt;p&gt;任意のコンポーネントをレンダリングする低レベルAPIだった&lt;code&gt;Renderer.renderComponent&lt;/code&gt;が廃止されました。&lt;br /&gt;
同じAPIは&lt;code&gt;RootRenderer.renderComponent&lt;/code&gt;として提供されています。&lt;/p&gt;

&lt;h3 id=&#34;ビューのクエリの仕様が変わりました&#34;&gt;ビューのクエリの仕様が変わりました&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/2b34c88&#34; target=&#34;_blank&#34;&gt;refactor(view_compiler): codegen DI and Queries · angular/angular@2b34c88&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@ViewQuery&lt;/code&gt;や&lt;code&gt;@ViewChild&lt;/code&gt;、&lt;code&gt;@ContentChild&lt;/code&gt;などのビュークエリは、&lt;code&gt;DynamicComponentLoader&lt;/code&gt;によって動的に読み込まれたコンポーネントには適用されない、という仕様に変わりました。&lt;br /&gt;
例えば、&lt;code&gt;&amp;lt;router-outlet&amp;gt;&lt;/code&gt;によって読み込まれるコンポーネントは、クエリ対象になりません。&lt;br /&gt;
ただし、&lt;code&gt;&amp;lt;router-outlet&amp;gt;&lt;/code&gt;は&lt;code&gt;activate&lt;/code&gt;イベントを発火するので、&lt;br /&gt;
新しく読み込まれたコンポーネントの&lt;code&gt;ComponentRef&lt;/code&gt;を取得することができます。&lt;br /&gt;
動的にコンポーネントを読み込む場合は同じようにイベントを発火してあげるようにしましょう。&lt;/p&gt;

&lt;h3 id=&#34;change-detectionの処理順序が変わりました&#34;&gt;Change Detectionの処理順序が変わりました&lt;/h3&gt;

&lt;p&gt;Change Detectionの処理順序が次のようになります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inputのチェック&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ngOnChanges&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngOnInit&lt;/code&gt; (一度のみ)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngDoCheck&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Contentの更新&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;ContentのChange Detection&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ContentChildren&lt;/code&gt;の更新&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngAfterContentChecked&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Viewの更新&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;ViewのChange Detection&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ViewChildren&lt;/code&gt;/&lt;code&gt;ViewQuery&lt;/code&gt;の更新&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngAfterViewChecked&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;pipeのパラメータの仕様が変更されました&#34;&gt;Pipeのパラメータの仕様が変更されました&lt;/h3&gt;

&lt;p&gt;これまで、Pipeの&lt;code&gt;transform&lt;/code&gt;メソッドには第2引数の型が&lt;code&gt;args: any[]&lt;/code&gt;だったので常に配列が渡されていましたが、&lt;br /&gt;
&lt;code&gt;...args: any[]&lt;/code&gt;に変わり、直接オブジェクトを受け取れるようになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Before
@Pipe({name: &amp;quot;repeat&amp;quot;})
class RepeatPipe implemetes PipeTransform {
    transform(value: any, args: any[]): any {
        let times = &amp;lt;number&amp;gt;args[0]; // 常に配列なので0番目を取得する必要があった
        return value.repeat(times);
    }
}

// After
@Pipe({name: &amp;quot;repeat&amp;quot;})
class RepeatPipe implemetes PipeTransform {
    transform(value: any, times: number): any {
        return value.repeat(times);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;シンタックスの仕様変更と-let-ref-シンタックスの追加&#34;&gt;&lt;code&gt;#...&lt;/code&gt;シンタックスの仕様変更と&lt;code&gt;let-&lt;/code&gt;/&lt;code&gt;ref-&lt;/code&gt;シンタックスの追加&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/d2efac1&#34; target=&#34;_blank&#34;&gt;feat(core): separate refs from vars. · angular/angular@d2efac1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これまで、&lt;code&gt;ngFor&lt;/code&gt;の中で使われる&lt;code&gt;#...&lt;/code&gt;は反復中のオブジェクトを示し、それ以外では付与された要素の参照を示していましたが、&lt;br /&gt;
これは混乱を招いていました。&lt;/p&gt;

&lt;p&gt;そこで、テンプレート内でのローカル変数を作るためのシンタックスとして新しく&lt;code&gt;let-&lt;/code&gt;が追加されました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!--Before--&amp;gt;
&amp;lt;li *ngFor=&amp;quot;#item of items; #i = index&amp;quot;&amp;gt;...&amp;lt;/li&amp;gt;
&amp;lt;template ngFor=&amp;quot;#item of items; #i = index&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;template ngFor #item [ngForOf]=&amp;quot;items&amp;quot; #i=&amp;quot;index&amp;quot;&amp;gt;&amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;&amp;lt;/template&amp;gt;

&amp;lt;!--After--&amp;gt;
&amp;lt;li *ngFor=&amp;quot;let item of items; let i = index&amp;quot;&amp;gt;...&amp;lt;/li&amp;gt;
&amp;lt;template ngFor=&amp;quot;let item of items; let i = index&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;template ngFor let-item [ngForOf]=&amp;quot;items&amp;quot; let-i=&amp;quot;index&amp;quot;&amp;gt;&amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、&lt;code&gt;#...&lt;/code&gt;シンタックスはこれまで&lt;code&gt;var-...&lt;/code&gt;と対応していましたが、今後は&lt;code&gt;ref-...&lt;/code&gt;になります。&lt;br /&gt;
通常の要素に付与すればその要素の参照に、&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;要素に付与すれば&lt;code&gt;TemplateRef&lt;/code&gt;として扱えます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var-&lt;/code&gt;シンタックスは将来的に廃止される非推奨なAPIとなりました。&lt;br /&gt;
&lt;code&gt;let-&lt;/code&gt;か&lt;code&gt;ref-&lt;/code&gt;のどちらかに書き直しましょう。&lt;/p&gt;

&lt;h3 id=&#34;templateref-にコンテキストのジェネリクスが付きました&#34;&gt;&lt;code&gt;TemplateRef&lt;/code&gt;にコンテキストのジェネリクスが付きました&lt;/h3&gt;

&lt;p&gt;先述の&lt;code&gt;let-&lt;/code&gt;と関連して、ローカル変数をオブジェクトとして扱うためのコンテキストが導入されました。&lt;br /&gt;
&lt;code&gt;TemplateRef&lt;/code&gt;は、自身のコンテキストの型をジェネリクスとして宣言する必要があります&lt;/p&gt;

&lt;p&gt;例えば、&lt;code&gt;NgFor&lt;/code&gt;は&lt;code&gt;NgForRow&lt;/code&gt;というコンテキストを持っています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export class NgForRow {
  constructor(public $implicit: any, public index: number, public count: number) {}

  get first(): boolean { return this.index === 0; }

  get last(): boolean { return this.index === this.count - 1; }

  get even(): boolean { return this.index % 2 === 0; }

  get odd(): boolean { return !this.even; }
}

...

export class NgFor implements DoCheck {
  ...

  constructor(private _viewContainer: ViewContainerRef, private _templateRef: TemplateRef&amp;lt;NgForRow&amp;gt;,
              private _iterableDiffers: IterableDiffers, private _cdr: ChangeDetectorRef) {}

  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ViewContainerRef.createEmbeddedView&lt;/code&gt;を使って&lt;code&gt;TemplateRef&lt;/code&gt;からビューを作るときに、第2引数としてコンテキストオブジェクトを渡すことができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class SomeViewportContext {
  constructor(public someTmpl: string) {}
}

@Directive({selector: &#39;[someViewport]&#39;})
@Injectable()
class SomeViewport {
constructor(container: ViewContainerRef, templateRef: TemplateRef&amp;lt;SomeViewportContext&amp;gt;) {
  container.createEmbeddedView(templateRef, new SomeViewportContext(&#39;hello&#39;));
  container.createEmbeddedView(templateRef, new SomeViewportContext(&#39;again&#39;));
  }
}

&amp;lt;template someViewport let-greeting=&amp;quot;someTmpl&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;{{greeting}}&amp;lt;/p&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテキストを使ってローカル変数を設定できるようになったので、&lt;br /&gt;
従来の&lt;code&gt;EmbeddedViewRef.setLocal&lt;/code&gt;は削除されました。&lt;/p&gt;

&lt;h3 id=&#34;ngtemplateoutlet-の追加&#34;&gt;&lt;code&gt;NgTemplateOutlet&lt;/code&gt;の追加&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;TemplateRef&lt;/code&gt;を渡すと内部のViewContainerにセットしてくれる便利なディレクティブが追加されました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;
  &amp;lt;template #tmp&amp;gt;
    &amp;lt;h1&amp;gt;Template!!&amp;lt;/h1&amp;gt;
  &amp;lt;/template&amp;gt;
  &amp;lt;div [ngTemplateOutlet]=&amp;quot;tmp&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単に&lt;code&gt;router-outlet&lt;/code&gt;のようなビューの切り替えが実装できるようになります。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;長い！！！！！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;お疲れ様でした。Beta.16, 17ではOffline Compileのために基盤部分が大きく変わっており、&lt;br /&gt;
深いAPIを使っているほど影響が大きいアップデートです。&lt;br /&gt;
冒頭にも言ったように、このアップデートに対応しておかないと今後の追従が難しいので、&lt;br /&gt;
被害の大きかった人も頑張って対応しましょう。&lt;/p&gt;

&lt;p&gt;Offline Compileの使い方はまだドキュメントがなく、CLIがまだ開発途上らしいのでもうしばらく時間がかかりそうです。&lt;/p&gt;

&lt;p&gt;それでは。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beta.15のリリースと記事の紹介</title>
      <link>https://ng2-info.github.io/2016/04/beta-15/</link>
      <pubDate>Fri, 15 Apr 2016 12:12:13 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/04/beta-15/</guid>
      <description>

&lt;p&gt;どうも、らこです。今週はAngular 2.0.0のBeta.15がリリースされました。まずは主な変更点を紹介します。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;beta-15-https-github-com-angular-angular-blob-master-changelog-md-200-beta15-2016-04-13&#34;&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-beta15-2016-04-13&#34; target=&#34;_blank&#34;&gt;Beta.15&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;テンプレートキャッシュの実装&#34;&gt;テンプレートキャッシュの実装&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/a596b88&#34; target=&#34;_blank&#34;&gt;feat(compiler): Add an implementation for XHR that uses a template ca… · angular/angular@a596b88&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;コンポーネントの&lt;code&gt;templateUrl&lt;/code&gt;で指定されたテンプレートを、コンポーネントのロードより先に読み込んでキャッシュしておくための機能が実装されました。&lt;br /&gt;
karmaなどのテスト時にネックとなるファイル読み込みのXHRの発生を抑制し、&lt;code&gt;templateUrl&lt;/code&gt;でテンプレートを読み込むコンポーネントを同期的に処理できます。&lt;br /&gt;
ただし、まだキャッシュをセットする側の機構が貧弱なのでアプリケーションサイドでは使いづらいです。&lt;br /&gt;
アプリケーションランドでのプリキャッシュ機構は将来的に実装するらしいので、それを待ちましょう。&lt;/p&gt;

&lt;p&gt;テンプレートのキャッシュには&lt;code&gt;CACHED_TEMPLATE_PROVIDER&lt;/code&gt;と&lt;code&gt;CachedXHR&lt;/code&gt;、そして&lt;code&gt;window.$templateCache&lt;/code&gt;を使います。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CACHED_TEMPLATE_PROVIDER&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;後述の&lt;code&gt;CachedXHR&lt;/code&gt;をInjectするためのProviderです。 &lt;code&gt;angular2/platform/browser&lt;/code&gt;でexportされています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CachedXHR&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;内部にキャッシュを持ち、実際にはXHRを行わずにすべてをキャッシュから返すクラスです。&lt;/p&gt;

&lt;p&gt;ただしキャッシュをセットすることは&lt;code&gt;CachedXHR&lt;/code&gt;では担っておらず、次の&lt;code&gt;$templateCache&lt;/code&gt;が実際にテンプレートのキャッシュを管理しています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;window.$templateCache&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;windowに生やすグローバル変数です。次のように使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function setTemplateCache(cache): void {
  (&amp;lt;any&amp;gt;window).$templateCache = cache;
}

function createCachedXHR(): CachedXHR {
  setTemplateCache({&#39;test.html&#39;: &#39;&amp;lt;div&amp;gt;Hello&amp;lt;/div&amp;gt;&#39;});
  return new CachedXHR();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テスト中での具体的な使用例は次のコードを読むと参考になるでしょう&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/modules/angular2/test/platform/browser/xhr_cache_spec.ts&#34; target=&#34;_blank&#34;&gt;angular/xhr_cache_spec.ts at master · angular/angular&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ngforのローカル変数に-first-が追加された&#34;&gt;ngForのローカル変数に&lt;code&gt;first&lt;/code&gt;が追加された&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/ccff175&#34; target=&#34;_blank&#34;&gt;feat(ngFor): Support convenience view local in ngFor · angular/angular@ccff175&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ngFor&lt;/code&gt;が提供する変数に、ループの1件目かどうかを表す&lt;code&gt;first&lt;/code&gt;が追加されました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div *ngFor=&amp;quot;#item of items; #isFirst=first&amp;quot;&amp;gt;{{isFirst.toString()}}&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;余り知られていない気がしますが、&lt;code&gt;last&lt;/code&gt;とか&lt;code&gt;index&lt;/code&gt;とか&lt;code&gt;even&lt;/code&gt;とか&lt;code&gt;odd&lt;/code&gt;とか元々あります。&lt;/p&gt;

&lt;h3 id=&#34;オフラインコンパイル&#34;&gt;オフラインコンパイル&lt;/h3&gt;

&lt;p&gt;まだユーザーランドには降りてきていないですが、内部的にはオフラインコンパイルが可能な機構になってきています。&lt;br /&gt;
おそらくangular-cliとcodelyzerが近日中に対応するので、その様子を見て使い方を勉強できそうです。&lt;/p&gt;

&lt;h3 id=&#34;その他&#34;&gt;その他&lt;/h3&gt;

&lt;p&gt;ngUpgrade側で&lt;code&gt;ngOnInit&lt;/code&gt;の連携がうまくいってなかったバグなどいくつかが修正されてます。&lt;br /&gt;
詳しくはチェンジログを参照してください&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;今回はいくつかのサイトや記事も紹介します。&lt;/p&gt;

&lt;h3 id=&#34;5thingsangular&#34;&gt;5thingsAngular&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://5thingsangular.github.io/&#34; target=&#34;_blank&#34;&gt;5thingsAngular - Get weekly updates on 5 things Angular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;thoughtram blogでお馴染みのPascal Prechtが個人で始めたサイトです。&lt;br /&gt;
毎週月曜日(日本時間で火曜日)に、一週間の間に起きたAngular関連のトピックを5つ紹介してくれます。&lt;br /&gt;
RSSやメール購読など可能なので、ぜひチェックしてみてください。&lt;/p&gt;

&lt;h3 id=&#34;5-rookie-mistakes-to-avoid-with-angular-2&#34;&gt;5 Rookie Mistakes to Avoid with Angular 2&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://angularjs.blogspot.jp/2016/04/5-rookie-mistakes-to-avoid-with-angular.html&#34; target=&#34;_blank&#34;&gt;5 Rookie Mistakes to Avoid with Angular 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GooglerのKara EricksonがAngular公式ブログに書いた記事です。&lt;br /&gt;
初心者が陥る5つのミスについて書かれています。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最後に私のイベントの宣伝です。&lt;/p&gt;

&lt;h3 id=&#34;ng-sake-2&#34;&gt;ng-sake #2&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://ng-sake.connpass.com/event/29591/&#34; target=&#34;_blank&#34;&gt;ng-sake #2 - connpass&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;酒好きのためのAngularミートアップ、ng-sakeのチケットがまだ余っています。&lt;br /&gt;
来週の水曜日なのでぜひいらしてください。&lt;/p&gt;

&lt;h3 id=&#34;ng-conf-extended-tokyo&#34;&gt;ng-conf extended Tokyo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://connpass.com/event/29136/&#34; target=&#34;_blank&#34;&gt;ng-conf extended Tokyo - connpass&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ng-confをライブビューイングする会です。全然集まりませんが当日参加でもいいのでゴールデンウィークの予定が無い方はぜひ遊びに来てください&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;土曜日には大阪でAngular 2ハンズオンが開催されます。私もメンターとして参加しますので良いイベントになるよう努力します。&lt;/p&gt;

&lt;p&gt;それでは。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beta.14がリリースされました</title>
      <link>https://ng2-info.github.io/2016/04/beta-14/</link>
      <pubDate>Sat, 09 Apr 2016 00:12:23 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/04/beta-14/</guid>
      <description>

&lt;p&gt;どうも、らこです。今週もベータリリースが行われ、Beta.14となりました。今回は殆どがバグ修正ですが、変更点をチェックしましょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;upgrade-angular-1のディレクティブ破棄イベントが取得できなかったバグを修正&#34;&gt;upgrade: Angular 1のディレクティブ破棄イベントが取得できなかったバグを修正&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/9be04f8&#34; target=&#34;_blank&#34;&gt;fix(upgrade): leak when angular1 destroys element · angular/angular@9be04f8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;UpgradeAdapterを使ってダウングレードしたコンポーネントが、正しく破棄イベントを拾えていなかったバグが修正されました&lt;/p&gt;

&lt;h3 id=&#34;form-select要素のvalueにオブジェクトをバインディングできるように修正&#34;&gt;form: select要素のvalueにオブジェクトをバインディングできるように修正&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/74e2bd7&#34; target=&#34;_blank&#34;&gt;fix(select): support objects as select values · angular/angular@74e2bd7&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/angular/angular/commit/8db97b0&#34; target=&#34;_blank&#34;&gt;fix(forms): support both value and ng-value · angular/angular@8db97b0&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/angular/angular/commit/3ca6df8&#34; target=&#34;_blank&#34;&gt;fix(select): update name from ng-value to ngValue · angular/angular@3ca6df8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いままではselect要素の中のoption要素はvalue属性に文字列しか渡せませんでしたが、オブジェクトをデータバインディングできるように修正されました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;option [ngValue]=&amp;quot;obj&amp;quot;&amp;gt;{{obj.text}}&amp;lt;/option&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;router-クエリパラメータにスラッシュが含まれている場合に起こる不具合を修正&#34;&gt;router: クエリパラメータにスラッシュが含まれている場合に起こる不具合を修正&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/4902244&#34; target=&#34;_blank&#34;&gt;fix(router): allow forward slashes in query parameters · angular/angular@4902244&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;クエリパラメータ中にスラッシュが存在するのを許容するようになりました。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;この他にもOffline Template Compilationに向けた内部的な機能追加やリファクタリングが進んでいます。ng-confまで1ヶ月を切ったのでこれからどんどんブラッシュアップが進むでしょう。&lt;br /&gt;
routerのリファクタリングも待っているので要チェックです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beta.13リリースとng-conf extendedのお知らせ</title>
      <link>https://ng2-info.github.io/2016/03/beta-13-and-ng-conf-extended/</link>
      <pubDate>Thu, 31 Mar 2016 22:14:33 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/03/beta-13-and-ng-conf-extended/</guid>
      <description>

&lt;p&gt;どうも、らこです。今週もAngular 2のアップデートが行われ、Beta.13になりました。主な変更点をかいつまんで紹介します。&lt;/p&gt;

&lt;h1 id=&#34;beta-13リリース&#34;&gt;Beta.13リリース&lt;/h1&gt;

&lt;h2 id=&#34;デコレータメタデータの静的解決が実装されました&#34;&gt;デコレータメタデータの静的解決が実装されました&lt;/h2&gt;

&lt;p&gt;将来的に実装されるOffline Template Compileのための基礎となる機能が実装されました。&lt;br /&gt;
コンポーネントやディレクティブなどのデコレータで定義している設定(メタデータ)にJavaScriptを実行することなくアクセスできるようにする仕組みです。&lt;br /&gt;
これまではコンポーネントのテンプレートは実行時に文字列が評価されるので静的に解析するのが難しかったですが、&lt;br /&gt;
この仕組みによって予めメタデータの情報だけを抽出できるようになり、ツールによる静的解析に大きく寄与します。&lt;/p&gt;

&lt;p&gt;さっそくcodelyzer(ng2lintから名前が変わりました)で使う計画もあるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/ae876d1&#34; target=&#34;_blank&#34;&gt;feat(build): Persisting decorator metadata · angular/angular@ae876d1&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mgechev/codelyzer/issues/11&#34; target=&#34;_blank&#34;&gt;Use metadata reader · Issue #11 · mgechev/codelyzer&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ngif-などの-系ディレクティブをng-contentで扱いやすくなりました&#34;&gt;&lt;code&gt;*ngIf&lt;/code&gt;などの&lt;code&gt;*-&lt;/code&gt;系ディレクティブをng-contentで扱いやすくなりました&lt;/h2&gt;

&lt;p&gt;これはバグ修正に含めるべきな気もしますが、今まで&lt;code&gt;*-&lt;/code&gt;系のディレクティブが付いた要素はng-contentのselectで選択するときに&lt;code&gt;template&lt;/code&gt;要素としてしかselectできませんでしたが、&lt;br /&gt;
この変更によって直接選択できるようになります。&lt;/p&gt;

&lt;p&gt;次の要素がcontentになっていたとして、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p *ngIf=&amp;quot;condition&amp;quot; foo&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以前はtemplateでしかselectできませんでしたが&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // Use the implicit template for projection
    &amp;lt;ng-content select=&amp;quot;template&amp;quot;&amp;gt;&amp;lt;/ng-content&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これからは直接selectできるようになります&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // Use the actual element for projection
    &amp;lt;ng-content select=&amp;quot;p[foo]&amp;quot;&amp;gt;&amp;lt;/ng-content&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/aa966f5&#34; target=&#34;_blank&#34;&gt;feat(Compiler): Allow overriding the projection selector · angular/angular@aa966f5&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;i18n関連機能の実装が終わりました&#34;&gt;i18n関連機能の実装が終わりました&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-cards=&#34;hidden&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Angular 2 beta 13 is out! The i18n support begins in this release&amp;hellip;&lt;a href=&#34;https://t.co/nsyUVw2Rpr&#34;&gt;https://t.co/nsyUVw2Rpr&lt;/a&gt; &lt;a href=&#34;https://t.co/QZU4ZfyR6s&#34;&gt;pic.twitter.com/QZU4ZfyR6s&lt;/a&gt;&lt;/p&gt;&amp;mdash; Angular (@angularjs) &lt;a href=&#34;https://twitter.com/angularjs/status/715390643732762625&#34;&gt;2016年3月31日&lt;/a&gt;&lt;/blockquote&gt;&lt;br /&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;i18nを実現するためのコンポーネント、ディレクティブ、サービスなどがようやく出揃い、i18n実装完了ということになったようです。&lt;br /&gt;
ただしi18n実装のトラッキングイシューでは全然完了してないので、公式ドキュメントが出るまでは待つほうがよさそうです。&lt;br /&gt;
急ぎで国際化を行いたい場合は、&lt;a href=&#34;https://github.com/ocombe/ng2-translate&#34; target=&#34;_blank&#34;&gt;ocombe/ng2-translate&lt;/a&gt;を使うと良いでしょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/issues/7480&#34; target=&#34;_blank&#34;&gt;Tracking: i18n support · Issue #7480 · angular/angular&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ng-conf-extendedのお知らせ&#34;&gt;ng-conf extendedのお知らせ&lt;/h2&gt;

&lt;p&gt;ソルトレイクシティで5/4から開催されるAngular最大のイベントng-confのライブビューイングイベントを開催します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://connpass.com/event/29136/&#34; target=&#34;_blank&#34;&gt;ng-conf extended Tokyo - connpass&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上のイベントページはすべて英語で書いていますが、ng-confも当然英語のセッションですのでご了承ください。&lt;br /&gt;
日本に住んでいる外国人の方も何人か来てくれそうなので、英語で話ができるいい機会にもなるんじゃないでしょうか。&lt;/p&gt;

&lt;p&gt;ちなみにイベントページにも書いていますが、ソルトレイクシティは日本と時差が15時間あるので、イベントの開始が日本時間の夜中0時で、終了が朝9時です。&lt;br /&gt;
結構ヘビーなので体力に自信のない方は自宅でゆったり見てもらったほうがよいと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Angular 2のフットプリントのサイズを小さくする件について少しずつ動きが出ています。&lt;br /&gt;
まずは現在配布中のmin.jsが軒並み壊れている問題を解決するようです。&lt;br /&gt;
その次に、npmでインストールしたライブラリを含めてアプリケーションをminifyするときに壊れないようにするための手段を用意してくれるようです。&lt;br /&gt;
2,3週間以内に動きがあると思うので楽しみに待ちましょう。&lt;/p&gt;

&lt;p&gt;それでは。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beta.12リリースと最近の動き</title>
      <link>https://ng2-info.github.io/2016/03/beta-12/</link>
      <pubDate>Sat, 26 Mar 2016 08:15:49 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/03/beta-12/</guid>
      <description>

&lt;p&gt;こんにちは、らこです。最近ng-japanやミートアップや普段の仕事などで忙しくて更新が滞ってました。&lt;/p&gt;

&lt;h2 id=&#34;ng-japan&#34;&gt;ng-japan&lt;/h2&gt;

&lt;p&gt;ng-japanお疲れ様でした！現地にいた方もYoutubeで見ていた方も楽しんでもらえたでしょうか？&lt;br /&gt;
私は「&lt;a href=&#34;http://laco0416.github.io/slides/a-way-for-happy-angular-days/#/&#34; target=&#34;_blank&#34;&gt;Angular 2の間違えない始め方&lt;/a&gt;」というセッションでトップバッターを務めさせてもらいまして、Twitterなんかの反応を見る限り好評だったようで嬉しいです。&lt;/p&gt;

&lt;p&gt;全体のまとめは&lt;a href=&#34;http://qiita.com/nyamogera/items/b83833d1e15a55d0bb66&#34; target=&#34;_blank&#34;&gt;ng-japan 2016 セッション資料まとめ - Qiita&lt;/a&gt;が参考になるでしょう。&lt;/p&gt;

&lt;h2 id=&#34;beta-12リリース&#34;&gt;Beta.12リリース&lt;/h2&gt;

&lt;p&gt;Angular 2のBeta.12がリリースされました。予定外のリリースでバグがたくさん残っていたBeta.11の修正がメインですので、&lt;br /&gt;
Beta.11で入った変更も含めて紹介します&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md&#34; target=&#34;_blank&#34;&gt;angular/CHANGELOG.md at master · angular/angular&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;view-アノテーションの廃止&#34;&gt;&lt;code&gt;@View&lt;/code&gt;アノテーションの廃止&lt;/h3&gt;

&lt;p&gt;前にも書きましたがついに廃止されました。今後は&lt;code&gt;@Component&lt;/code&gt;にビューの情報も含めることが必須になります。&lt;/p&gt;

&lt;p&gt;そもそもなぜ&lt;code&gt;@View&lt;/code&gt;と&lt;code&gt;@Component&lt;/code&gt;が共存していたかというと、&lt;br /&gt;
&lt;code&gt;@View&lt;/code&gt;は1つのコンポーネントに複数付けられることが想定されていたからです。&lt;br /&gt;
同じコンポーネントでも状態によってビューのテンプレートを切り替えたい、&lt;br /&gt;
同じロジックでもセレクタによってビューを変えたいなど、動的なビューの切り替えを想定したものでした。&lt;br /&gt;
ただし現状ではそれを実装することはコストが重く、需要もほとんどないので、一旦すべて白紙に戻して仕様から練り直すことになりました。&lt;/p&gt;

&lt;h3 id=&#34;zone-js-0-6-x&#34;&gt;Zone.js 0.6.x&lt;/h3&gt;

&lt;p&gt;すぐにBeta.11が出てしまったのでほとんど気づかれていませんでしたが、Beta.10からZone.jsが0.6系になっています。&lt;br /&gt;
Zone.jsは0.5系までは単なるAngularのサブプロジェクトでしたが、0.6系からはES.next ProposalとなったZones仕様のpolyfillとして存在します。&lt;/p&gt;

&lt;p&gt;Beta.11ではこの新しいZoneへの依存部分にバグがあったので、Beta.12で修正されました。&lt;br /&gt;
Beta.12の修正により、今まで必須だったZone.jsのlong-stack-traceがオプショナルになったので、commonjsでインポートする際は次の1行だけで実行可能になりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;zone.js/dist/zone&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただこれだとZoneをまたいだエラーのスタックトレースが追えなくなるので、特別な事情がなければlong-stack-traceも読み込んでおくほうが良いでしょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;zone.js/dist/zone&amp;quot;;
import &amp;quot;zone.js/dist/long-stack-trace-zone&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zonesの仕様&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/domenic/zones&#34; target=&#34;_blank&#34;&gt;domenic/zones: Zones proposal for JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;peerdependenciesからes6-promiseを削除&#34;&gt;peerDependenciesからes6-promiseを削除&lt;/h3&gt;

&lt;p&gt;peerDependenciesからes6-promiseが削除されました。&lt;br /&gt;
Zone.js 0.6系がPromiseのpolyfillを兼ねるようになったらしいので、ブラウザの対応状況に変化はありません。&lt;/p&gt;

&lt;h2 id=&#34;今後のイベント情報&#34;&gt;今後のイベント情報&lt;/h2&gt;

&lt;p&gt;最近はAngular 2の機運もあって日本でたくさんAngularのイベントが開催されています。&lt;br /&gt;
募集開始直後に埋まってしまうものがほとんどなので、まだ参加できるものを紹介します&lt;/p&gt;

&lt;h3 id=&#34;angularjsハンズオン-初心者向け-in-広島-crunch-lab-https-22525f535689619dc83bdcae89-doorkeeper-jp-events-41718&#34;&gt;&lt;a href=&#34;https://22525f535689619dc83bdcae89.doorkeeper.jp/events/41718&#34; target=&#34;_blank&#34;&gt;AngularJSハンズオン（初心者向け） in 広島 - Crunch-Lab&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;広島で開催されるAngularJSのハンズオンです&lt;/p&gt;

&lt;h3 id=&#34;ng-conf-extended-tokyo-http-connpass-com-event-29136&#34;&gt;&lt;a href=&#34;http://connpass.com/event/29136/&#34; target=&#34;_blank&#34;&gt;ng-conf extended Tokyo&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;私が主催するng-confのライブビューイングイベントです。これは抽選制にするので先着で埋まることはないです。&lt;/p&gt;

&lt;h2 id=&#34;その他&#34;&gt;その他&lt;/h2&gt;

&lt;p&gt;現在はRCに向けた作業がメインでコアチームは多忙なようですが、2,3週間後からはPRの整理を再開できるらしいです。&lt;br /&gt;
送ったパッチがなかなか取り込まれない期間でコントリビューションするにはやきもきしますが、今は待ちましょう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beta.8がリリースされました</title>
      <link>https://ng2-info.github.io/2016/03/beta-8-release/</link>
      <pubDate>Thu, 03 Mar 2016 21:08:12 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/03/beta-8-release/</guid>
      <description>

&lt;p&gt;どうも、らこです。予想通り今週はBeta.8がリリースされましたので、主な変更点をさらっていこうと思います。&lt;/p&gt;

&lt;h2 id=&#34;componentrouter-angular-1用-の破壊的変更&#34;&gt;ComponentRouter(Angular 1用)の破壊的変更&lt;/h2&gt;

&lt;p&gt;Angular 1向けのComponent Routerに破壊的な変更が入りました。DIの文字列が大きく変わっています。&lt;br /&gt;
&lt;code&gt;$route&lt;/code&gt;から&lt;code&gt;$rootRouter&lt;/code&gt;に、&lt;code&gt;router&lt;/code&gt;から&lt;code&gt;$router&lt;/code&gt;になっているので、要注意です。&lt;br /&gt;
また、&lt;code&gt;templateUrl&lt;/code&gt;を持つcomponentにルーティングできなかったバグが修正されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/a1c3be2&#34; target=&#34;_blank&#34;&gt;fix(angular1_router): rename &lt;code&gt;$route&lt;/code&gt; service to &lt;code&gt;$rootRouter&lt;/code&gt; · angular/angular@a1c3be2&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/edad8e3&#34; target=&#34;_blank&#34;&gt;fix(angular1_router): rename &lt;code&gt;router&lt;/code&gt; component binding to &lt;code&gt;$router&lt;/code&gt; · angular/angular@edad8e3&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/d4a4d81&#34; target=&#34;_blank&#34;&gt;fix(angular1_router): support templateUrl components · angular/angular@d4a4d81&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;trackby-のバグ修正&#34;&gt;&lt;code&gt;trackBy&lt;/code&gt;のバグ修正&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ngFor&lt;/code&gt;の&lt;code&gt;trackBy&lt;/code&gt;でインデックスを使った際に配列の操作で容易にChange Detectorが壊れるバグが修正されました&lt;br /&gt;
いろいろ危なっかしい実装だったので心配してましたがようやく安心して&lt;code&gt;trackBy&lt;/code&gt;できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/ab36ea0&#34; target=&#34;_blank&#34;&gt;fix(differ): clean up stale identity change refs · angular/angular@ab36ea0&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみにAngular 1でもAngular 2でも共通する話ですが、&lt;code&gt;ng-repeat&lt;/code&gt;も&lt;code&gt;ngFor&lt;/code&gt;も&lt;code&gt;trackBy&lt;/code&gt;を使うと目に見えてパフォーマンスが上がります。&lt;br /&gt;
配列の変更検知をするためには「どの要素」が変わったのかを効率よく調べないと全要素舐め直すことになるので、&lt;br /&gt;
一意性の調べ方をこちらで提供してあげるとめっちゃ早くなります。前にも貼った気がしますが、&lt;br /&gt;
&lt;a href=&#34;https://github.com/angular/angular/issues/7088&#34; target=&#34;_blank&#34;&gt;Is Angular 2 faster ? · Issue #7088 · angular/angular&lt;/a&gt;&lt;br /&gt;
では最初に「&lt;code&gt;track by&lt;/code&gt;した&lt;code&gt;ng-repeat&lt;/code&gt;」と「素の&lt;code&gt;ngFor&lt;/code&gt;」を比較してAngular 2が本当に速いのか疑問を投げかけていますが、&lt;br /&gt;
&lt;a href=&#34;https://plnkr.co/edit/cjFGtnI704bjSg6F0DEM?p=preview&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ngFor&lt;/code&gt;と&lt;code&gt;trackBy&lt;/code&gt;を併用&lt;/a&gt;すると明らかにAngular 2のほうが速くなっていることがわかりました。&lt;/p&gt;

&lt;p&gt;要素数が多く、変更も多いパフォーマンスのネックになりがちな部分には&lt;code&gt;trackBy&lt;/code&gt;をつけるようにしましょう。&lt;/p&gt;

&lt;h2 id=&#34;querylist-foreach-の実装&#34;&gt;&lt;code&gt;QueryList#forEach()&lt;/code&gt;の実装&lt;/h2&gt;

&lt;p&gt;TypeScript/JavaScript側の&lt;code&gt;QueryList&lt;/code&gt;にはなかった&lt;code&gt;forEach&lt;/code&gt;メソッドが追加されました。ちなみに私が実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/b634a25&#34; target=&#34;_blank&#34;&gt;feat(core): Add &lt;code&gt;QueryList#forEach&lt;/code&gt; · angular/angular@b634a25&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/e7470d5&#34; target=&#34;_blank&#34;&gt;feat(core): Add &lt;code&gt;QueryList.forEach&lt;/code&gt; to public api. · angular/angular@e7470d5&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dart版では&lt;code&gt;QueryList&lt;/code&gt;は&lt;code&gt;IterableMixin&lt;/code&gt;クラスを継承しているのでそのまま&lt;code&gt;forEach&lt;/code&gt;が暗黙のうちに生えていたのですが、&lt;br /&gt;
TS/JSでは単なるクラスなので、APIに差ができてしまっていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/d4a4d81173ff31ab8af0f5928735399d92d73339/modules%2Fangular2%2Fsrc%2Fcore%2Flinker%2Fquery_list.ts&#34; target=&#34;_blank&#34;&gt;angular/query_list.ts at d4a4d81173ff31ab8af0f5928735399d92d73339 · angular/angular&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/d4a4d81173ff31ab8af0f5928735399d92d73339/modules%2Fangular2%2Fsrc%2Fcore%2Flinker%2Fquery_list.dart&#34; target=&#34;_blank&#34;&gt;angular/query_list.dart at d4a4d81173ff31ab8af0f5928735399d92d73339 · angular/angular&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://api.dartlang.org/1.14.2/dart-collection/IterableMixin-class.html&#34; target=&#34;_blank&#34;&gt;IterableMixin class - dart:collection library - Dart API&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;デバッグ用のapiが新しく追加された&#34;&gt;デバッグ用のAPIが新しく追加された&lt;/h2&gt;

&lt;p&gt;デバッグ用のAPIが3つも増えました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.getAllAngularRootElements()&lt;/code&gt; : ページ上で&lt;code&gt;angular.bootstrap()&lt;/code&gt;の対象となっているルートエレメントを取得できる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng.coreTokens.ApplicationRef&lt;/code&gt; : &lt;code&gt;ApplicationRef&lt;/code&gt;の参照が取れる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng.coreTokens.Ngzone&lt;/code&gt; : &lt;code&gt;NgZone&lt;/code&gt;の参照が取れる&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ng.prove&lt;/code&gt;と合わせたこれらデバッグAPIの使い方は近いうちに別に特集しようと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/b5e6319&#34; target=&#34;_blank&#34;&gt;feat(core): add more debug APIs to inspect the application form a bro… · angular/angular@b5e6319&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dart版でジェネリクスを使ったdiの廃止&#34;&gt;Dart版でジェネリクスを使ったDIの廃止&lt;/h2&gt;

&lt;p&gt;Dart版のみで、ジェネリック付きの型がDIできなくなりました。背景にはOffline Template Compiler周りの実装の障害になったことがあるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/c9a3df9&#34; target=&#34;_blank&#34;&gt;feat(di): drop support for injecting types with generics in Dart · angular/angular@c9a3df9&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pattern-バリデータの追加&#34;&gt;&lt;code&gt;pattern&lt;/code&gt;バリデータの追加&lt;/h2&gt;

&lt;p&gt;ビルトインのバリデータに&lt;code&gt;pattern&lt;/code&gt;バリデータが追加されました。&lt;code&gt;input&lt;/code&gt;要素のバリデーションに正規表現でパターンを指定できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input [ngControl]=&amp;quot;fullName&amp;quot; pattern=&amp;quot;[a-zA-Z ]*&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/38cb526&#34; target=&#34;_blank&#34;&gt;feat(forms/validators): pattern validator · angular/angular@38cb526&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;i18n機能のpipeの追加&#34;&gt;i18n機能のPipeの追加&lt;/h2&gt;

&lt;p&gt;i18n用に新しく&lt;code&gt;i18nPlural&lt;/code&gt;と&lt;code&gt;i18nSelect&lt;/code&gt;の2つのPipeが追加されました。&lt;/p&gt;

&lt;h3 id=&#34;i18nplural&#34;&gt;&lt;code&gt;i18nPlural&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;i18nPlural&lt;/code&gt;は数値に関するi18n対応を担います。数値の値によって文字列の単数形、複数形を対応させる際に使えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {{ messages.length | i18nPlural: messageMapping }}
&amp;lt;/div&amp;gt;

class MyApp {
  messages: any[];
  messageMapping: any = {
    &#39;=0&#39;: &#39;No messages.&#39;,
    &#39;=1&#39;: &#39;One message.&#39;,
    &#39;other&#39;: &#39;# messages.&#39;
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;i18nselect&#34;&gt;&lt;code&gt;i18nSelect&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;i18nSelect&lt;/code&gt;は文字列に関するi18n対応を担います。文字列の値によって表現を変える部分に有用です。&lt;br /&gt;
次の例では&lt;code&gt;gender&lt;/code&gt;の値によってテキストの中の&lt;code&gt;her&lt;/code&gt;や&lt;code&gt;him&lt;/code&gt;を切り替えています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {{ gender | i18nSelect: inviteMap }}
&amp;lt;/div&amp;gt;

class MyApp {
  gender: string = &#39;male&#39;;
  inviteMap: any = {
    &#39;male&#39;: &#39;Invite her.&#39;,
    &#39;female&#39;: &#39;Invite him.&#39;,
    &#39;other&#39;: &#39;Invite them.&#39;
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/59629a0&#34; target=&#34;_blank&#34;&gt;feat(i18n): added i18nPlural and i18nSelect pipes · angular/angular@59629a0&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;replace-pipeの追加&#34;&gt;&lt;code&gt;replace&lt;/code&gt; Pipeの追加&lt;/h2&gt;

&lt;p&gt;文字列を置換する&lt;code&gt;replace&lt;/code&gt; Pipeが追加されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ expression | replace:pattern:replacement }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という形式で記述できます。具体的には次のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {{ &#39;abcdef&#39; | replace:abcPattern:&#39;ABC&#39; }}
&amp;lt;/div&amp;gt;

class MyApp {
  abcPattern = /abc/g;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると &lt;code&gt;ABCdef&lt;/code&gt; という風に置換されます。挙動は&lt;code&gt;String.prototype.replace&lt;/code&gt;と互換があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/6ef2121&#34; target=&#34;_blank&#34;&gt;feat(pipes): add ReplacePipe for string manipulation · angular/angular@6ef2121&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;今週は便利なAPIがたくさん増えました。こういうアップデートは久々なので良いリファクタリングの機会かもしれません。&lt;/p&gt;

&lt;p&gt;ちなみにBeta.9のリリースからはいよいよrouterの改革が始まります。&lt;code&gt;routerLink&lt;/code&gt;のDSLが徐々に廃止され、正規表現と関数によってルーティングが記述できるようになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/75343eb34007579be9cdc803da834c38e02ae12c&#34; target=&#34;_blank&#34;&gt;feat(router): add regex matchers · angular/angular@75343eb&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;破壊的変更にはしないらしいのでゆったり構えておきましょう。&lt;/p&gt;

&lt;p&gt;参考資料&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-beta8-2016-03-02&#34; target=&#34;_blank&#34;&gt;angular/CHANGELOG.md at master · angular/angular&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Angular2 Beta.7リリースとng-nl情報</title>
      <link>https://ng2-info.github.io/2016/02/beta-7-has-released/</link>
      <pubDate>Sat, 20 Feb 2016 00:13:27 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/02/beta-7-has-released/</guid>
      <description>

&lt;p&gt;こんにちは、らこです。&lt;br /&gt;
今週は週次ミーティングもなく、木曜日にリリースがなかったので次は来週かなと表いましたが、1日遅れでBeta.7にアップデートされました。&lt;/p&gt;

&lt;p&gt;とはいえ今回のリリースはバグ修正のみで、そのバグも小さなものなので、変更点の解説は行いません。&lt;br /&gt;
CHANGELOGのリンクだけを貼っておくので、気になる方はチェックしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-beta7-2016-02-18&#34; target=&#34;_blank&#34;&gt;2.0.0-beta.7 (2016-02-18)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただ、CHANGELOGには載っていないのですがBeta.7でpeerDependenciesが更新されています。&lt;br /&gt;
RxJSは5.0.0-Beta.2に、Zone.jsは0.5.15に上がっています。&lt;br /&gt;
特にRxJSの方は破壊的変更があるので、忘れないようにアップデートしましょう。&lt;br /&gt;
&lt;code&gt;fromPromise&lt;/code&gt;から&lt;code&gt;PromiseObservable&lt;/code&gt;への改名がされているだけなので、忘れていてもビルドが通らなくて気付くはずです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/46d9c87ddc7071e8bc6c21032171610e6b5f6e5a&#34; target=&#34;_blank&#34;&gt;build(package): bump rxjs to 5.0.0-beta.2 · angular/angular@46d9c87&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;リリースノートの話が特になかったので、今回は &lt;strong&gt;ng-nl&lt;/strong&gt; について紹介します。&lt;br /&gt;
昨日、オランダでng-nlというAngularのコミュニティイベントが開催されました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ng-nl.org/&#34; target=&#34;_blank&#34;&gt;NG-NL 2016&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;公式サイト上ではまだセッションやスライドは公開されていないのですが、何人かの登壇者がTwitter上で共有しているので見ることができます。&lt;/p&gt;

&lt;h3 id=&#34;angular-2-change-detection-explained-http-pascalprecht-github-io-slides-angular-2-change-detection-explained&#34;&gt;&lt;a href=&#34;http://pascalprecht.github.io/slides/angular-2-change-detection-explained/#/&#34; target=&#34;_blank&#34;&gt;Angular 2 Change Detection Explained&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Pascal Precht氏によるChange Detectionの解説です。&lt;br /&gt;
Angular2を学習する上で必読といえるレベルのスライドです。ぜひ読んでみてください。&lt;/p&gt;

&lt;h3 id=&#34;angular-2-and-the-single-immutable-state-tree-speaker-deck-https-speakerdeck-com-cironunes-angular-2-and-the-single-immutable-state-tree&#34;&gt;&lt;a href=&#34;https://speakerdeck.com/cironunes/angular-2-and-the-single-immutable-state-tree&#34; target=&#34;_blank&#34;&gt;Angular 2 and the Single Immutable State Tree // Speaker Deck&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Ciro Nunes氏によるImmutableの利点についてのセッションです。&lt;br /&gt;
Angular2におけるMutableなモデルの欠点と、Immutableなモデルを使うことによる利点が説明されており、&lt;br /&gt;
PascalPrechtのCD解説の後に読むとよりわかりやすいと思います。&lt;/p&gt;

&lt;h3 id=&#34;introduction-to-rxjs-5-by-gerard-sans-http-slides-com-gerardsans-ng-nl-rxjs5&#34;&gt;&lt;a href=&#34;http://slides.com/gerardsans/ng-nl-rxjs5#/&#34; target=&#34;_blank&#34;&gt;Introduction to RxJS 5 by Gerard Sans&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Gerard Sans氏によるRxJSの解説です。&lt;br /&gt;
非同期処理の歴史やRxJS/Observableの思想から、Angular2がRxJSを使っていることによる利点を細かく解説しています。&lt;/p&gt;

&lt;p&gt;このスライドと一緒に、去年のAngular ConnectのRxJSセッションも読んでおくと良いでしょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/benlesh1/rxjs-indepth-angularconnect-2015&#34; target=&#34;_blank&#34;&gt;RxJS In-Depth - AngularConnect 2015&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;angular-2-and-relay-speaker-deck-https-speakerdeck-com-sfroestl-angular-2-and-realy&#34;&gt;&lt;a href=&#34;https://speakerdeck.com/sfroestl/angular-2-and-realy&#34; target=&#34;_blank&#34;&gt;Angular 2 and Relay // Speaker Deck&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Sebastian Fröstl氏によるAngular2とRelay/GraphQLの組み合わせに関するセッションです。&lt;br /&gt;
RelayとGraphQLによるクライアント・サーバー間のコミュニケーションの記述と、&lt;br /&gt;
それをAngular2と併用可能であることが紹介されています。&lt;/p&gt;

&lt;h3 id=&#34;how-to-write-an-angular-2-library-by-olivier-combe-http-slides-com-ocombe-ngnl2016&#34;&gt;&lt;a href=&#34;http://slides.com/ocombe/ngnl2016#/&#34; target=&#34;_blank&#34;&gt;How to write an Angular 2 library by Olivier Combe&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Olivier Combe氏によるAngular2のライブラリを書く方法のセッションです。&lt;br /&gt;
残念ながらスライドはあまり詳しくは書かれておらず、セッションの録画が欲しくなります。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;他にも多くのセッションがあったはずなので、見つかり次第紹介していきます。&lt;/p&gt;

&lt;p&gt;ところで、来週の2/24に東京で開催されるAngular2勉強会で、Angular2とライブラリの話で登壇する予定です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://lig.connpass.com/event/26115/&#34; target=&#34;_blank&#34;&gt;第1回Angular2勉強会 #ng2Curry - connpass&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;すでにconnpassの参加枠は埋まっているので今から参加はできませんが、参加予定の方はお楽しみに。&lt;/p&gt;

&lt;p&gt;それではまた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular2 Beta.5リリースと今週のニュース</title>
      <link>https://ng2-info.github.io/2016/02/beta-5-has-released/</link>
      <pubDate>Thu, 11 Feb 2016 10:23:58 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/02/beta-5-has-released/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt;:&lt;br /&gt;
Beta.5にも問題があり、すぐにBeta.6がリリースされています。&lt;br /&gt;
Beta.5で問題が発生した場合はアップデートで解決すると思われます。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;こんにちは、らこです。毎週リリースになってからng2-infoも週刊になりつつあります。&lt;br /&gt;
本来なら今週はBeta.4のリリースだったのですが、&lt;br /&gt;
Beta.4にバージョンが上がった直後に変更漏れが見つかったので、即時修正されてBeta.5としてリリースされています。&lt;br /&gt;
機能的にはほとんどBeta.3と変わらないのですが、多くの修正と開発環境の改善が盛り込まれているので&lt;br /&gt;
早めにアップデートしたいバージョンです。&lt;/p&gt;

&lt;p&gt;それでは注目すべき変更点を挙げていきます&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/c7261c295c130b3ec35687bb07b27c553c8f4961/CHANGELOG.md#200-beta5-2016-02-10&#34; target=&#34;_blank&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;angular1-router-allow-component-to-bind-to-router&#34;&gt;angular1_router: allow component to bind to router&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/0f22dce&#34; target=&#34;_blank&#34;&gt;0f22dce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先週から公開されているAngularJS用のComponentRouterがAngular 1.5で導入されたcomponentに対応しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/excellalabs/ngComponentRouter&#34; target=&#34;_blank&#34;&gt;excellalabs/ngComponentRouter: Angular 2 Component Router for Angular 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もはやngRouteを使う理由はないですが、ui-routerからどのタイミングでどう移行すべきかこれから検討が必要です。&lt;/p&gt;

&lt;h3 id=&#34;typings-install-es6-shim-typings-to-a-location-users-can-reference&#34;&gt;typings: install es6-shim typings to a location users can reference.&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/f1f5b45&#34; target=&#34;_blank&#34;&gt;f1f5b45&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今週の破壊的変更です。angular2パッケージが外部に公開する型定義ファイルが大きく変わりました。&lt;br /&gt;
今回の変更ではes6-shimの型定義がangular2の型定義から参照されなくなり、&lt;br /&gt;
TypeScriptの推奨コンパイルターゲットがes6になりました。&lt;/p&gt;

&lt;p&gt;es6向けにコンパイルする場合はTypeScriptのlib.d.tsからPromiseなどのES6型定義が提供されます。&lt;br /&gt;
今までどおりes5向けにコンパイルする場合はユーザーが明示的にes6-shimの型定義を読み込む必要があります。&lt;br /&gt;
その際の型定義ファイルも&lt;code&gt;browser.d.ts&lt;/code&gt;という型定義ファイルがangular2パッケージに同梱されているので、自分でインストールする必要はありません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;///&amp;lt;reference path=&amp;quot;node_modules/angular2/typings/browser.d.ts&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、テスト用の型定義も本体には含まれなくなっているので、testingモジュールを使う際は&lt;br /&gt;
&lt;a href=&#34;http://github.com/typings/typings&#34; target=&#34;_blank&#34;&gt;typings&lt;/a&gt;を使って、jasmineやangular-protractor、selenium-webdriverの型定義を個別にインストールしないといけません。&lt;/p&gt;

&lt;h3 id=&#34;zone-jsの依存バージョンが0-5-14に上がった&#34;&gt;zone.jsの依存バージョンが0.5.14に上がった&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/fc887774da144db3dd2c3ff0adf418b7ca97730f&#34; target=&#34;_blank&#34;&gt;fix(release): need to depend on latest rxjs and zone.js · angular/angular@fc88777&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beta.3で問題となったzone.jsのpostinstall問題が0.5.14で解決しました。&lt;br /&gt;
Beta.5からはzone.jsがtsdを要求することはありません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/zone.js/commit/877af62a6e39e4dd024517d05541b2f9e81d1bbd&#34; target=&#34;_blank&#34;&gt;chore(build): tsd install on prepublish · angular/zone.js@877af62&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;async-handle-synchronous-initial-value-in-async-pipe&#34;&gt;async: handle synchronous initial value in async pipe&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/26e60d6&#34; target=&#34;_blank&#34;&gt;26e60d6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AsyncPipeが初期値を与えられている場合に即反映するように修正されました&lt;/p&gt;

&lt;h3 id=&#34;compiler-use-event-names-for-matching-directives&#34;&gt;compiler: use event names for matching directives&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/231773e&#34; target=&#34;_blank&#34;&gt;231773e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Directive名と同じ名前のOutputを定義したときに、イベントとして直接Directiveのセレクタが使えるようになりました。&lt;/p&gt;

&lt;p&gt;以前までは次のようにDirectiveとイベントハンドラを別に書く必要がありました&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Directive({selector: &#39;[customEvent]&#39;})
class EventDir {
  @Output() customEvent = new EventEmitter();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div customEvent (customEvent)=&amp;quot;doSomething()&amp;quot;&amp;gt;click me&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今後はselectorとOutputが一致する場合はイベントハンドラだけで宣言できるようになります&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div (customEvent)=&amp;quot;doSomething()&amp;quot;&amp;gt;click me&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;upgrade-fix-infinite-rootscope-digest&#34;&gt;upgrade: fix infinite $rootScope.$digest()&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/7e0f02f&#34; target=&#34;_blank&#34;&gt;7e0f02f&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;UpgradeAdapterを使った時の$digestループ処理にバグがあり、無限にループし続けることがあった問題が修正されました。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;今週の週次ミーティングの内容もざっくりと紹介します。&lt;/p&gt;

&lt;h3 id=&#34;payload-reduction-progress&#34;&gt;Payload reduction &amp;ldquo;progress&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;Angular2のペイロードサイズの削減が本格的に始まる模様です。&lt;br /&gt;
Hello Worldアプリが10kBになるまでとことん減らしていくとのこと。&lt;/p&gt;

&lt;h3 id=&#34;popularity-report-brad&#34;&gt;Popularity report (Brad)&lt;/h3&gt;

&lt;p&gt;Angular2の普及度合いについてのレポートです。&lt;br /&gt;
angular.ioは1ヶ月で292000ビューを記録したらしいです。&lt;br /&gt;
ng-confとAngular Connectで大々的にアピールしてユーザー数を増やしたいという計画。&lt;/p&gt;

&lt;h3 id=&#34;php-rendering-update&#34;&gt;PHP rendering update&lt;/h3&gt;

&lt;p&gt;少し驚きですが、Angular UniversalがHTMLだけでなくPHPもレンダリングできるように拡張する予定があるそうです。&lt;br /&gt;
詳細は未定ですが既存のPHPアプリケーションのバックエンドを差し替えられるようなものを計画中とのこと。&lt;/p&gt;

&lt;h3 id=&#34;template-services-plan&#34;&gt;Template services plan&lt;/h3&gt;

&lt;p&gt;これも驚きの計画で、TypeScriptの入力補完候補などを提供しているLanguage Servicesにプラグイン機構を導入し、&lt;br /&gt;
Angular2のテンプレートHTML中で入力補完が可能になるプラグインを提供しようというものです。&lt;br /&gt;
スクリーンキャストではありますが、実際にAtom上で動作している様子が見られます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/TypeScript/issues/6508&#34; target=&#34;_blank&#34;&gt;TypeScript extensibility · Issue #6508 · Microsoft/TypeScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/billti/TypeScript/blob/ngml/src/services/plugin-ngml.ts#L1785&#34; target=&#34;_blank&#34;&gt;TypeScript/plugin-ngml.ts at ngml · billti/TypeScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript開発チームとともに作っているだけあり、やることが大胆です。&lt;br /&gt;
Language Servicesで対応されれば様々なエディタで入力補完ができるようになるので楽しみにしましょう。&lt;/p&gt;

&lt;h3 id=&#34;angular-2-s-http-moving-to-it-s-own-repo&#34;&gt;Angular 2&amp;rsquo;s HTTP moving to it&amp;rsquo;s own repo&lt;/h3&gt;

&lt;p&gt;Angular2のhttpモジュールは今まではangular/angular内で開発されていましたが、Issueを分けたい、将来的に開発場所も分けたいということで&lt;br /&gt;
リポジトリが独立しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/http&#34; target=&#34;_blank&#34;&gt;angular/http: Angular 2.0 HTTP Module&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今はまだangular/angularで開発されたものがコピーされているだけです。&lt;/p&gt;

&lt;h3 id=&#34;electron&#34;&gt;Electron&lt;/h3&gt;

&lt;p&gt;Angular2でのデスクトップアプリ開発を支援するために、angular/electronというプロジェクトが動くようです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;結構情報盛りだくさんの一週間でした。Beta.5は結構アタリのバージョンだと思うので特に心配なくアップデートしてよさそうです。&lt;/p&gt;

&lt;p&gt;それではまた。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>