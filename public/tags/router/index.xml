<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Router on Angular2 Info</title>
    <link>https://ng2-info.github.io/tags/router/</link>
    <description>Recent content in Router on Angular2 Info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 10 Jun 2016 19:09:12 +0900</lastBuildDate>
    <atom:link href="https://ng2-info.github.io/tags/router/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Router v3と新しいForm APIについて</title>
      <link>https://ng2-info.github.io/2016/06/router-v3-and-new-form-api/</link>
      <pubDate>Fri, 10 Jun 2016 19:09:12 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/06/router-v3-and-new-form-api/</guid>
      <description>

&lt;p&gt;どうも、らこです。しばらく更新が止まってましたが、RC.2が近づいてきてそろそろ復活すると思います。&lt;/p&gt;

&lt;p&gt;6/6のミーティングノートで、RC.2のリリース計画と、新しいRouterのリリースについて書かれました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.google.com/document/d/150lerb1LmNLuau_a_EznPV1I1UHMTbEl61t4hZ7ZpS0/edit#heading=h.p095qktniiv3&#34; target=&#34;_blank&#34;&gt;https://docs.google.com/document/d/150lerb1LmNLuau_a_EznPV1I1UHMTbEl61t4hZ7ZpS0/edit#heading=h.p095qktniiv3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;どれも寝耳に水ではありますが、ここしばらく更新が緩やかだったのはこのために下準備をしていたということがわかってスッキリです。&lt;br /&gt;
ここからはミーティングノートの内容をひとつずつ見ていきます。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;rc-2のリリースについて&#34;&gt;RC.2のリリースについて&lt;/h2&gt;

&lt;p&gt;RC.2のゴールは、Offline Template Compilerを使ってのコンパイルを可能にすることです。&lt;br /&gt;
ほとんど完成していますが、まだいくつかのissueが残っているので、それらが解決したところでRC.2のリリースとなります。&lt;/p&gt;

&lt;h2 id=&#34;form-apiの刷新&#34;&gt;Form APIの刷新&lt;/h2&gt;

&lt;p&gt;いままで特に変更がなかった &lt;code&gt;ngForm&lt;/code&gt; や &lt;code&gt;ngModel&lt;/code&gt;, &lt;code&gt;FormBuilder&lt;/code&gt; など、 &lt;code&gt;@angular/common&lt;/code&gt; Form APIに、大きな変更が入ります。&lt;br /&gt;
担当はAngular Material2と同じKara Erickson氏で、 鋭意作業中です。&lt;br /&gt;
まだ新しいAPIは完成していませんが、デザインドキュメントは公開されているので、どう変わるのかを先に知っておくことはできます&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.google.com/document/d/1RIezQqE4aEhBRmArIAS1mRIZtWFf6JxN_7B4meyWK0Y/pub&#34; target=&#34;_blank&#34;&gt;Forms Upcoming Change Proposal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;基本的な方針は、Angular 1のようなテンプレートドリブンのAPIにすることです。&lt;br /&gt;
今までは &lt;code&gt;ngModel&lt;/code&gt; を書いていても &lt;code&gt;ngControl&lt;/code&gt; も併記しないといけなかったり、 &lt;code&gt;ngForm&lt;/code&gt; や &lt;code&gt;ngFormControl&lt;/code&gt; など混乱しがちなAPIが多くあったことが問題とされていて、&lt;br /&gt;
テンプレートドリブンで書きやすいような設計に書きなおされます。逆に、モデルドリブンなFormの組み立てはオプショナルな機能になってしまいます。&lt;/p&gt;

&lt;h2 id=&#34;router-v3&#34;&gt;Router v3&lt;/h2&gt;

&lt;p&gt;Angular2公式のRouterが新しくリリースされ、ver3.0.0-alpha.3となりました。&lt;/p&gt;

&lt;p&gt;リポジトリはこちら&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/vladivostok&#34; target=&#34;_blank&#34;&gt;angular/vladivostok&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;メインで開発しているのはお馴染みVictor Savkin氏です。&lt;br /&gt;
リポジトリの名前はウラジオストクですが、深い意味はありません。おそらくvictorsavkinから取られてるんじゃないかという気がします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/vladivostok/issues/31&#34; target=&#34;_blank&#34;&gt;Question: why vladivostok? · Issue #31 · angular/vladivostok&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;we ran out of names for routers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Beta Router( &lt;code&gt;@angular/router-deprecated&lt;/code&gt; )をv1として、&lt;br /&gt;
RC Router( &lt;code&gt;@angular/router@2.0.0-rc.1&lt;/code&gt; )がv2になるのですが、そしてそれらを過去にするようやくまともなルーターが出てきました。&lt;br /&gt;
v1, v2からの反省を活かしつつ、 &lt;code&gt;@ngrx/router&lt;/code&gt; や &lt;code&gt;ui-router&lt;/code&gt; の思想を取り入れたv3を今後は使うことになります。&lt;/p&gt;

&lt;p&gt;v2までの問題点と、v3を作るに至った経緯、基本思想は公式ブログで綴られています&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://angularjs.blogspot.jp/2016/06/improvements-coming-for-routing-in.html&#34; target=&#34;_blank&#34;&gt;Improvements Coming for Routing in Angular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Router v3の具体的な使い方はSavkin氏のブログにかかれています。私も触ってみたので&lt;a href=&#34;http://blog.lacolaco.net/post/angular-2-router-v3-alpha-3/&#34; target=&#34;_blank&#34;&gt;こちら&lt;/a&gt;で解説しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://victorsavkin.com/post/145672529346/angular-router&#34; target=&#34;_blank&#34;&gt;Angular Router | Victor Savkin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;公式のドキュメントも2週間以内には公開するとのことです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ng-confとGoogle I/Oが終わってから、Angular Teamはイベントから開放されてひたすらRCを成熟させるためにコードを書いてくれているようです。&lt;br /&gt;
Pull Requestも以前とは比較にならないほどスムーズにやりとりが進んで、マージされるハードルも低くなっているので、&lt;br /&gt;
RCを触っていて見つけたバグは積極的に報告し、PRを送ってみるといいんじゃないかと思います。&lt;/p&gt;

&lt;p&gt;次はRC.2がリリースされたら変更点を紹介する予定です。それでは。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beta.12リリースと最近の動き</title>
      <link>https://ng2-info.github.io/2016/03/beta-12/</link>
      <pubDate>Sat, 26 Mar 2016 08:15:49 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/03/beta-12/</guid>
      <description>

&lt;p&gt;こんにちは、らこです。最近ng-japanやミートアップや普段の仕事などで忙しくて更新が滞ってました。&lt;/p&gt;

&lt;h2 id=&#34;ng-japan&#34;&gt;ng-japan&lt;/h2&gt;

&lt;p&gt;ng-japanお疲れ様でした！現地にいた方もYoutubeで見ていた方も楽しんでもらえたでしょうか？&lt;br /&gt;
私は「&lt;a href=&#34;http://laco0416.github.io/slides/a-way-for-happy-angular-days/#/&#34; target=&#34;_blank&#34;&gt;Angular 2の間違えない始め方&lt;/a&gt;」というセッションでトップバッターを務めさせてもらいまして、Twitterなんかの反応を見る限り好評だったようで嬉しいです。&lt;/p&gt;

&lt;p&gt;全体のまとめは&lt;a href=&#34;http://qiita.com/nyamogera/items/b83833d1e15a55d0bb66&#34; target=&#34;_blank&#34;&gt;ng-japan 2016 セッション資料まとめ - Qiita&lt;/a&gt;が参考になるでしょう。&lt;/p&gt;

&lt;h2 id=&#34;beta-12リリース&#34;&gt;Beta.12リリース&lt;/h2&gt;

&lt;p&gt;Angular 2のBeta.12がリリースされました。予定外のリリースでバグがたくさん残っていたBeta.11の修正がメインですので、&lt;br /&gt;
Beta.11で入った変更も含めて紹介します&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md&#34; target=&#34;_blank&#34;&gt;angular/CHANGELOG.md at master · angular/angular&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;view-アノテーションの廃止&#34;&gt;&lt;code&gt;@View&lt;/code&gt;アノテーションの廃止&lt;/h3&gt;

&lt;p&gt;前にも書きましたがついに廃止されました。今後は&lt;code&gt;@Component&lt;/code&gt;にビューの情報も含めることが必須になります。&lt;/p&gt;

&lt;p&gt;そもそもなぜ&lt;code&gt;@View&lt;/code&gt;と&lt;code&gt;@Component&lt;/code&gt;が共存していたかというと、&lt;br /&gt;
&lt;code&gt;@View&lt;/code&gt;は1つのコンポーネントに複数付けられることが想定されていたからです。&lt;br /&gt;
同じコンポーネントでも状態によってビューのテンプレートを切り替えたい、&lt;br /&gt;
同じロジックでもセレクタによってビューを変えたいなど、動的なビューの切り替えを想定したものでした。&lt;br /&gt;
ただし現状ではそれを実装することはコストが重く、需要もほとんどないので、一旦すべて白紙に戻して仕様から練り直すことになりました。&lt;/p&gt;

&lt;h3 id=&#34;zone-js-0-6-x&#34;&gt;Zone.js 0.6.x&lt;/h3&gt;

&lt;p&gt;すぐにBeta.11が出てしまったのでほとんど気づかれていませんでしたが、Beta.10からZone.jsが0.6系になっています。&lt;br /&gt;
Zone.jsは0.5系までは単なるAngularのサブプロジェクトでしたが、0.6系からはES.next ProposalとなったZones仕様のpolyfillとして存在します。&lt;/p&gt;

&lt;p&gt;Beta.11ではこの新しいZoneへの依存部分にバグがあったので、Beta.12で修正されました。&lt;br /&gt;
Beta.12の修正により、今まで必須だったZone.jsのlong-stack-traceがオプショナルになったので、commonjsでインポートする際は次の1行だけで実行可能になりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;zone.js/dist/zone&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただこれだとZoneをまたいだエラーのスタックトレースが追えなくなるので、特別な事情がなければlong-stack-traceも読み込んでおくほうが良いでしょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;zone.js/dist/zone&amp;quot;;
import &amp;quot;zone.js/dist/long-stack-trace-zone&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zonesの仕様&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/domenic/zones&#34; target=&#34;_blank&#34;&gt;domenic/zones: Zones proposal for JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;peerdependenciesからes6-promiseを削除&#34;&gt;peerDependenciesからes6-promiseを削除&lt;/h3&gt;

&lt;p&gt;peerDependenciesからes6-promiseが削除されました。&lt;br /&gt;
Zone.js 0.6系がPromiseのpolyfillを兼ねるようになったらしいので、ブラウザの対応状況に変化はありません。&lt;/p&gt;

&lt;h2 id=&#34;今後のイベント情報&#34;&gt;今後のイベント情報&lt;/h2&gt;

&lt;p&gt;最近はAngular 2の機運もあって日本でたくさんAngularのイベントが開催されています。&lt;br /&gt;
募集開始直後に埋まってしまうものがほとんどなので、まだ参加できるものを紹介します&lt;/p&gt;

&lt;h3 id=&#34;angularjsハンズオン-初心者向け-in-広島-crunch-lab-https-22525f535689619dc83bdcae89-doorkeeper-jp-events-41718&#34;&gt;&lt;a href=&#34;https://22525f535689619dc83bdcae89.doorkeeper.jp/events/41718&#34; target=&#34;_blank&#34;&gt;AngularJSハンズオン（初心者向け） in 広島 - Crunch-Lab&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;広島で開催されるAngularJSのハンズオンです&lt;/p&gt;

&lt;h3 id=&#34;ng-conf-extended-tokyo-http-connpass-com-event-29136&#34;&gt;&lt;a href=&#34;http://connpass.com/event/29136/&#34; target=&#34;_blank&#34;&gt;ng-conf extended Tokyo&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;私が主催するng-confのライブビューイングイベントです。これは抽選制にするので先着で埋まることはないです。&lt;/p&gt;

&lt;h2 id=&#34;その他&#34;&gt;その他&lt;/h2&gt;

&lt;p&gt;現在はRCに向けた作業がメインでコアチームは多忙なようですが、2,3週間後からはPRの整理を再開できるらしいです。&lt;br /&gt;
送ったパッチがなかなか取り込まれない期間でコントリビューションするにはやきもきしますが、今は待ちましょう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Component Router 解説スライドの紹介他</title>
      <link>https://ng2-info.github.io/2016/03/component-router-by-gerardsans/</link>
      <pubDate>Sun, 06 Mar 2016 22:25:04 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/03/component-router-by-gerardsans/</guid>
      <description>

&lt;p&gt;どうも、らこです。今日は&lt;a href=&#34;https://twitter.com/gerardsans&#34; target=&#34;_blank&#34;&gt;@gerardsans&lt;/a&gt;によるAngular 2のComponent Routerについてのスライドを紹介します。&lt;/p&gt;

&lt;h2 id=&#34;angular-2-component-router-gerardsans&#34;&gt;Angular 2 Component Router (@gerardsans)&lt;/h2&gt;

&lt;iframe src=&#34;//slides.com/gerardsans/riga-dev-day-component-router/embed&#34; width=&#34;576&#34; height=&#34;420&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&#34;http://slides.com/gerardsans/riga-dev-day-component-router#/&#34; target=&#34;_blank&#34;&gt;スライド&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;component-routerの主な機能&#34;&gt;Component Routerの主な機能&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;コンポーネントをベースにしている&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;柔軟なルーティング&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;入れ子のビュー、複数ビュー&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ライフサイクルフック&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;遅延読み込み&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/8i4fQqG.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;bit.ly/spiderman-app&#34; target=&#34;_blank&#34;&gt;bit.ly/spiderman-app&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;セットアップ&#34;&gt;セットアップ&lt;/h3&gt;

&lt;p&gt;Component Routerを使う上で依存するもの&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Angular 2に同梱されているrouter.js&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;LocationStrategyの選択&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ROUTER_PROVIDERS&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ROUTER_DIRECTIVES&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;locationstrategy&#34;&gt;LocationStrategy&lt;/h4&gt;

&lt;p&gt;Component RouterのルーティングがURLでどう表現されるかを選択できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HashLocationStrategy: #/home, #/users/34&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;PathLocationStrategy: /home, /users/34 (&lt;code&gt;APP_HREF_BASE&lt;/code&gt;が別途必要)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ルートの定義&#34;&gt;ルートの定義&lt;/h4&gt;

&lt;p&gt;Componentに対して&lt;code&gt;RouteConfig&lt;/code&gt;アノテーションでルートを定義する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/JEiycGX.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;アウトレットの宣言&#34;&gt;アウトレットの宣言&lt;/h4&gt;

&lt;p&gt;Component RouterでルーティングされたComponentが読み込まれる場所を&lt;code&gt;&amp;lt;router-outlet&amp;gt;&lt;/code&gt;要素で宣言する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/fX35h0a.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;柔軟なルーティング&#34;&gt;柔軟なルーティング&lt;/h3&gt;

&lt;h4 id=&#34;入れ子ルーティング&#34;&gt;入れ子ルーティング&lt;/h4&gt;

&lt;p&gt;親側のComponent側で、&lt;code&gt;/...&lt;/code&gt;を使ったルートを定義すると、その対象のComponent側で入れ子になったルートを定義できる。&lt;br /&gt;
子側のComponentでは必ず&lt;code&gt;useAsDefault&lt;/code&gt;に設定されたルート定義が必要である。&lt;/p&gt;

&lt;p&gt;次の例では親のルート定義で&lt;code&gt;/users/...&lt;/code&gt;に対して&lt;code&gt;Users&lt;/code&gt;が割り当てられた時の、子のルート定義の例を示している。&lt;br /&gt;
&lt;code&gt;/&lt;/code&gt;に対するルートは&lt;code&gt;useAsDefault&lt;/code&gt;になっており、&lt;code&gt;/users&lt;/code&gt;と&lt;code&gt;/users/&lt;/code&gt;どちらにもヒットする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/UTZUPaA.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://i.imgur.com/Uan3ctq.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;ナビゲーション&#34;&gt;ナビゲーション&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;選択したLocationStrategyによってURLの表現は変わる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;routerLink&lt;/code&gt;ディレクティブではLink DSLを使ってルートを表現する&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;プログラム上では&lt;code&gt;Router&lt;/code&gt;クラスを使ってナビゲーションできる&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/Uan3ctq.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;複数ルーティング-auxルーティング&#34;&gt;複数ルーティング(Auxルーティング)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;ではなく&lt;code&gt;aux&lt;/code&gt;を指定したルート定義は、対応した&lt;code&gt;name&lt;/code&gt;が設定された&lt;code&gt;router-outlet&lt;/code&gt;に作用する&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;複数の&lt;code&gt;router-outlet&lt;/code&gt;について、柔軟にナビゲーションが可能&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/Miq0dMx.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;パスパラメータの取得&#34;&gt;パスパラメータの取得&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;:id&lt;/code&gt;など、パス中のパラメータは&lt;code&gt;RouteParams&lt;/code&gt;としてDIで取得できる&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/PF9haKF.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ライフサイクル&#34;&gt;ライフサイクル&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CanDeactive&lt;/code&gt;フックを使うと画面遷移前の保存確認ができる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CanActivate&lt;/code&gt;フックを使うとアクセス制御ができる&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/6rMvGSF.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;遅延読み込み&#34;&gt;遅延読み込み&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;component&lt;/code&gt;の代わりに&lt;code&gt;loader&lt;/code&gt;を設定するとルーティングが発生するまでComponentの読み込みを遅延できる&lt;/p&gt;

&lt;h3 id=&#34;デモ&#34;&gt;デモ&lt;/h3&gt;

&lt;p&gt;一連の内容は&lt;a href=&#34;http://plnkr.co/edit/PdQTp0ZirG6BOtk2uj16?p=preview&#34; target=&#34;_blank&#34;&gt;Plunker&lt;/a&gt;で動かすことができる&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ざっくりと重要な部分だけを要約しました。時間がある方はスライドを見ながらデモを動かすとRouterをばっちり理解できるはずです。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ng-sakeやります&#34;&gt;ng-sakeやります&lt;/h2&gt;

&lt;p&gt;突然ですが、私が主催するイベントの紹介です。ng-sakeというAngularユーザ向けのイベントを開催します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://connpass.com/event/27707/&#34; target=&#34;_blank&#34;&gt;ng-sake&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ng-sakeはお酒を飲みながらAngularについて話すイベントです。開催日は3/30で、ng-japanの翌週です。&lt;br /&gt;
ng-japanのアフターフォローも兼ねた会にしようと思っていて、ng-japanでも一緒に登壇する@armorik83にも手伝ってもらう予定です。Angularに関する大体の質問には答えられるはずです。&lt;/p&gt;

&lt;p&gt;募集開始は &lt;strong&gt;3/8(火)の朝10時&lt;/strong&gt; です。第1回なのもありどれくらい集められるのかわからないので枠が20人と少なめです。&lt;br /&gt;
もし興味があれば忘れないように申し込みしていただければ幸いです。&lt;/p&gt;

&lt;p&gt;それでは。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beta.8がリリースされました</title>
      <link>https://ng2-info.github.io/2016/03/beta-8-release/</link>
      <pubDate>Thu, 03 Mar 2016 21:08:12 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/03/beta-8-release/</guid>
      <description>

&lt;p&gt;どうも、らこです。予想通り今週はBeta.8がリリースされましたので、主な変更点をさらっていこうと思います。&lt;/p&gt;

&lt;h2 id=&#34;componentrouter-angular-1用-の破壊的変更&#34;&gt;ComponentRouter(Angular 1用)の破壊的変更&lt;/h2&gt;

&lt;p&gt;Angular 1向けのComponent Routerに破壊的な変更が入りました。DIの文字列が大きく変わっています。&lt;br /&gt;
&lt;code&gt;$route&lt;/code&gt;から&lt;code&gt;$rootRouter&lt;/code&gt;に、&lt;code&gt;router&lt;/code&gt;から&lt;code&gt;$router&lt;/code&gt;になっているので、要注意です。&lt;br /&gt;
また、&lt;code&gt;templateUrl&lt;/code&gt;を持つcomponentにルーティングできなかったバグが修正されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/a1c3be2&#34; target=&#34;_blank&#34;&gt;fix(angular1_router): rename &lt;code&gt;$route&lt;/code&gt; service to &lt;code&gt;$rootRouter&lt;/code&gt; · angular/angular@a1c3be2&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/edad8e3&#34; target=&#34;_blank&#34;&gt;fix(angular1_router): rename &lt;code&gt;router&lt;/code&gt; component binding to &lt;code&gt;$router&lt;/code&gt; · angular/angular@edad8e3&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/d4a4d81&#34; target=&#34;_blank&#34;&gt;fix(angular1_router): support templateUrl components · angular/angular@d4a4d81&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;trackby-のバグ修正&#34;&gt;&lt;code&gt;trackBy&lt;/code&gt;のバグ修正&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ngFor&lt;/code&gt;の&lt;code&gt;trackBy&lt;/code&gt;でインデックスを使った際に配列の操作で容易にChange Detectorが壊れるバグが修正されました&lt;br /&gt;
いろいろ危なっかしい実装だったので心配してましたがようやく安心して&lt;code&gt;trackBy&lt;/code&gt;できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/ab36ea0&#34; target=&#34;_blank&#34;&gt;fix(differ): clean up stale identity change refs · angular/angular@ab36ea0&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみにAngular 1でもAngular 2でも共通する話ですが、&lt;code&gt;ng-repeat&lt;/code&gt;も&lt;code&gt;ngFor&lt;/code&gt;も&lt;code&gt;trackBy&lt;/code&gt;を使うと目に見えてパフォーマンスが上がります。&lt;br /&gt;
配列の変更検知をするためには「どの要素」が変わったのかを効率よく調べないと全要素舐め直すことになるので、&lt;br /&gt;
一意性の調べ方をこちらで提供してあげるとめっちゃ早くなります。前にも貼った気がしますが、&lt;br /&gt;
&lt;a href=&#34;https://github.com/angular/angular/issues/7088&#34; target=&#34;_blank&#34;&gt;Is Angular 2 faster ? · Issue #7088 · angular/angular&lt;/a&gt;&lt;br /&gt;
では最初に「&lt;code&gt;track by&lt;/code&gt;した&lt;code&gt;ng-repeat&lt;/code&gt;」と「素の&lt;code&gt;ngFor&lt;/code&gt;」を比較してAngular 2が本当に速いのか疑問を投げかけていますが、&lt;br /&gt;
&lt;a href=&#34;https://plnkr.co/edit/cjFGtnI704bjSg6F0DEM?p=preview&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ngFor&lt;/code&gt;と&lt;code&gt;trackBy&lt;/code&gt;を併用&lt;/a&gt;すると明らかにAngular 2のほうが速くなっていることがわかりました。&lt;/p&gt;

&lt;p&gt;要素数が多く、変更も多いパフォーマンスのネックになりがちな部分には&lt;code&gt;trackBy&lt;/code&gt;をつけるようにしましょう。&lt;/p&gt;

&lt;h2 id=&#34;querylist-foreach-の実装&#34;&gt;&lt;code&gt;QueryList#forEach()&lt;/code&gt;の実装&lt;/h2&gt;

&lt;p&gt;TypeScript/JavaScript側の&lt;code&gt;QueryList&lt;/code&gt;にはなかった&lt;code&gt;forEach&lt;/code&gt;メソッドが追加されました。ちなみに私が実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/b634a25&#34; target=&#34;_blank&#34;&gt;feat(core): Add &lt;code&gt;QueryList#forEach&lt;/code&gt; · angular/angular@b634a25&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/e7470d5&#34; target=&#34;_blank&#34;&gt;feat(core): Add &lt;code&gt;QueryList.forEach&lt;/code&gt; to public api. · angular/angular@e7470d5&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dart版では&lt;code&gt;QueryList&lt;/code&gt;は&lt;code&gt;IterableMixin&lt;/code&gt;クラスを継承しているのでそのまま&lt;code&gt;forEach&lt;/code&gt;が暗黙のうちに生えていたのですが、&lt;br /&gt;
TS/JSでは単なるクラスなので、APIに差ができてしまっていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/d4a4d81173ff31ab8af0f5928735399d92d73339/modules%2Fangular2%2Fsrc%2Fcore%2Flinker%2Fquery_list.ts&#34; target=&#34;_blank&#34;&gt;angular/query_list.ts at d4a4d81173ff31ab8af0f5928735399d92d73339 · angular/angular&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/d4a4d81173ff31ab8af0f5928735399d92d73339/modules%2Fangular2%2Fsrc%2Fcore%2Flinker%2Fquery_list.dart&#34; target=&#34;_blank&#34;&gt;angular/query_list.dart at d4a4d81173ff31ab8af0f5928735399d92d73339 · angular/angular&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://api.dartlang.org/1.14.2/dart-collection/IterableMixin-class.html&#34; target=&#34;_blank&#34;&gt;IterableMixin class - dart:collection library - Dart API&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;デバッグ用のapiが新しく追加された&#34;&gt;デバッグ用のAPIが新しく追加された&lt;/h2&gt;

&lt;p&gt;デバッグ用のAPIが3つも増えました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.getAllAngularRootElements()&lt;/code&gt; : ページ上で&lt;code&gt;angular.bootstrap()&lt;/code&gt;の対象となっているルートエレメントを取得できる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng.coreTokens.ApplicationRef&lt;/code&gt; : &lt;code&gt;ApplicationRef&lt;/code&gt;の参照が取れる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng.coreTokens.Ngzone&lt;/code&gt; : &lt;code&gt;NgZone&lt;/code&gt;の参照が取れる&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ng.prove&lt;/code&gt;と合わせたこれらデバッグAPIの使い方は近いうちに別に特集しようと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/b5e6319&#34; target=&#34;_blank&#34;&gt;feat(core): add more debug APIs to inspect the application form a bro… · angular/angular@b5e6319&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dart版でジェネリクスを使ったdiの廃止&#34;&gt;Dart版でジェネリクスを使ったDIの廃止&lt;/h2&gt;

&lt;p&gt;Dart版のみで、ジェネリック付きの型がDIできなくなりました。背景にはOffline Template Compiler周りの実装の障害になったことがあるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/c9a3df9&#34; target=&#34;_blank&#34;&gt;feat(di): drop support for injecting types with generics in Dart · angular/angular@c9a3df9&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pattern-バリデータの追加&#34;&gt;&lt;code&gt;pattern&lt;/code&gt;バリデータの追加&lt;/h2&gt;

&lt;p&gt;ビルトインのバリデータに&lt;code&gt;pattern&lt;/code&gt;バリデータが追加されました。&lt;code&gt;input&lt;/code&gt;要素のバリデーションに正規表現でパターンを指定できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input [ngControl]=&amp;quot;fullName&amp;quot; pattern=&amp;quot;[a-zA-Z ]*&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/38cb526&#34; target=&#34;_blank&#34;&gt;feat(forms/validators): pattern validator · angular/angular@38cb526&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;i18n機能のpipeの追加&#34;&gt;i18n機能のPipeの追加&lt;/h2&gt;

&lt;p&gt;i18n用に新しく&lt;code&gt;i18nPlural&lt;/code&gt;と&lt;code&gt;i18nSelect&lt;/code&gt;の2つのPipeが追加されました。&lt;/p&gt;

&lt;h3 id=&#34;i18nplural&#34;&gt;&lt;code&gt;i18nPlural&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;i18nPlural&lt;/code&gt;は数値に関するi18n対応を担います。数値の値によって文字列の単数形、複数形を対応させる際に使えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {{ messages.length | i18nPlural: messageMapping }}
&amp;lt;/div&amp;gt;

class MyApp {
  messages: any[];
  messageMapping: any = {
    &#39;=0&#39;: &#39;No messages.&#39;,
    &#39;=1&#39;: &#39;One message.&#39;,
    &#39;other&#39;: &#39;# messages.&#39;
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;i18nselect&#34;&gt;&lt;code&gt;i18nSelect&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;i18nSelect&lt;/code&gt;は文字列に関するi18n対応を担います。文字列の値によって表現を変える部分に有用です。&lt;br /&gt;
次の例では&lt;code&gt;gender&lt;/code&gt;の値によってテキストの中の&lt;code&gt;her&lt;/code&gt;や&lt;code&gt;him&lt;/code&gt;を切り替えています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {{ gender | i18nSelect: inviteMap }}
&amp;lt;/div&amp;gt;

class MyApp {
  gender: string = &#39;male&#39;;
  inviteMap: any = {
    &#39;male&#39;: &#39;Invite her.&#39;,
    &#39;female&#39;: &#39;Invite him.&#39;,
    &#39;other&#39;: &#39;Invite them.&#39;
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/59629a0&#34; target=&#34;_blank&#34;&gt;feat(i18n): added i18nPlural and i18nSelect pipes · angular/angular@59629a0&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;replace-pipeの追加&#34;&gt;&lt;code&gt;replace&lt;/code&gt; Pipeの追加&lt;/h2&gt;

&lt;p&gt;文字列を置換する&lt;code&gt;replace&lt;/code&gt; Pipeが追加されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ expression | replace:pattern:replacement }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という形式で記述できます。具体的には次のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {{ &#39;abcdef&#39; | replace:abcPattern:&#39;ABC&#39; }}
&amp;lt;/div&amp;gt;

class MyApp {
  abcPattern = /abc/g;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると &lt;code&gt;ABCdef&lt;/code&gt; という風に置換されます。挙動は&lt;code&gt;String.prototype.replace&lt;/code&gt;と互換があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/6ef2121&#34; target=&#34;_blank&#34;&gt;feat(pipes): add ReplacePipe for string manipulation · angular/angular@6ef2121&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;今週は便利なAPIがたくさん増えました。こういうアップデートは久々なので良いリファクタリングの機会かもしれません。&lt;/p&gt;

&lt;p&gt;ちなみにBeta.9のリリースからはいよいよrouterの改革が始まります。&lt;code&gt;routerLink&lt;/code&gt;のDSLが徐々に廃止され、正規表現と関数によってルーティングが記述できるようになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/75343eb34007579be9cdc803da834c38e02ae12c&#34; target=&#34;_blank&#34;&gt;feat(router): add regex matchers · angular/angular@75343eb&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;破壊的変更にはしないらしいのでゆったり構えておきましょう。&lt;/p&gt;

&lt;p&gt;参考資料&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-beta8-2016-03-02&#34; target=&#34;_blank&#34;&gt;angular/CHANGELOG.md at master · angular/angular&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>1/25 週次ミーティング議事録</title>
      <link>https://ng2-info.github.io/2016/01/weekly-meeting-jan-25/</link>
      <pubDate>Tue, 26 Jan 2016 10:11:27 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/01/weekly-meeting-jan-25/</guid>
      <description>

&lt;p&gt;こんにちは。今週のAngularチームの週次ミーティングについての情報です。&lt;br /&gt;
今後のリリースや計画について多く言及されているので要チェックな内容です。&lt;/p&gt;

&lt;p&gt;議事録は&lt;a href=&#34;https://docs.google.com/document/d/150lerb1LmNLuau_a_EznPV1I1UHMTbEl61t4hZ7ZpS0/edit#&#34; target=&#34;_blank&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;demo-of-the-new-dart-dev-compiler-for-the-team&#34;&gt;Demo of the new Dart Dev Compiler for the team&lt;/h3&gt;

&lt;p&gt;Angularチーム内でDDCを使った開発のデモが行われたようです。&lt;br /&gt;
DDCはDartの新しいコンパイラで、特徴はヒューマンリーダブルなES6を吐き出すことです。&lt;br /&gt;
DDCによる開発をサポートすることで、Angular2 for Dartユーザの開発サイクルを改善できるとしています。&lt;/p&gt;

&lt;p&gt;DDCがサポートされるとDartium以外のブラウザでも即時コンパイルが可能になり、&lt;br /&gt;
さらにDDCが吐き出したES6はBabelなどのコンパイラでさらにES5に変換可能とのこと。&lt;br /&gt;
DDCがどれほど安定しているのかはさておき、for Dartのユーザには朗報です。&lt;/p&gt;

&lt;h3 id=&#34;update-on-i18n-support&#34;&gt;Update on i18n support&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;2016/01/16/working-about-i18n-in-jan/&#34; target=&#34;_blank&#34;&gt;先日取り上げた&lt;/a&gt;Angular2のi18n対応についての続報です。&lt;/p&gt;

&lt;p&gt;i18n対応の目標は&lt;code&gt;{% raw %}{{}}{% endraw %}&lt;/code&gt;によってテンプレートを多言語化することであると改めて定められ、&lt;br /&gt;
まずはじめに静的な文字列について翻訳できるように翻訳できるように作業中とのこと。&lt;br /&gt;
将来的には性別や単数・複数形などの動的なシナリオについてもサポートする予定です。&lt;/p&gt;

&lt;p&gt;忙しくて忘れられているのではないかと思われていましたが、ちゃんと取り組んでいて安心しました。&lt;/p&gt;

&lt;h3 id=&#34;router-update&#34;&gt;Router update&lt;/h3&gt;

&lt;p&gt;Routerモジュールのアップデートが行われます。&lt;br /&gt;
遅延ローディングや、コンポーネントとルーティング設定のコードの分割を可能にするための修正が行われる予定で、&lt;br /&gt;
この変更のために現在のRouterのシンタックスが多少変わる可能性があります。&lt;/p&gt;

&lt;p&gt;ただし今後数週間かけて改修を行うとのことで、今すぐに破壊的変更が来ることはないでしょう。&lt;/p&gt;

&lt;h3 id=&#34;angular-1-5-update&#34;&gt;Angular 1.5 update&lt;/h3&gt;

&lt;p&gt;AngularJSの1.5 RC2が水曜日（日本時間だと木曜日）にリリース予定です。&lt;br /&gt;
そして、1.5の最終版は来週、遅くても再来週にはリリースするとのこと。&lt;/p&gt;

&lt;p&gt;1.5 finalに向け、Brian氏はAngular2のComponent Routerと協調できるように作業中らしく、&lt;br /&gt;
&lt;code&gt;component&lt;/code&gt;の導入によってAngular2と同じスタイルでComponent Routerを使って開発できるようになるようです。&lt;/p&gt;

&lt;p&gt;1.5 finalのリリース時には&lt;code&gt;component&lt;/code&gt;の使い方についてのチュートリアルやドキュメントを整備するらしく、&lt;br /&gt;
まだAngular2に触れていないAngularJSユーザでもスムーズにコンポーネント化を進めることができるでしょう。&lt;/p&gt;

&lt;h3 id=&#34;animation-update&#34;&gt;Animation Update&lt;/h3&gt;

&lt;p&gt;Animationサポートについても情報の更新がありました。&lt;br /&gt;
Animationモジュールのデザインドキュメントが&lt;a href=&#34;https://docs.google.com/document/d/1rTJKNJ6Rv2N5jElLIrrukuEsS_kFOQPH1D5O1Dfva44/edit#heading=h.x01aekc0f0sk&#34; target=&#34;_blank&#34;&gt;公開&lt;/a&gt;され、&lt;br /&gt;
CSSと協調したアノテーションベースのアニメーション記述を可能にする方針であることがわかりました。&lt;br /&gt;
また、アニメーションにはW3Cで仕様策定中の&lt;a href=&#34;https://www.w3.org/TR/web-animations-1/&#34; target=&#34;_blank&#34;&gt;Web Animations API&lt;/a&gt;を使用するようです。&lt;/p&gt;

&lt;p&gt;現在はCSSを解釈するためのパーサが開発中で、まもなく完成します。&lt;br /&gt;
&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1G5-hb4DpqddLtDV0PD0cueeVh7Eb8o7fPmNryX4AvGM/edit#gid=0&#34; target=&#34;_blank&#34;&gt;残りのタスク&lt;/a&gt;はまだたくさんありますが、&lt;br /&gt;
すでに半分は作業中なのでパーサさえできてしまえば案外早くBetaに入ってくるのではないでしょうか。&lt;/p&gt;

&lt;h3 id=&#34;mobile-update&#34;&gt;Mobile update&lt;/h3&gt;

&lt;p&gt;モバイル対応についての情報も追加されました。&lt;/p&gt;

&lt;p&gt;リアルタイムDBのFirebaseをAngularJSから使うライブラリとしてAngularFireというものがありますが、&lt;br /&gt;
Angular2用のAngularFire 2のアルファ版が近々公開される予定です。&lt;/p&gt;

&lt;p&gt;また、Angular2を使ったProgressive Web Appのリファレンスとなるアプリケーションを開発中で、&lt;br /&gt;
サーバサイドレンダリングやService Worker、Web Worker、HTTP/2などの要素を盛り込むとのこと。&lt;/p&gt;

&lt;h3 id=&#34;angular-2-release-plan&#34;&gt;Angular 2 release plan&lt;/h3&gt;

&lt;p&gt;最後に、今後のAngular2 Betaのリリースに関する情報です。&lt;br /&gt;
最近はBeta版で落ち着いていた印象ですが、今週、遅くても来週あたりからはAlphaの頃と同じく&lt;br /&gt;
毎週リリースを行う計画です。&lt;br /&gt;
次のリリースから最終版までずっとそのペースで行くつもりらしく、開発陣の気合の入りようが伺えます。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;先週の週次ミーティングがなかった分、盛りだくさんの内容になりました。&lt;/p&gt;

&lt;p&gt;おまけですが、AngularConnect 2016のWebサイトが公開されました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://angularconnect.com/&#34; target=&#34;_blank&#34;&gt;Home page | AngularConnect - The Official European Angular Conference 2016&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今年は9月の26日、27日にロンドンで行われます。&lt;br /&gt;
9月にはもうRC版になっているのか、まだBetaなのか、はたまたもうfinalになっているのかわかりませんが&lt;br /&gt;
去年のような充実したイベントになるのは間違いないでしょう。とても楽しみですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Routerモジュールの刷新が計画中</title>
      <link>https://ng2-info.github.io/2015/12/new-router-config-draft/</link>
      <pubDate>Sun, 27 Dec 2015 18:31:48 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2015/12/new-router-config-draft/</guid>
      <description>

&lt;p&gt;beta.0バージョンがリリースされて比較的安定したAngular2ですが、&lt;br /&gt;
現在水面下でRouterモジュールを刷新する計画が進行中です。&lt;/p&gt;

&lt;h2 id=&#34;現在のrouterモジュール&#34;&gt;現在のRouterモジュール&lt;/h2&gt;

&lt;p&gt;現在のRouterモジュールでルーティング設定するには、ルーティングを行うコンポーネントに対して&lt;code&gt;@RouterConfig&lt;/code&gt;デコレータを用います。&lt;br /&gt;
RouterConfigはルートの設定を表現するRouteDefinitionインタフェースのオブジェクトを受け取ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@RouteConfig([
  {path: &#39;/&#39;, redirectTo:[&#39;Home&#39;] }
  {path: &#39;/home&#39;, component: HomeComponent, name: &#39;Home&#39; }
  {path: &#39;/foo&#39;, component: FooComponent, name: &#39;Foo&#39; }
])
@Component({
  selector: &#39;my-app&#39;,
  template: `
  &amp;lt;a [routerLink]=&amp;quot;[&#39;Home&#39;]&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
  &amp;lt;a [routerLink]=&amp;quot;[&#39;Foo&#39;]&amp;quot;&amp;gt;Foo&amp;lt;/a&amp;gt;
  `
})
class MyApp {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RouteConfigは必ずコンポーネントのクラスに対して設定するため、ルーティングとビューが密結合になってしまいます。&lt;/p&gt;

&lt;p&gt;また、現在のRouterモジュールの設計は&lt;code&gt;redirectTo&lt;/code&gt;や、&lt;br /&gt;
ルーティングを行う際に用いる&lt;code&gt;routerLink&lt;/code&gt;など、配列を用いている部分があります。&lt;br /&gt;
これはデータを付与してルーティングする際に用いられるもので、例えば&lt;code&gt;/team/1/user/2&lt;/code&gt;というようなルーティングを行う場合は次のような表現を使うことができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[routerLink]=&amp;quot;[&#39;/Team&#39;, {teamId: 1}, &#39;User&#39;, {userId: 2}]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これらの文字列を使った表現はもはやDSLになりつつあり、開発者の学習コストが高くなっています。&lt;br /&gt;
そのため、Routerモジュールを再設計する動きが開発チーム内で始まっています。&lt;/p&gt;

&lt;h2 id=&#34;class-based-router-config&#34;&gt;Class-based Router Config&lt;/h2&gt;

&lt;p&gt;先日、GitHubのIssueへの&lt;a href=&#34;https://github.com/angular/angular/issues/6040#issuecomment-166456198&#34; target=&#34;_blank&#34;&gt;コメント&lt;/a&gt;に&lt;br /&gt;
新しいRouterモジュールについてのドキュメントが貼られました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.google.com/document/d/1IKZLXU9Y3zdnedj5M7LfW5HQEDf9zyVjNpk_79Rf3SQ/edit?ts=56611fd1&#34; target=&#34;_blank&#34;&gt;Class-based Router Config: Google Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;※ このドキュメントの内容はまだドラフト段階で不定期に更新されるので、この記事の内容と食い違う部分がある可能性があります。&lt;/p&gt;

&lt;p&gt;新しいRouterConfigはコンポーネントに対するデコレーションではなく、独立したクラスとして定義します。&lt;br /&gt;
&lt;code&gt;@RouterConfig&lt;/code&gt;デコレータをつけたクラスのプロパティとして個別のRouteを定義します。&lt;br /&gt;
&lt;code&gt;@Route&lt;/code&gt;デコレータには紐付けるコンポーネントのクラスを渡し、&lt;br /&gt;
プロパティは返り値としてそのRouteのパス表現を文字列で返す関数を定義します。&lt;br /&gt;
パス中にパラメータを取りたい場合は関数の引数として受け取って文字列に含めます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@RouterConfig()
class UserRoutes {

  @Route({
    component: UsersComponent,
  })
  users = () =&amp;gt; `users`; // returns url path for this route to be prefix to base url


  @Route({
    component: UserComponent,
    canActivate: (somethingInjectable: SomethingInjectable) =&amp;gt; somethingInjectable.areWeGood(),
  })
  user = (userId: number) =&amp;gt; `user/${userId}`;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@RouterConfig&lt;/code&gt;がつけられたクラスはルーティングを行いたいコンポーネント側でDIによってインスタンスを受け取ります。&lt;br /&gt;
インスタンスのメソッドを呼び出すことでパスが生成され、それを&lt;code&gt;[routerLink]&lt;/code&gt;に渡すことができるようになります。&lt;br /&gt;
配列を用いた不自然なDSLではなく他のデータバインディングと同じ&lt;code&gt;.&lt;/code&gt;つなぎのメソッド呼び出しなのでとてもわかりやすくなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Component({
  selector: &#39;my-user&#39;,
  template: `
    &amp;lt;a [routerLink]=&amp;quot;userRoutes.user(3)&amp;quot;&amp;gt;Go to user with Id=3&amp;lt;/a&amp;gt;
    &amp;lt;button (click)=&amp;quot;usersButtonClicked()&amp;quot;&amp;gt;back to all users&amp;lt;/button&amp;gt;
  `
})
class UserComponent {
  constructor(private userRoutes: UserRoutes, private router: Router) {}

  usersButtonClicked() {
    this.router.navigate(this.userRoutes.users());
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この再設計はbetaリリース前に行いたかったようですが間に合わなかったとのことで、おそらくbetaの早い時期に導入されるでしょう。&lt;br /&gt;
現在のRouterとはまるで互換性がないのでマイグレーションなども含めて課題はありますが、&lt;br /&gt;
良くなる方向の破壊的変更はどしどし入れて欲しいものです。まだbetaですからね。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>