<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Componentrouter on Angular2 Info</title>
    <link>https://ng2-info.github.io/tags/componentrouter/</link>
    <description>Recent content in Componentrouter on Angular2 Info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 15 Mar 2016 23:59:19 +0900</lastBuildDate>
    <atom:link href="https://ng2-info.github.io/tags/componentrouter/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>週次ミーティングとBeta.10予告</title>
      <link>https://ng2-info.github.io/2016/03/weekly-meeting-mar-15/</link>
      <pubDate>Tue, 15 Mar 2016 23:59:19 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/03/weekly-meeting-mar-15/</guid>
      <description>

&lt;p&gt;こんばんは、らこです。今週も週次ミーティングの内容をかいつまんで紹介していきます。&lt;/p&gt;

&lt;h2 id=&#34;3-14-週次ミーティング&#34;&gt;3/14 週次ミーティング&lt;/h2&gt;

&lt;h3 id=&#34;batarangleの更新&#34;&gt;Batarangleの更新&lt;/h3&gt;

&lt;p&gt;Angular 2用のBatarangleがBeta.8に対応したようです。というよりもBeta.8で追加されたAPIを元に解析するので、&lt;br /&gt;
Beta.8以前のAngular 2アプリケーションはBatarangleでデバッグできなくなりました。&lt;/p&gt;

&lt;p&gt;新機能としてRouterやDIのInjector周りのビジュアライズができるようになったらしいです。&lt;br /&gt;
今後はComponentやRoute、DIなどをリアルタイムでオンオフ切り替えしながらビューを比較できるようなことを目指すらしいです。期待。&lt;/p&gt;

&lt;h3 id=&#34;angular-2-final進捗報告&#34;&gt;Angular 2 Final進捗報告&lt;/h3&gt;

&lt;p&gt;Angular 2 Finalに向けて大きなカテゴリごとに進捗報告です。&lt;/p&gt;

&lt;h4 id=&#34;code-generation&#34;&gt;Code Generation&lt;/h4&gt;

&lt;p&gt;今まであまり表に出ていなかった計画ですが、Code Generation(コード生成)による爆速化に向けて作業が進められています。&lt;/p&gt;

&lt;p&gt;Code Generationとは、現在bootstrap時に計算しているリフレクションを事前に計算しておき、起動処理時間を短縮する試みです。&lt;br /&gt;
具体的には&lt;code&gt;@Component&lt;/code&gt;や&lt;code&gt;@Directive&lt;/code&gt;などのメタデータの計算結果をコードとして生成します。作業は&lt;a href=&#34;https://github.com/angular/angular/issues/6270&#34; target=&#34;_blank&#34;&gt;このPR&lt;/a&gt;で行われています。&lt;br /&gt;
現在はまだTypeScript/JavaScript版でしか動作せず、Dart版でも使えるようにしている段階ですが、完成すればざっくり5倍は速くなるそうです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/FU7jlvH.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;ng2-material&#34;&gt;ng2-material&lt;/h4&gt;

&lt;p&gt;今週Alpha版のリリースがあるようです。最初はAlpha.0からスタートで、&lt;code&gt;ngButton&lt;/code&gt;、&lt;code&gt;ngCard&lt;/code&gt;など基本的なパーツだけを含んでいます。&lt;br /&gt;
今後のアップデートで要素はもっと増えていく予定です。&lt;/p&gt;

&lt;h4 id=&#34;gesture&#34;&gt;Gesture&lt;/h4&gt;

&lt;p&gt;モバイルのタッチイベントなどに対応するライブラリも開発中で、ng2-materialからも利用される予定です。&lt;/p&gt;

&lt;h4 id=&#34;進捗具合&#34;&gt;進捗具合&lt;/h4&gt;

&lt;p&gt;現在のところ20%程度です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/milestones&#34; target=&#34;_blank&#34;&gt;https://github.com/angular/angular/milestones&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Angular 2 final release progress now at 20%.&lt;br&gt;This can regress if we find critical issues, but GO TEAM GO! :) &lt;a href=&#34;https://t.co/R7EExZOpTE&#34;&gt;pic.twitter.com/R7EExZOpTE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Brad Green (@bradlygreen) &lt;a href=&#34;https://twitter.com/bradlygreen/status/709521449070022657&#34;&gt;2016年3月14日&lt;/a&gt;&lt;/blockquote&gt;&lt;br /&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;angularプロジェクトのnpmガイドライン&#34;&gt;Angularプロジェクトのnpmガイドライン&lt;/h3&gt;

&lt;p&gt;Angularプロジェクトで公開するnpmパッケージについてルールを決めようという話です。&lt;br /&gt;
現在Angular2本体は&lt;code&gt;angular2&lt;/code&gt;として公開されていますが、npmで検索した時にどれが公式のパッケージなのかわからない問題があるということでどうにか解決できないかと模索中です。&lt;br /&gt;
具体的には、先日公開されたng1用のComponentRouterは&lt;code&gt;@angular/router&lt;/code&gt;として公開されており、&lt;code&gt;@angular/&lt;/code&gt;スコープを一律で使うようにするのがいいんじゃないかという意見が強いです。&lt;br /&gt;
ただし特殊なパッケージ名に見えるしnpm依存の何かしらのツールでは対応できないんじゃないかという懸念がありより良い方法がないか検討中です。&lt;/p&gt;

&lt;h3 id=&#34;fluent-conferenceが開催されました&#34;&gt;Fluent Conferenceが開催されました&lt;/h3&gt;

&lt;p&gt;オライリーが主催のFluent Conferenceが開催され、BradがKeynoteでAngular 2についてスピーチしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.oreilly.com/ideas/angular-2-and-the-future-of-html5-apps&#34; target=&#34;_blank&#34;&gt;Angular 2 and the future of HTML5 apps - O&amp;rsquo;Reilly Media&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先程のCode Generationの画像もこの動画からです。Angularイベントではないのに新情報が盛り沢山なのですが、一番衝撃的だったのはAngular Universalの今後です。&lt;br /&gt;
現在Node.js用に開発されているAngular Universalが将来的には.NetやPHP、Javaでも使えるようにするとの話です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/Dp3zMzm.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;p&gt;先日JeffがJavaやPythonもサポートするだろうと言っていたのはあまり真に受けてなかったのですが、Bradが公式にプレゼンした以上これはほぼ確約と言っていいのではないかと思います。&lt;br /&gt;
とはいえ今年中に来る気はしないですが楽しみに待ちましょう。&lt;/p&gt;

&lt;h3 id=&#34;ng1用componentrouterのドキュメントができました&#34;&gt;ng1用ComponentRouterのドキュメントができました&lt;/h3&gt;

&lt;p&gt;Angular 1.5のドキュメントにComponent Routerの使いかたが追加されました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.angularjs.org/guide/component-router&#34; target=&#34;_blank&#34;&gt;AngularJS: Developer Guide: Component Router&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;zonesの標準化&#34;&gt;Zonesの標準化&lt;/h3&gt;

&lt;p&gt;Zonesの仕様をTC39のStage 1に上げようという計画です。現在のZone.jsの全部の機能を仕様化するのはやめて、最小限の機能でまずはv1としてStage 1に移行させる予定です。&lt;br /&gt;
今月28日のTC39のミーティングにむけて作業中のようです。&lt;/p&gt;

&lt;h3 id=&#34;メソッドパラメータのdecoratorについて&#34;&gt;メソッドパラメータのDecoratorについて&lt;/h3&gt;

&lt;p&gt;Babelでメソッドの引数にDecoratorを使えるようにPRを出したらしいです。これが通ればAngular 2のES6版とTS版は型の有無以外の差がなくなります。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ざっくりこんな感じです。Bradの動画はぜひ見て欲しいです。&lt;/p&gt;

&lt;p&gt;今日はさらに今週リリースされるであろうBeta.10の予告も行います。久々に大きな変更がありますので備えておきましょう。&lt;/p&gt;

&lt;h3 id=&#34;view-の廃止-破壊的変更&#34;&gt;&lt;code&gt;@View&lt;/code&gt;の廃止 [破壊的変更]&lt;/h3&gt;

&lt;p&gt;随分前から非推奨になっていた&lt;code&gt;@View&lt;/code&gt;アノテーションがついに削除されました。もし古いコードで依存している場合は&lt;code&gt;@Component&lt;/code&gt;に切り替えましょう&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/f9fb72fb0e9bcbda7aeebbf8321ce5d70d78ecee&#34; target=&#34;_blank&#34;&gt;chore(core): remove @View annotation · angular/angular@f9fb72f&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;shadow-cssにおける-deep-と-のサポート&#34;&gt;Shadow CSSにおける&lt;code&gt;/deep/&lt;/code&gt;と&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;のサポート&lt;/h3&gt;

&lt;p&gt;CSSの&lt;code&gt;/deep/&lt;/code&gt;と&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;が`ViewEncapsulate.Emutatedでもサポートされます&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/pull/7563&#34; target=&#34;_blank&#34;&gt;feat(shadow_css): support &lt;code&gt;/deep/&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; by tbosch · Pull Request #7563 · angular/angular&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ngplural-の追加&#34;&gt;&lt;code&gt;ngPlural&lt;/code&gt;の追加&lt;/h3&gt;

&lt;p&gt;i18n用の新しいディレクティブ&lt;code&gt;ngPlural&lt;/code&gt;と&lt;code&gt;ngPluralCase&lt;/code&gt;が追加されました。&lt;code&gt;ngSwitch&lt;/code&gt;と似たような使い方をします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Component({
  selector: &#39;app&#39;,
  template: `
    &amp;lt;div [ngPlural]=&amp;quot;value&amp;quot;&amp;gt;
      &amp;lt;template ngPluralCase=&amp;quot;=0&amp;quot;&amp;gt;there is nothing&amp;lt;/template&amp;gt;
      &amp;lt;template ngPluralCase=&amp;quot;=1&amp;quot;&amp;gt;there is one&amp;lt;/template&amp;gt;
      &amp;lt;template ngPluralCase=&amp;quot;other&amp;quot;&amp;gt;there is some number&amp;lt;/template&amp;gt;
    &amp;lt;/div&amp;gt;
  `,
  directives: [NgPlural, NgPluralCase]
})
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;というわけで今回はここまで。それではまた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beta.8がリリースされました</title>
      <link>https://ng2-info.github.io/2016/03/beta-8-release/</link>
      <pubDate>Thu, 03 Mar 2016 21:08:12 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/03/beta-8-release/</guid>
      <description>

&lt;p&gt;どうも、らこです。予想通り今週はBeta.8がリリースされましたので、主な変更点をさらっていこうと思います。&lt;/p&gt;

&lt;h2 id=&#34;componentrouter-angular-1用-の破壊的変更&#34;&gt;ComponentRouter(Angular 1用)の破壊的変更&lt;/h2&gt;

&lt;p&gt;Angular 1向けのComponent Routerに破壊的な変更が入りました。DIの文字列が大きく変わっています。&lt;br /&gt;
&lt;code&gt;$route&lt;/code&gt;から&lt;code&gt;$rootRouter&lt;/code&gt;に、&lt;code&gt;router&lt;/code&gt;から&lt;code&gt;$router&lt;/code&gt;になっているので、要注意です。&lt;br /&gt;
また、&lt;code&gt;templateUrl&lt;/code&gt;を持つcomponentにルーティングできなかったバグが修正されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/a1c3be2&#34; target=&#34;_blank&#34;&gt;fix(angular1_router): rename &lt;code&gt;$route&lt;/code&gt; service to &lt;code&gt;$rootRouter&lt;/code&gt; · angular/angular@a1c3be2&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/edad8e3&#34; target=&#34;_blank&#34;&gt;fix(angular1_router): rename &lt;code&gt;router&lt;/code&gt; component binding to &lt;code&gt;$router&lt;/code&gt; · angular/angular@edad8e3&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/d4a4d81&#34; target=&#34;_blank&#34;&gt;fix(angular1_router): support templateUrl components · angular/angular@d4a4d81&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;trackby-のバグ修正&#34;&gt;&lt;code&gt;trackBy&lt;/code&gt;のバグ修正&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ngFor&lt;/code&gt;の&lt;code&gt;trackBy&lt;/code&gt;でインデックスを使った際に配列の操作で容易にChange Detectorが壊れるバグが修正されました&lt;br /&gt;
いろいろ危なっかしい実装だったので心配してましたがようやく安心して&lt;code&gt;trackBy&lt;/code&gt;できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/ab36ea0&#34; target=&#34;_blank&#34;&gt;fix(differ): clean up stale identity change refs · angular/angular@ab36ea0&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみにAngular 1でもAngular 2でも共通する話ですが、&lt;code&gt;ng-repeat&lt;/code&gt;も&lt;code&gt;ngFor&lt;/code&gt;も&lt;code&gt;trackBy&lt;/code&gt;を使うと目に見えてパフォーマンスが上がります。&lt;br /&gt;
配列の変更検知をするためには「どの要素」が変わったのかを効率よく調べないと全要素舐め直すことになるので、&lt;br /&gt;
一意性の調べ方をこちらで提供してあげるとめっちゃ早くなります。前にも貼った気がしますが、&lt;br /&gt;
&lt;a href=&#34;https://github.com/angular/angular/issues/7088&#34; target=&#34;_blank&#34;&gt;Is Angular 2 faster ? · Issue #7088 · angular/angular&lt;/a&gt;&lt;br /&gt;
では最初に「&lt;code&gt;track by&lt;/code&gt;した&lt;code&gt;ng-repeat&lt;/code&gt;」と「素の&lt;code&gt;ngFor&lt;/code&gt;」を比較してAngular 2が本当に速いのか疑問を投げかけていますが、&lt;br /&gt;
&lt;a href=&#34;https://plnkr.co/edit/cjFGtnI704bjSg6F0DEM?p=preview&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ngFor&lt;/code&gt;と&lt;code&gt;trackBy&lt;/code&gt;を併用&lt;/a&gt;すると明らかにAngular 2のほうが速くなっていることがわかりました。&lt;/p&gt;

&lt;p&gt;要素数が多く、変更も多いパフォーマンスのネックになりがちな部分には&lt;code&gt;trackBy&lt;/code&gt;をつけるようにしましょう。&lt;/p&gt;

&lt;h2 id=&#34;querylist-foreach-の実装&#34;&gt;&lt;code&gt;QueryList#forEach()&lt;/code&gt;の実装&lt;/h2&gt;

&lt;p&gt;TypeScript/JavaScript側の&lt;code&gt;QueryList&lt;/code&gt;にはなかった&lt;code&gt;forEach&lt;/code&gt;メソッドが追加されました。ちなみに私が実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/b634a25&#34; target=&#34;_blank&#34;&gt;feat(core): Add &lt;code&gt;QueryList#forEach&lt;/code&gt; · angular/angular@b634a25&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/e7470d5&#34; target=&#34;_blank&#34;&gt;feat(core): Add &lt;code&gt;QueryList.forEach&lt;/code&gt; to public api. · angular/angular@e7470d5&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dart版では&lt;code&gt;QueryList&lt;/code&gt;は&lt;code&gt;IterableMixin&lt;/code&gt;クラスを継承しているのでそのまま&lt;code&gt;forEach&lt;/code&gt;が暗黙のうちに生えていたのですが、&lt;br /&gt;
TS/JSでは単なるクラスなので、APIに差ができてしまっていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/d4a4d81173ff31ab8af0f5928735399d92d73339/modules%2Fangular2%2Fsrc%2Fcore%2Flinker%2Fquery_list.ts&#34; target=&#34;_blank&#34;&gt;angular/query_list.ts at d4a4d81173ff31ab8af0f5928735399d92d73339 · angular/angular&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/d4a4d81173ff31ab8af0f5928735399d92d73339/modules%2Fangular2%2Fsrc%2Fcore%2Flinker%2Fquery_list.dart&#34; target=&#34;_blank&#34;&gt;angular/query_list.dart at d4a4d81173ff31ab8af0f5928735399d92d73339 · angular/angular&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://api.dartlang.org/1.14.2/dart-collection/IterableMixin-class.html&#34; target=&#34;_blank&#34;&gt;IterableMixin class - dart:collection library - Dart API&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;デバッグ用のapiが新しく追加された&#34;&gt;デバッグ用のAPIが新しく追加された&lt;/h2&gt;

&lt;p&gt;デバッグ用のAPIが3つも増えました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.getAllAngularRootElements()&lt;/code&gt; : ページ上で&lt;code&gt;angular.bootstrap()&lt;/code&gt;の対象となっているルートエレメントを取得できる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng.coreTokens.ApplicationRef&lt;/code&gt; : &lt;code&gt;ApplicationRef&lt;/code&gt;の参照が取れる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng.coreTokens.Ngzone&lt;/code&gt; : &lt;code&gt;NgZone&lt;/code&gt;の参照が取れる&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ng.prove&lt;/code&gt;と合わせたこれらデバッグAPIの使い方は近いうちに別に特集しようと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/b5e6319&#34; target=&#34;_blank&#34;&gt;feat(core): add more debug APIs to inspect the application form a bro… · angular/angular@b5e6319&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dart版でジェネリクスを使ったdiの廃止&#34;&gt;Dart版でジェネリクスを使ったDIの廃止&lt;/h2&gt;

&lt;p&gt;Dart版のみで、ジェネリック付きの型がDIできなくなりました。背景にはOffline Template Compiler周りの実装の障害になったことがあるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/c9a3df9&#34; target=&#34;_blank&#34;&gt;feat(di): drop support for injecting types with generics in Dart · angular/angular@c9a3df9&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pattern-バリデータの追加&#34;&gt;&lt;code&gt;pattern&lt;/code&gt;バリデータの追加&lt;/h2&gt;

&lt;p&gt;ビルトインのバリデータに&lt;code&gt;pattern&lt;/code&gt;バリデータが追加されました。&lt;code&gt;input&lt;/code&gt;要素のバリデーションに正規表現でパターンを指定できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input [ngControl]=&amp;quot;fullName&amp;quot; pattern=&amp;quot;[a-zA-Z ]*&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/38cb526&#34; target=&#34;_blank&#34;&gt;feat(forms/validators): pattern validator · angular/angular@38cb526&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;i18n機能のpipeの追加&#34;&gt;i18n機能のPipeの追加&lt;/h2&gt;

&lt;p&gt;i18n用に新しく&lt;code&gt;i18nPlural&lt;/code&gt;と&lt;code&gt;i18nSelect&lt;/code&gt;の2つのPipeが追加されました。&lt;/p&gt;

&lt;h3 id=&#34;i18nplural&#34;&gt;&lt;code&gt;i18nPlural&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;i18nPlural&lt;/code&gt;は数値に関するi18n対応を担います。数値の値によって文字列の単数形、複数形を対応させる際に使えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {{ messages.length | i18nPlural: messageMapping }}
&amp;lt;/div&amp;gt;

class MyApp {
  messages: any[];
  messageMapping: any = {
    &#39;=0&#39;: &#39;No messages.&#39;,
    &#39;=1&#39;: &#39;One message.&#39;,
    &#39;other&#39;: &#39;# messages.&#39;
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;i18nselect&#34;&gt;&lt;code&gt;i18nSelect&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;i18nSelect&lt;/code&gt;は文字列に関するi18n対応を担います。文字列の値によって表現を変える部分に有用です。&lt;br /&gt;
次の例では&lt;code&gt;gender&lt;/code&gt;の値によってテキストの中の&lt;code&gt;her&lt;/code&gt;や&lt;code&gt;him&lt;/code&gt;を切り替えています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {{ gender | i18nSelect: inviteMap }}
&amp;lt;/div&amp;gt;

class MyApp {
  gender: string = &#39;male&#39;;
  inviteMap: any = {
    &#39;male&#39;: &#39;Invite her.&#39;,
    &#39;female&#39;: &#39;Invite him.&#39;,
    &#39;other&#39;: &#39;Invite them.&#39;
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/59629a0&#34; target=&#34;_blank&#34;&gt;feat(i18n): added i18nPlural and i18nSelect pipes · angular/angular@59629a0&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;replace-pipeの追加&#34;&gt;&lt;code&gt;replace&lt;/code&gt; Pipeの追加&lt;/h2&gt;

&lt;p&gt;文字列を置換する&lt;code&gt;replace&lt;/code&gt; Pipeが追加されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ expression | replace:pattern:replacement }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という形式で記述できます。具体的には次のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {{ &#39;abcdef&#39; | replace:abcPattern:&#39;ABC&#39; }}
&amp;lt;/div&amp;gt;

class MyApp {
  abcPattern = /abc/g;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると &lt;code&gt;ABCdef&lt;/code&gt; という風に置換されます。挙動は&lt;code&gt;String.prototype.replace&lt;/code&gt;と互換があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/6ef2121&#34; target=&#34;_blank&#34;&gt;feat(pipes): add ReplacePipe for string manipulation · angular/angular@6ef2121&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;今週は便利なAPIがたくさん増えました。こういうアップデートは久々なので良いリファクタリングの機会かもしれません。&lt;/p&gt;

&lt;p&gt;ちなみにBeta.9のリリースからはいよいよrouterの改革が始まります。&lt;code&gt;routerLink&lt;/code&gt;のDSLが徐々に廃止され、正規表現と関数によってルーティングが記述できるようになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/75343eb34007579be9cdc803da834c38e02ae12c&#34; target=&#34;_blank&#34;&gt;feat(router): add regex matchers · angular/angular@75343eb&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;破壊的変更にはしないらしいのでゆったり構えておきましょう。&lt;/p&gt;

&lt;p&gt;参考資料&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-beta8-2016-03-02&#34; target=&#34;_blank&#34;&gt;angular/CHANGELOG.md at master · angular/angular&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Angular2 Beta.5リリースと今週のニュース</title>
      <link>https://ng2-info.github.io/2016/02/beta-5-has-released/</link>
      <pubDate>Thu, 11 Feb 2016 10:23:58 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/02/beta-5-has-released/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt;:&lt;br /&gt;
Beta.5にも問題があり、すぐにBeta.6がリリースされています。&lt;br /&gt;
Beta.5で問題が発生した場合はアップデートで解決すると思われます。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;こんにちは、らこです。毎週リリースになってからng2-infoも週刊になりつつあります。&lt;br /&gt;
本来なら今週はBeta.4のリリースだったのですが、&lt;br /&gt;
Beta.4にバージョンが上がった直後に変更漏れが見つかったので、即時修正されてBeta.5としてリリースされています。&lt;br /&gt;
機能的にはほとんどBeta.3と変わらないのですが、多くの修正と開発環境の改善が盛り込まれているので&lt;br /&gt;
早めにアップデートしたいバージョンです。&lt;/p&gt;

&lt;p&gt;それでは注目すべき変更点を挙げていきます&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/c7261c295c130b3ec35687bb07b27c553c8f4961/CHANGELOG.md#200-beta5-2016-02-10&#34; target=&#34;_blank&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;angular1-router-allow-component-to-bind-to-router&#34;&gt;angular1_router: allow component to bind to router&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/0f22dce&#34; target=&#34;_blank&#34;&gt;0f22dce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先週から公開されているAngularJS用のComponentRouterがAngular 1.5で導入されたcomponentに対応しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/excellalabs/ngComponentRouter&#34; target=&#34;_blank&#34;&gt;excellalabs/ngComponentRouter: Angular 2 Component Router for Angular 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もはやngRouteを使う理由はないですが、ui-routerからどのタイミングでどう移行すべきかこれから検討が必要です。&lt;/p&gt;

&lt;h3 id=&#34;typings-install-es6-shim-typings-to-a-location-users-can-reference&#34;&gt;typings: install es6-shim typings to a location users can reference.&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/f1f5b45&#34; target=&#34;_blank&#34;&gt;f1f5b45&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今週の破壊的変更です。angular2パッケージが外部に公開する型定義ファイルが大きく変わりました。&lt;br /&gt;
今回の変更ではes6-shimの型定義がangular2の型定義から参照されなくなり、&lt;br /&gt;
TypeScriptの推奨コンパイルターゲットがes6になりました。&lt;/p&gt;

&lt;p&gt;es6向けにコンパイルする場合はTypeScriptのlib.d.tsからPromiseなどのES6型定義が提供されます。&lt;br /&gt;
今までどおりes5向けにコンパイルする場合はユーザーが明示的にes6-shimの型定義を読み込む必要があります。&lt;br /&gt;
その際の型定義ファイルも&lt;code&gt;browser.d.ts&lt;/code&gt;という型定義ファイルがangular2パッケージに同梱されているので、自分でインストールする必要はありません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;///&amp;lt;reference path=&amp;quot;node_modules/angular2/typings/browser.d.ts&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、テスト用の型定義も本体には含まれなくなっているので、testingモジュールを使う際は&lt;br /&gt;
&lt;a href=&#34;http://github.com/typings/typings&#34; target=&#34;_blank&#34;&gt;typings&lt;/a&gt;を使って、jasmineやangular-protractor、selenium-webdriverの型定義を個別にインストールしないといけません。&lt;/p&gt;

&lt;h3 id=&#34;zone-jsの依存バージョンが0-5-14に上がった&#34;&gt;zone.jsの依存バージョンが0.5.14に上がった&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/fc887774da144db3dd2c3ff0adf418b7ca97730f&#34; target=&#34;_blank&#34;&gt;fix(release): need to depend on latest rxjs and zone.js · angular/angular@fc88777&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beta.3で問題となったzone.jsのpostinstall問題が0.5.14で解決しました。&lt;br /&gt;
Beta.5からはzone.jsがtsdを要求することはありません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/zone.js/commit/877af62a6e39e4dd024517d05541b2f9e81d1bbd&#34; target=&#34;_blank&#34;&gt;chore(build): tsd install on prepublish · angular/zone.js@877af62&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;async-handle-synchronous-initial-value-in-async-pipe&#34;&gt;async: handle synchronous initial value in async pipe&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/26e60d6&#34; target=&#34;_blank&#34;&gt;26e60d6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AsyncPipeが初期値を与えられている場合に即反映するように修正されました&lt;/p&gt;

&lt;h3 id=&#34;compiler-use-event-names-for-matching-directives&#34;&gt;compiler: use event names for matching directives&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/231773e&#34; target=&#34;_blank&#34;&gt;231773e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Directive名と同じ名前のOutputを定義したときに、イベントとして直接Directiveのセレクタが使えるようになりました。&lt;/p&gt;

&lt;p&gt;以前までは次のようにDirectiveとイベントハンドラを別に書く必要がありました&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Directive({selector: &#39;[customEvent]&#39;})
class EventDir {
  @Output() customEvent = new EventEmitter();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div customEvent (customEvent)=&amp;quot;doSomething()&amp;quot;&amp;gt;click me&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今後はselectorとOutputが一致する場合はイベントハンドラだけで宣言できるようになります&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div (customEvent)=&amp;quot;doSomething()&amp;quot;&amp;gt;click me&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;upgrade-fix-infinite-rootscope-digest&#34;&gt;upgrade: fix infinite $rootScope.$digest()&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/7e0f02f&#34; target=&#34;_blank&#34;&gt;7e0f02f&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;UpgradeAdapterを使った時の$digestループ処理にバグがあり、無限にループし続けることがあった問題が修正されました。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;今週の週次ミーティングの内容もざっくりと紹介します。&lt;/p&gt;

&lt;h3 id=&#34;payload-reduction-progress&#34;&gt;Payload reduction &amp;ldquo;progress&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;Angular2のペイロードサイズの削減が本格的に始まる模様です。&lt;br /&gt;
Hello Worldアプリが10kBになるまでとことん減らしていくとのこと。&lt;/p&gt;

&lt;h3 id=&#34;popularity-report-brad&#34;&gt;Popularity report (Brad)&lt;/h3&gt;

&lt;p&gt;Angular2の普及度合いについてのレポートです。&lt;br /&gt;
angular.ioは1ヶ月で292000ビューを記録したらしいです。&lt;br /&gt;
ng-confとAngular Connectで大々的にアピールしてユーザー数を増やしたいという計画。&lt;/p&gt;

&lt;h3 id=&#34;php-rendering-update&#34;&gt;PHP rendering update&lt;/h3&gt;

&lt;p&gt;少し驚きですが、Angular UniversalがHTMLだけでなくPHPもレンダリングできるように拡張する予定があるそうです。&lt;br /&gt;
詳細は未定ですが既存のPHPアプリケーションのバックエンドを差し替えられるようなものを計画中とのこと。&lt;/p&gt;

&lt;h3 id=&#34;template-services-plan&#34;&gt;Template services plan&lt;/h3&gt;

&lt;p&gt;これも驚きの計画で、TypeScriptの入力補完候補などを提供しているLanguage Servicesにプラグイン機構を導入し、&lt;br /&gt;
Angular2のテンプレートHTML中で入力補完が可能になるプラグインを提供しようというものです。&lt;br /&gt;
スクリーンキャストではありますが、実際にAtom上で動作している様子が見られます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/TypeScript/issues/6508&#34; target=&#34;_blank&#34;&gt;TypeScript extensibility · Issue #6508 · Microsoft/TypeScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/billti/TypeScript/blob/ngml/src/services/plugin-ngml.ts#L1785&#34; target=&#34;_blank&#34;&gt;TypeScript/plugin-ngml.ts at ngml · billti/TypeScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript開発チームとともに作っているだけあり、やることが大胆です。&lt;br /&gt;
Language Servicesで対応されれば様々なエディタで入力補完ができるようになるので楽しみにしましょう。&lt;/p&gt;

&lt;h3 id=&#34;angular-2-s-http-moving-to-it-s-own-repo&#34;&gt;Angular 2&amp;rsquo;s HTTP moving to it&amp;rsquo;s own repo&lt;/h3&gt;

&lt;p&gt;Angular2のhttpモジュールは今まではangular/angular内で開発されていましたが、Issueを分けたい、将来的に開発場所も分けたいということで&lt;br /&gt;
リポジトリが独立しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/http&#34; target=&#34;_blank&#34;&gt;angular/http: Angular 2.0 HTTP Module&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今はまだangular/angularで開発されたものがコピーされているだけです。&lt;/p&gt;

&lt;h3 id=&#34;electron&#34;&gt;Electron&lt;/h3&gt;

&lt;p&gt;Angular2でのデスクトップアプリ開発を支援するために、angular/electronというプロジェクトが動くようです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;結構情報盛りだくさんの一週間でした。Beta.5は結構アタリのバージョンだと思うので特に心配なくアップデートしてよさそうです。&lt;/p&gt;

&lt;p&gt;それではまた。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>