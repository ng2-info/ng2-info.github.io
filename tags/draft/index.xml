<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Draft on Angular Info</title>
    <link>https://ng2-info.github.io/tags/draft/index.xml</link>
    <description>Recent content in Draft on Angular Info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="https://ng2-info.github.io/tags/draft/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Routerモジュールの刷新が計画中</title>
      <link>https://ng2-info.github.io/2015/12/new-router-config-draft/</link>
      <pubDate>Sun, 27 Dec 2015 18:31:48 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2015/12/new-router-config-draft/</guid>
      <description>&lt;p&gt;beta.0バージョンがリリースされて比較的安定したAngular2ですが、&lt;br /&gt;
現在水面下でRouterモジュールを刷新する計画が進行中です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;現在のrouterモジュール&#34;&gt;現在のRouterモジュール&lt;/h2&gt;

&lt;p&gt;現在のRouterモジュールでルーティング設定するには、ルーティングを行うコンポーネントに対して&lt;code&gt;@RouterConfig&lt;/code&gt;デコレータを用います。&lt;br /&gt;
RouterConfigはルートの設定を表現するRouteDefinitionインタフェースのオブジェクトを受け取ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@RouteConfig([
  {path: &#39;/&#39;, redirectTo:[&#39;Home&#39;] }
  {path: &#39;/home&#39;, component: HomeComponent, name: &#39;Home&#39; }
  {path: &#39;/foo&#39;, component: FooComponent, name: &#39;Foo&#39; }
])
@Component({
  selector: &#39;my-app&#39;,
  template: `
  &amp;lt;a [routerLink]=&amp;quot;[&#39;Home&#39;]&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
  &amp;lt;a [routerLink]=&amp;quot;[&#39;Foo&#39;]&amp;quot;&amp;gt;Foo&amp;lt;/a&amp;gt;
  `
})
class MyApp {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RouteConfigは必ずコンポーネントのクラスに対して設定するため、ルーティングとビューが密結合になってしまいます。&lt;/p&gt;

&lt;p&gt;また、現在のRouterモジュールの設計は&lt;code&gt;redirectTo&lt;/code&gt;や、&lt;br /&gt;
ルーティングを行う際に用いる&lt;code&gt;routerLink&lt;/code&gt;など、配列を用いている部分があります。&lt;br /&gt;
これはデータを付与してルーティングする際に用いられるもので、例えば&lt;code&gt;/team/1/user/2&lt;/code&gt;というようなルーティングを行う場合は次のような表現を使うことができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[routerLink]=&amp;quot;[&#39;/Team&#39;, {teamId: 1}, &#39;User&#39;, {userId: 2}]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これらの文字列を使った表現はもはやDSLになりつつあり、開発者の学習コストが高くなっています。&lt;br /&gt;
そのため、Routerモジュールを再設計する動きが開発チーム内で始まっています。&lt;/p&gt;

&lt;h2 id=&#34;class-based-router-config&#34;&gt;Class-based Router Config&lt;/h2&gt;

&lt;p&gt;先日、GitHubのIssueへの&lt;a href=&#34;https://github.com/angular/angular/issues/6040#issuecomment-166456198&#34; target=&#34;_blank&#34;&gt;コメント&lt;/a&gt;に&lt;br /&gt;
新しいRouterモジュールについてのドキュメントが貼られました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.google.com/document/d/1IKZLXU9Y3zdnedj5M7LfW5HQEDf9zyVjNpk_79Rf3SQ/edit?ts=56611fd1&#34; target=&#34;_blank&#34;&gt;Class-based Router Config: Google Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;※ このドキュメントの内容はまだドラフト段階で不定期に更新されるので、この記事の内容と食い違う部分がある可能性があります。&lt;/p&gt;

&lt;p&gt;新しいRouterConfigはコンポーネントに対するデコレーションではなく、独立したクラスとして定義します。&lt;br /&gt;
&lt;code&gt;@RouterConfig&lt;/code&gt;デコレータをつけたクラスのプロパティとして個別のRouteを定義します。&lt;br /&gt;
&lt;code&gt;@Route&lt;/code&gt;デコレータには紐付けるコンポーネントのクラスを渡し、&lt;br /&gt;
プロパティは返り値としてそのRouteのパス表現を文字列で返す関数を定義します。&lt;br /&gt;
パス中にパラメータを取りたい場合は関数の引数として受け取って文字列に含めます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@RouterConfig()
class UserRoutes {

  @Route({
    component: UsersComponent,
  })
  users = () =&amp;gt; `users`; // returns url path for this route to be prefix to base url


  @Route({
    component: UserComponent,
    canActivate: (somethingInjectable: SomethingInjectable) =&amp;gt; somethingInjectable.areWeGood(),
  })
  user = (userId: number) =&amp;gt; `user/${userId}`;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@RouterConfig&lt;/code&gt;がつけられたクラスはルーティングを行いたいコンポーネント側でDIによってインスタンスを受け取ります。&lt;br /&gt;
インスタンスのメソッドを呼び出すことでパスが生成され、それを&lt;code&gt;[routerLink]&lt;/code&gt;に渡すことができるようになります。&lt;br /&gt;
配列を用いた不自然なDSLではなく他のデータバインディングと同じ&lt;code&gt;.&lt;/code&gt;つなぎのメソッド呼び出しなのでとてもわかりやすくなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Component({
  selector: &#39;my-user&#39;,
  template: `
    &amp;lt;a [routerLink]=&amp;quot;userRoutes.user(3)&amp;quot;&amp;gt;Go to user with Id=3&amp;lt;/a&amp;gt;
    &amp;lt;button (click)=&amp;quot;usersButtonClicked()&amp;quot;&amp;gt;back to all users&amp;lt;/button&amp;gt;
  `
})
class UserComponent {
  constructor(private userRoutes: UserRoutes, private router: Router) {}

  usersButtonClicked() {
    this.router.navigate(this.userRoutes.users());
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この再設計はbetaリリース前に行いたかったようですが間に合わなかったとのことで、おそらくbetaの早い時期に導入されるでしょう。&lt;br /&gt;
現在のRouterとはまるで互換性がないのでマイグレーションなども含めて課題はありますが、&lt;br /&gt;
良くなる方向の破壊的変更はどしどし入れて欲しいものです。まだbetaですからね。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>