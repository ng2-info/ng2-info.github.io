<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beta on Angular Info</title>
    <link>https://ng2-info.github.io/tags/beta/index.xml</link>
    <description>Recent content in Beta on Angular Info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="https://ng2-info.github.io/tags/beta/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Beta.16とBeta.17の変更点</title>
      <link>https://ng2-info.github.io/2016/04/beta-16-and-beta-17/</link>
      <pubDate>Fri, 29 Apr 2016 23:36:29 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/04/beta-16-and-beta-17/</guid>
      <description>&lt;p&gt;どうも、らこです。&lt;br /&gt;
今週はBeta.16とBeta.17の2つのリリースがありまして、特にBeta.16はベータ始まって以来の最大級の変更がリリースされているので、&lt;br /&gt;
みなさんにはぜひとも頑張ってBeta.17へのアップデートを乗り越えて欲しいところです。&lt;br /&gt;
破壊的変更は多いですが、基本的なAPIについては機械的に修正可能なものがほとんどです。&lt;br /&gt;
逆に、Angular 2の深いところまで潜っていた方ほど被害が大きいでしょう。&lt;br /&gt;
それでは重要な変更をピックアップしていきます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;changelog-https-github-com-angular-angular-blob-master-changelog-md&#34;&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md&#34; target=&#34;_blank&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;location-が-angular2-platform-common-に移動しました&#34;&gt;&lt;code&gt;Location&lt;/code&gt; が &lt;code&gt;angular2/platform/common&lt;/code&gt; に移動しました&lt;/h3&gt;

&lt;p&gt;これまで &lt;code&gt;angular2/router&lt;/code&gt; モジュールから提供されていた &lt;code&gt;Location&lt;/code&gt; クラスが、&lt;br /&gt;
新しく生まれた &lt;code&gt;angular2/platform/common&lt;/code&gt; モジュールに移動しました。&lt;br /&gt;
つまり Core側のパッケージに含まれることになり、 &lt;code&gt;angular2/router&lt;/code&gt; に依存せずに使えるようになります。&lt;/p&gt;

&lt;p&gt;また、 &lt;code&gt;Location&lt;/code&gt; に関連する &lt;code&gt;APP_BASE_HREF&lt;/code&gt; や &lt;code&gt;LocationStrategy&lt;/code&gt; などのAPIも移動しています。&lt;br /&gt;
以前は次のようにインポートしていましたが、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {
  PlatformLocation,
  Location,
  LocationStrategy,
  HashLocationStrategy,
  PathLocationStrategy,
  APP_BASE_HREF}
from &#39;angular2/router&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今後は次のようにインポートするようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {
  PlatformLocation,
  Location,
  LocationStrategy,
  HashLocationStrategy,
  PathLocationStrategy,
  APP_BASE_HREF}
from &#39;angular2/platform/common&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;injector-が読み込み専用になり-reflectiveinjector-が追加されました&#34;&gt;&lt;code&gt;Injector&lt;/code&gt; が読み込み専用になり、 &lt;code&gt;ReflectiveInjector&lt;/code&gt; が追加されました&lt;/h3&gt;

&lt;p&gt;Offline Compileの実装に伴い、&lt;code&gt;Injector&lt;/code&gt;に大きな変更が入りました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://angular.io/docs/ts/latest/api/core/Injector-class.html&#34; target=&#34;_blank&#34;&gt;Injector - ts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まず第一に、 &lt;code&gt;Injector&lt;/code&gt; クラスが抽象クラスとなり、 &lt;code&gt;get&lt;/code&gt; メソッドだけを提供するようになりました。&lt;br /&gt;
これまで &lt;code&gt;Injector&lt;/code&gt;が提供していた他のメソッドは、具象クラスである &lt;code&gt;ReflectiveInjector&lt;/code&gt; が実装しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://angular.io/docs/ts/latest/api/core/ReflectiveInjector-class.html&#34; target=&#34;_blank&#34;&gt;ReflectiveInjector - ts&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;var injector = ReflectiveInjector.resolveAndCreate([]);
expect(injector.get(Injector)).toBe(injector);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、&lt;code&gt;getOptional&lt;/code&gt; メソッドが廃止され、 &lt;code&gt;get&lt;/code&gt; メソッドが第2引数としてデフォルト値を取るようになりました。&lt;br /&gt;
デフォルト値を設定しない時にプロバイダが見つからなかった時は今までどおり例外が発生します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;injector.get(optionalDependency, notFoundValue);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;compiler-の廃止と-componentfactory-の導入&#34;&gt;&lt;code&gt;Compiler&lt;/code&gt;の廃止と&lt;code&gt;ComponentFactory&lt;/code&gt;の導入&lt;/h3&gt;

&lt;p&gt;コンポーネントを動的にコンパイルするためのAPIとして、これまでは&lt;code&gt;Compiler&lt;/code&gt;が提供されていましたが、&lt;br /&gt;
これが廃止され、新たに&lt;code&gt;ComponentResolver&lt;/code&gt;と&lt;code&gt;ComponentFactory&lt;/code&gt;という2つのAPIが追加されました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/0c600cf6e31b7f69f5a36f7dea959e4884217a4d&#34; target=&#34;_blank&#34;&gt;refactor(core): introduce ComponentFactory. · angular/angular@0c600cf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ComponentResolver&lt;/code&gt;は基本的に従来の&lt;code&gt;Compiler&lt;/code&gt;とほとんど変わらないAPIを持っています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// beta.15
export abstract class Compiler {
  abstract compileInHost(componentType: Type): Promise&amp;lt;HostViewFactoryRef&amp;gt;;
  abstract clearCache();
}

// beta.17
export abstract class ComponentResolver {
  abstract resolveComponent(componentType: Type): Promise&amp;lt;ComponentFactory&amp;gt;;
  abstract clearCache();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ComponentResolver&lt;/code&gt;はプロバイダを記述しなくてもコンポーネントやディレクティブでインジェクト可能です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ComponentResolver#resolveComponent&lt;/code&gt;が返す&lt;code&gt;ComponentFactory&lt;/code&gt;は&lt;br /&gt;
後述する&lt;code&gt;ViewContainerRef.createComponent&lt;/code&gt;のメソッドの引数として使うことができます。&lt;br /&gt;
また、&lt;code&gt;ComponentFactory.create&lt;/code&gt; メソッドを使えば、ビューへの挿入なしに、&lt;code&gt;ComponentRef&lt;/code&gt;だけを生成できます。&lt;/p&gt;

&lt;h3 id=&#34;viewcontainerref-createhostview-が-createcomponent-に改名されました&#34;&gt;&lt;code&gt;ViewContainerRef.createHostView&lt;/code&gt; が &lt;code&gt;.createComponent&lt;/code&gt;に改名されました&lt;/h3&gt;

&lt;p&gt;よりわかりやすい名前に変わり、戻り値の型も &lt;code&gt;HostViewRef&lt;/code&gt; から &lt;code&gt;ComponentRef&lt;/code&gt; に変わりました。&lt;/p&gt;

&lt;p&gt;さらに、&lt;code&gt;ResolvedProvider&lt;/code&gt;クラスが廃止された影響で、第3引数は&lt;code&gt;Injector&lt;/code&gt;を要求するようになりました。&lt;br /&gt;
もしInjectorを渡したい場合は、専用の新しい子Injectorを作ってあげるのが推奨されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;let childInjector = ReflectiveInjector.resolveAndCreate(…);
vcRef.createComponent(cmpFactory, index, childInjector)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dynamiccomponentloader-loadintolocation-が廃止されました&#34;&gt;&lt;code&gt;DynamicComponentLoader.loadIntoLocation&lt;/code&gt; が廃止されました&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/efbd446d18e6e0380beafcad6e94a7751d788623&#34; target=&#34;_blank&#34;&gt;refactor(core): add &lt;code&gt;Query.read&lt;/code&gt; and remove `DynamicComponentLoader.l… · angular/angular@efbd446&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;指定した要素をコンテナとして動的にコンポーネントをビューに追加するAPIだった &lt;code&gt;DynamicComponentLoader.loadIntoLocation&lt;/code&gt; が廃止されました。&lt;br /&gt;
代わりに、指定した要素の次の位置に追加する &lt;code&gt;DynamicComponentLoader.loadNextToLocation&lt;/code&gt; が引数として&lt;code&gt;ElementRef&lt;/code&gt;ではなく&lt;code&gt;ViewContainerRef&lt;/code&gt;を要求するようになりました。&lt;br /&gt;
つまり、動的にコンポーネントをビューへ追加するには必ず&lt;code&gt;ViewContainerRef&lt;/code&gt;が必要になったということです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ViewContainerRef&lt;/code&gt;はコンポーネントやディレクティブが自身のものをDIで取得することができます。&lt;br /&gt;
また、コンポーネントのテンプレート中から任意の要素の&lt;code&gt;ViewContainerRef&lt;/code&gt;を得るには、&lt;code&gt;@ViewChild&lt;/code&gt;を使います。&lt;br /&gt;
通常、&lt;code&gt;@ViewChild(&amp;quot;loc&amp;quot;)&lt;/code&gt;とすると&lt;code&gt;#loc&lt;/code&gt;が付与された要素の&lt;code&gt;ElementRef&lt;/code&gt;が得られますが、&lt;br /&gt;
第2引数として &lt;code&gt;{read: ViewContainerRef}&lt;/code&gt;とすることでコンテナを取得することができます&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;@Component({
    selector: &#39;my-comp&#39;,
    template: &#39;&amp;lt;div #loc&amp;gt;&amp;lt;/div&amp;gt;&#39;
})
class MyComp {
  ctxBoolProp: boolean;

  @ViewChild(&#39;loc&#39;, {read: ViewContainerRef}) viewContainerRef: ViewContainerRef;

  constructor(private loader: DynamicComponentLoader){}

  loadChildComponent() {
    this.loader.loadNextToLocation(OtherComponent, this.viewContainerRef)
        .then(componentRef =&amp;gt; {
            ...
        });
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;appviewmanager-が廃止されました&#34;&gt;&lt;code&gt;AppViewManager&lt;/code&gt; が廃止されました&lt;/h3&gt;

&lt;p&gt;低レイヤーのビュー管理APIだった &lt;code&gt;AppViewManager&lt;/code&gt;が内部専用のAPIになり、外部には公開されなくなりました。&lt;br /&gt;
&lt;code&gt;AppViewManager&lt;/code&gt;でできることは&lt;code&gt;DynamicComponentLoader&lt;/code&gt;と&lt;code&gt;ViewContainerRef&lt;/code&gt;で同じことができます。&lt;/p&gt;

&lt;h3 id=&#34;componentref-dispose-が-componentref-destroy-に改名されました&#34;&gt;&lt;code&gt;ComponentRef.dispose&lt;/code&gt; が &lt;code&gt;ComponentRef.destroy&lt;/code&gt;に改名されました&lt;/h3&gt;

&lt;p&gt;名前が変わっただけです。ライフサイクルの&lt;code&gt;ngOnDestroy&lt;/code&gt;に合わせてわかりやすくした形です。&lt;/p&gt;

&lt;h3 id=&#34;非同期テストのやりかたが大きく変わりました&#34;&gt;非同期テストのやりかたが大きく変わりました&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;angular2/testing&lt;/code&gt;での非同期テストが大きく変わりました。&lt;/p&gt;

&lt;p&gt;まず最初に、非同期テストを行うために &lt;code&gt;zone.js/dist/async-test&lt;/code&gt;の読み込みが必要になりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &amp;quot;zone.js/dist/async-test&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、APIも変わっています。これまではDIを行いつつ非同期テストを行うには&lt;code&gt;injectAsync&lt;/code&gt;関数を使っていましたが、&lt;br /&gt;
DIを行う&lt;code&gt;inject&lt;/code&gt;関数と、非同期テストを行う&lt;code&gt;async&lt;/code&gt;関数の2つに分離されました&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Before:

it(&#39;should wait for returned promises&#39;, injectAsync([FancyService], (service) =&amp;gt; {
  return service.getAsyncValue().then((value) =&amp;gt; { expect(value).toEqual(&#39;async value&#39;); });
}));
it(&#39;should wait for returned promises&#39;, injectAsync([], () =&amp;gt; {
  return somePromise.then(() =&amp;gt; { expect(true).toEqual(true); });
}));

// After
it(&#39;should wait for returned promises&#39;, async(inject([FancyService], (service) =&amp;gt; {
  service.getAsyncValue().then((value) =&amp;gt; { expect(value).toEqual(&#39;async value&#39;); });
})));
it(&#39;should wait for returned promises&#39;, async(() =&amp;gt; {
  somePromise.then() =&amp;gt; { expect(true).toEqual(true); });
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;async&lt;/code&gt;関数に渡された関数は、そのテスト固有のZoneが生成され、&lt;br /&gt;
そのZoneが非同期処理の完了を監視してくれるので、&lt;code&gt;done&lt;/code&gt;のような明示的なテスト終了処理は不要です。&lt;br /&gt;
Promiseをreturnする必要もなくなりました。&lt;/p&gt;

&lt;p&gt;ちなみに、&lt;code&gt;fakeAsync&lt;/code&gt;も同様です。&lt;br /&gt;
&lt;code&gt;fakeAsync&lt;/code&gt;を使う際には追加で &lt;code&gt;zone.js/dist/fake-async-test&lt;/code&gt;の読み込みが必要になり、&lt;br /&gt;
使い方も&lt;code&gt;fakeAsync(inject([...], (...) =&amp;gt; {...}))&lt;/code&gt;のように変わります。&lt;/p&gt;

&lt;h3 id=&#34;renderer-rendercomponent-が廃止されました&#34;&gt;&lt;code&gt;Renderer.renderComponent&lt;/code&gt;が廃止されました&lt;/h3&gt;

&lt;p&gt;任意のコンポーネントをレンダリングする低レベルAPIだった&lt;code&gt;Renderer.renderComponent&lt;/code&gt;が廃止されました。&lt;br /&gt;
同じAPIは&lt;code&gt;RootRenderer.renderComponent&lt;/code&gt;として提供されています。&lt;/p&gt;

&lt;h3 id=&#34;ビューのクエリの仕様が変わりました&#34;&gt;ビューのクエリの仕様が変わりました&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/2b34c88&#34; target=&#34;_blank&#34;&gt;refactor(view_compiler): codegen DI and Queries · angular/angular@2b34c88&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@ViewQuery&lt;/code&gt;や&lt;code&gt;@ViewChild&lt;/code&gt;、&lt;code&gt;@ContentChild&lt;/code&gt;などのビュークエリは、&lt;code&gt;DynamicComponentLoader&lt;/code&gt;によって動的に読み込まれたコンポーネントには適用されない、という仕様に変わりました。&lt;br /&gt;
例えば、&lt;code&gt;&amp;lt;router-outlet&amp;gt;&lt;/code&gt;によって読み込まれるコンポーネントは、クエリ対象になりません。&lt;br /&gt;
ただし、&lt;code&gt;&amp;lt;router-outlet&amp;gt;&lt;/code&gt;は&lt;code&gt;activate&lt;/code&gt;イベントを発火するので、&lt;br /&gt;
新しく読み込まれたコンポーネントの&lt;code&gt;ComponentRef&lt;/code&gt;を取得することができます。&lt;br /&gt;
動的にコンポーネントを読み込む場合は同じようにイベントを発火してあげるようにしましょう。&lt;/p&gt;

&lt;h3 id=&#34;change-detectionの処理順序が変わりました&#34;&gt;Change Detectionの処理順序が変わりました&lt;/h3&gt;

&lt;p&gt;Change Detectionの処理順序が次のようになります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inputのチェック&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ngOnChanges&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngOnInit&lt;/code&gt; (一度のみ)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngDoCheck&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Contentの更新&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;ContentのChange Detection&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ContentChildren&lt;/code&gt;の更新&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngAfterContentChecked&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Viewの更新&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;ViewのChange Detection&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ViewChildren&lt;/code&gt;/&lt;code&gt;ViewQuery&lt;/code&gt;の更新&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngAfterViewChecked&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;pipeのパラメータの仕様が変更されました&#34;&gt;Pipeのパラメータの仕様が変更されました&lt;/h3&gt;

&lt;p&gt;これまで、Pipeの&lt;code&gt;transform&lt;/code&gt;メソッドには第2引数の型が&lt;code&gt;args: any[]&lt;/code&gt;だったので常に配列が渡されていましたが、&lt;br /&gt;
&lt;code&gt;...args: any[]&lt;/code&gt;に変わり、直接オブジェクトを受け取れるようになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Before
@Pipe({name: &amp;quot;repeat&amp;quot;})
class RepeatPipe implemetes PipeTransform {
    transform(value: any, args: any[]): any {
        let times = &amp;lt;number&amp;gt;args[0]; // 常に配列なので0番目を取得する必要があった
        return value.repeat(times);
    }
}

// After
@Pipe({name: &amp;quot;repeat&amp;quot;})
class RepeatPipe implemetes PipeTransform {
    transform(value: any, times: number): any {
        return value.repeat(times);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;シンタックスの仕様変更と-let-ref-シンタックスの追加&#34;&gt;&lt;code&gt;#...&lt;/code&gt;シンタックスの仕様変更と&lt;code&gt;let-&lt;/code&gt;/&lt;code&gt;ref-&lt;/code&gt;シンタックスの追加&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/d2efac1&#34; target=&#34;_blank&#34;&gt;feat(core): separate refs from vars. · angular/angular@d2efac1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これまで、&lt;code&gt;ngFor&lt;/code&gt;の中で使われる&lt;code&gt;#...&lt;/code&gt;は反復中のオブジェクトを示し、それ以外では付与された要素の参照を示していましたが、&lt;br /&gt;
これは混乱を招いていました。&lt;/p&gt;

&lt;p&gt;そこで、テンプレート内でのローカル変数を作るためのシンタックスとして新しく&lt;code&gt;let-&lt;/code&gt;が追加されました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!--Before--&amp;gt;
&amp;lt;li *ngFor=&amp;quot;#item of items; #i = index&amp;quot;&amp;gt;...&amp;lt;/li&amp;gt;
&amp;lt;template ngFor=&amp;quot;#item of items; #i = index&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;template ngFor #item [ngForOf]=&amp;quot;items&amp;quot; #i=&amp;quot;index&amp;quot;&amp;gt;&amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;&amp;lt;/template&amp;gt;

&amp;lt;!--After--&amp;gt;
&amp;lt;li *ngFor=&amp;quot;let item of items; let i = index&amp;quot;&amp;gt;...&amp;lt;/li&amp;gt;
&amp;lt;template ngFor=&amp;quot;let item of items; let i = index&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;template ngFor let-item [ngForOf]=&amp;quot;items&amp;quot; let-i=&amp;quot;index&amp;quot;&amp;gt;&amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、&lt;code&gt;#...&lt;/code&gt;シンタックスはこれまで&lt;code&gt;var-...&lt;/code&gt;と対応していましたが、今後は&lt;code&gt;ref-...&lt;/code&gt;になります。&lt;br /&gt;
通常の要素に付与すればその要素の参照に、&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;要素に付与すれば&lt;code&gt;TemplateRef&lt;/code&gt;として扱えます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var-&lt;/code&gt;シンタックスは将来的に廃止される非推奨なAPIとなりました。&lt;br /&gt;
&lt;code&gt;let-&lt;/code&gt;か&lt;code&gt;ref-&lt;/code&gt;のどちらかに書き直しましょう。&lt;/p&gt;

&lt;h3 id=&#34;templateref-にコンテキストのジェネリクスが付きました&#34;&gt;&lt;code&gt;TemplateRef&lt;/code&gt;にコンテキストのジェネリクスが付きました&lt;/h3&gt;

&lt;p&gt;先述の&lt;code&gt;let-&lt;/code&gt;と関連して、ローカル変数をオブジェクトとして扱うためのコンテキストが導入されました。&lt;br /&gt;
&lt;code&gt;TemplateRef&lt;/code&gt;は、自身のコンテキストの型をジェネリクスとして宣言する必要があります&lt;/p&gt;

&lt;p&gt;例えば、&lt;code&gt;NgFor&lt;/code&gt;は&lt;code&gt;NgForRow&lt;/code&gt;というコンテキストを持っています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export class NgForRow {
  constructor(public $implicit: any, public index: number, public count: number) {}

  get first(): boolean { return this.index === 0; }

  get last(): boolean { return this.index === this.count - 1; }

  get even(): boolean { return this.index % 2 === 0; }

  get odd(): boolean { return !this.even; }
}

...

export class NgFor implements DoCheck {
  ...

  constructor(private _viewContainer: ViewContainerRef, private _templateRef: TemplateRef&amp;lt;NgForRow&amp;gt;,
              private _iterableDiffers: IterableDiffers, private _cdr: ChangeDetectorRef) {}

  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ViewContainerRef.createEmbeddedView&lt;/code&gt;を使って&lt;code&gt;TemplateRef&lt;/code&gt;からビューを作るときに、第2引数としてコンテキストオブジェクトを渡すことができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class SomeViewportContext {
  constructor(public someTmpl: string) {}
}

@Directive({selector: &#39;[someViewport]&#39;})
@Injectable()
class SomeViewport {
constructor(container: ViewContainerRef, templateRef: TemplateRef&amp;lt;SomeViewportContext&amp;gt;) {
  container.createEmbeddedView(templateRef, new SomeViewportContext(&#39;hello&#39;));
  container.createEmbeddedView(templateRef, new SomeViewportContext(&#39;again&#39;));
  }
}

&amp;lt;template someViewport let-greeting=&amp;quot;someTmpl&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;{{greeting}}&amp;lt;/p&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテキストを使ってローカル変数を設定できるようになったので、&lt;br /&gt;
従来の&lt;code&gt;EmbeddedViewRef.setLocal&lt;/code&gt;は削除されました。&lt;/p&gt;

&lt;h3 id=&#34;ngtemplateoutlet-の追加&#34;&gt;&lt;code&gt;NgTemplateOutlet&lt;/code&gt;の追加&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;TemplateRef&lt;/code&gt;を渡すと内部のViewContainerにセットしてくれる便利なディレクティブが追加されました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;
  &amp;lt;template #tmp&amp;gt;
    &amp;lt;h1&amp;gt;Template!!&amp;lt;/h1&amp;gt;
  &amp;lt;/template&amp;gt;
  &amp;lt;div [ngTemplateOutlet]=&amp;quot;tmp&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単に&lt;code&gt;router-outlet&lt;/code&gt;のようなビューの切り替えが実装できるようになります。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;長い！！！！！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;お疲れ様でした。Beta.16, 17ではOffline Compileのために基盤部分が大きく変わっており、&lt;br /&gt;
深いAPIを使っているほど影響が大きいアップデートです。&lt;br /&gt;
冒頭にも言ったように、このアップデートに対応しておかないと今後の追従が難しいので、&lt;br /&gt;
被害の大きかった人も頑張って対応しましょう。&lt;/p&gt;

&lt;p&gt;Offline Compileの使い方はまだドキュメントがなく、CLIがまだ開発途上らしいのでもうしばらく時間がかかりそうです。&lt;/p&gt;

&lt;p&gt;それでは。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>今週のニュース</title>
      <link>https://ng2-info.github.io/2016/04/weekly-meeting-apr-21/</link>
      <pubDate>Thu, 21 Apr 2016 00:06:01 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/04/weekly-meeting-apr-21/</guid>
      <description>&lt;p&gt;どうも、らこです。&lt;br /&gt;
今週は忙しくてミーティングノートの記事が出せませんでしたが、ざっくりと今週の知っておきたいトピックだけを紹介します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ngtemplateoutlet-ディレクティブが追加されます&#34;&gt;&lt;code&gt;NgTemplateOutlet&lt;/code&gt;ディレクティブが追加されます&lt;/h2&gt;

&lt;p&gt;次回リリースのBeta.16にて、&lt;code&gt;NgTemplateOutlet&lt;/code&gt;ディレクティブが追加されます。&lt;br /&gt;
このディレクティブは、&lt;code&gt;TemplateRef&lt;/code&gt;を渡すことで、別の要素にビューを埋め込むことができます。&lt;br /&gt;
&lt;code&gt;ngIf&lt;/code&gt;や&lt;code&gt;ngFor&lt;/code&gt;のような仕組みを、もっと簡単に活用できるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;@Directive({
  selector: [myDir],
  template: &#39;&amp;lt;template [ngTemplateOutlet]=&amp;quot;currentTplRef&amp;quot;&amp;gt;&amp;lt;/template&amp;gt;&#39;,
  directives: [NgTemplateOutlet]
})
class MyDir {

  currentTplRef: TemplateRef;

  constructor(private currentTplRef: TemplateRef) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div *myDir&amp;gt;
  This is going to be inserted into myDir.
&amp;lt;/div&amp;gt;

&amp;lt;!-- or alternatively --&amp;gt;

&amp;lt;template myDir&amp;gt;
  &amp;lt;div&amp;gt;This is going to be inserted into myDir.&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/pull/8021&#34; target=&#34;_blank&#34;&gt;feat(NgTemplateOutlet): add NgTemplateOutlet directive by pkozlowski-opensource · Pull Request #8021 · angular/angular&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ngswitchwhen-が-ngswitchcase-に変更されます&#34;&gt;&lt;code&gt;NgSwitchWhen&lt;/code&gt;が&lt;code&gt;NgSwitchCase&lt;/code&gt;に変更されます&lt;/h2&gt;

&lt;p&gt;近いうちに、&lt;code&gt;NgSwitchWhen&lt;/code&gt;がリネームされ、&lt;code&gt;NgSwitchCase&lt;/code&gt;になります。&lt;br /&gt;
AngularJS時代の名残でしたが、JavaScriptのswitch-case文と一貫性を持とうというモチベーションでリネームされることになりました。&lt;br /&gt;
当然ながら古い&lt;code&gt;When&lt;/code&gt;のコードは動かなくなる破壊的変更なので、心づもりをしておきましょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/issues/7571&#34; target=&#34;_blank&#34;&gt;Rename &lt;code&gt;ngSwitchWhen&lt;/code&gt; to &lt;code&gt;ngSwitchCase&lt;/code&gt; · Issue #7571 · angular/angular&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;offline-compileがいよいよ本格的に始動します&#34;&gt;Offline Compileがいよいよ本格的に始動します&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;@Component&lt;/code&gt;や&lt;code&gt;@Inject&lt;/code&gt;などを事前にコンパイルしておき、起動後の初期化処理を超高速にしようという狙いのOffline Compileがいよいよmasterに投入されます。&lt;br /&gt;
簡単にいえば実行時のリフレクションを行わないようにすることが可能になり、&lt;br /&gt;
その分実行時に必要なライブラリコードも減ります。&lt;br /&gt;
ツリーシェイキングの余地が広がり、Rob WormaldはRollup.jsを使ったビルドでライブラリ本体が45KBを下回ったと報告しています。&lt;/p&gt;

&lt;p&gt;Offline Compileは数段階のリリースが行われ、第2段はまた先のバージョンで導入されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/150lerb1LmNLuau_a_EznPV1I1UHMTbEl61t4hZ7ZpS0/edit#heading=h.dzhz5dcmfn1g&#34; target=&#34;_blank&#34;&gt;Angular Weekly Meeting - Google ドキュメント&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;また、いくつか面白い記事も投稿されているので紹介します&lt;/p&gt;

&lt;h2 id=&#34;angular-2-react-native-http-angularjs-blogspot-jp-2016-04-angular-2-react-native-html-m-1&#34;&gt;&lt;a href=&#34;http://angularjs.blogspot.jp/2016/04/angular-2-react-native.html?m=1&#34; target=&#34;_blank&#34;&gt;Angular 2 + React Native&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Angular公式ブログのゲストエントリー第1弾です。Angular 2でReact Nativeのアプリケーションを作る話です&lt;/p&gt;

&lt;h2 id=&#34;angular-2-meteor-the-javascript-stack-of-the-future-http-angularjs-blogspot-jp-2016-04-please-welcome-our-friend-uri-html&#34;&gt;&lt;a href=&#34;http://angularjs.blogspot.jp/2016/04/please-welcome-our-friend-uri.html&#34; target=&#34;_blank&#34;&gt;Angular 2 + Meteor: the Javascript stack of the future&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;こちらもAngular公式ブログのゲストエントリーです。Angular 2のMeteorのインテグレーションの話です&lt;/p&gt;

&lt;h2 id=&#34;angular-2-authentication-with-auth0-and-nodejs-toddmotto-https-toddmotto-com-angular-2-authentication&#34;&gt;&lt;a href=&#34;https://toddmotto.com/angular-2-authentication&#34; target=&#34;_blank&#34;&gt;Angular 2 authentication with Auth0 and NodeJS @toddmotto&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;我らがTodd Motto先生によるAuth0を使ってAngular 2のアプリケーションで認証を行う話です&lt;/p&gt;

&lt;h2 id=&#34;angular-2-universal-set-up-a-seo-friendly-website-devcross-net-http-blog-devcross-net-2016-04-17-angular-2-universal-seo-friendly-website&#34;&gt;&lt;a href=&#34;http://blog.devcross.net/2016/04/17/angular-2-universal-seo-friendly-website/&#34; target=&#34;_blank&#34;&gt;Angular 2 Universal: Set up a SEO friendly website - devcross.net&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;SEOに重きをおいたAngular Universalの記事です&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;また、先日開催したng-sake #2の発表資料も紹介します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ng-sake.connpass.com/event/29591/&#34; target=&#34;_blank&#34;&gt;ng-sake #2 - connpass&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;angular-2とmvvm-laco0416&#34;&gt;Angular 2とMVVM (@laco0416)&lt;/h3&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;bc5fe15adeea4ce2bb35606f4694f183&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;私の発表資料です。2時間くらいで殴り書いたので雑ですが、MVVMはAngularで目指すものじゃないというのを言いたかっただけです。&lt;/p&gt;

&lt;h3 id=&#34;angular2-electronでプレゼンテーションツールを作っている-joe-re&#34;&gt;Angular2 + Electronでプレゼンテーションツールを作っている (@joe_re)&lt;/h3&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;fc65518f927d4c33b230e110f7b399f9&#34; data-ratio=&#34;1.41241379310345&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;まさに紹介されているツールでプレゼンしていてかっこよかったです。こういう具体的な活用の発表をもっと聞きたいですね。&lt;/p&gt;

&lt;h3 id=&#34;svg-performance-with-angular-quramy&#34;&gt;SVG Performance with Angular (@Quramy)&lt;/h3&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;ebf71e74bdf7481daf3b16f4545d285c&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;SVGの描画という観点でAngular 1とAngular 2、どのくらいパフォーマンスに違いがあるのかという面白い発表です&lt;/p&gt;

&lt;p&gt;ng-sake 第2回は驚きの低欠席率(25人中3人)で、部屋が少し窮屈で申し訳なかったです。&lt;br /&gt;
来月もやりますのでぜひご参加ください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ng-sake.connpass.com/event/30746/&#34; target=&#34;_blank&#34;&gt;ng-sake #3 - connpass&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;次のBeta.16はBetaに入ってから一番と言っていいくらい大きなリリースなので、備えましょう。&lt;br /&gt;
それでは。&lt;/p&gt;

&lt;p&gt;参考リンク&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://5thingsangular.github.io/2016/04/18/issue-2.html&#34; target=&#34;_blank&#34;&gt;5thingsAngular - Issue #2&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Beta.15のリリースと記事の紹介</title>
      <link>https://ng2-info.github.io/2016/04/beta-15/</link>
      <pubDate>Fri, 15 Apr 2016 12:12:13 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/04/beta-15/</guid>
      <description>&lt;p&gt;どうも、らこです。今週はAngular 2.0.0のBeta.15がリリースされました。まずは主な変更点を紹介します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;beta-15-https-github-com-angular-angular-blob-master-changelog-md-200-beta15-2016-04-13&#34;&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-beta15-2016-04-13&#34; target=&#34;_blank&#34;&gt;Beta.15&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;テンプレートキャッシュの実装&#34;&gt;テンプレートキャッシュの実装&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/a596b88&#34; target=&#34;_blank&#34;&gt;feat(compiler): Add an implementation for XHR that uses a template ca… · angular/angular@a596b88&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;コンポーネントの&lt;code&gt;templateUrl&lt;/code&gt;で指定されたテンプレートを、コンポーネントのロードより先に読み込んでキャッシュしておくための機能が実装されました。&lt;br /&gt;
karmaなどのテスト時にネックとなるファイル読み込みのXHRの発生を抑制し、&lt;code&gt;templateUrl&lt;/code&gt;でテンプレートを読み込むコンポーネントを同期的に処理できます。&lt;br /&gt;
ただし、まだキャッシュをセットする側の機構が貧弱なのでアプリケーションサイドでは使いづらいです。&lt;br /&gt;
アプリケーションランドでのプリキャッシュ機構は将来的に実装するらしいので、それを待ちましょう。&lt;/p&gt;

&lt;p&gt;テンプレートのキャッシュには&lt;code&gt;CACHED_TEMPLATE_PROVIDER&lt;/code&gt;と&lt;code&gt;CachedXHR&lt;/code&gt;、そして&lt;code&gt;window.$templateCache&lt;/code&gt;を使います。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CACHED_TEMPLATE_PROVIDER&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;後述の&lt;code&gt;CachedXHR&lt;/code&gt;をInjectするためのProviderです。 &lt;code&gt;angular2/platform/browser&lt;/code&gt;でexportされています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CachedXHR&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;内部にキャッシュを持ち、実際にはXHRを行わずにすべてをキャッシュから返すクラスです。&lt;/p&gt;

&lt;p&gt;ただしキャッシュをセットすることは&lt;code&gt;CachedXHR&lt;/code&gt;では担っておらず、次の&lt;code&gt;$templateCache&lt;/code&gt;が実際にテンプレートのキャッシュを管理しています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;window.$templateCache&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;windowに生やすグローバル変数です。次のように使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function setTemplateCache(cache): void {
  (&amp;lt;any&amp;gt;window).$templateCache = cache;
}

function createCachedXHR(): CachedXHR {
  setTemplateCache({&#39;test.html&#39;: &#39;&amp;lt;div&amp;gt;Hello&amp;lt;/div&amp;gt;&#39;});
  return new CachedXHR();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テスト中での具体的な使用例は次のコードを読むと参考になるでしょう&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/modules/angular2/test/platform/browser/xhr_cache_spec.ts&#34; target=&#34;_blank&#34;&gt;angular/xhr_cache_spec.ts at master · angular/angular&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ngforのローカル変数に-first-が追加された&#34;&gt;ngForのローカル変数に&lt;code&gt;first&lt;/code&gt;が追加された&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/ccff175&#34; target=&#34;_blank&#34;&gt;feat(ngFor): Support convenience view local in ngFor · angular/angular@ccff175&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ngFor&lt;/code&gt;が提供する変数に、ループの1件目かどうかを表す&lt;code&gt;first&lt;/code&gt;が追加されました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div *ngFor=&amp;quot;#item of items; #isFirst=first&amp;quot;&amp;gt;{{isFirst.toString()}}&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;余り知られていない気がしますが、&lt;code&gt;last&lt;/code&gt;とか&lt;code&gt;index&lt;/code&gt;とか&lt;code&gt;even&lt;/code&gt;とか&lt;code&gt;odd&lt;/code&gt;とか元々あります。&lt;/p&gt;

&lt;h3 id=&#34;オフラインコンパイル&#34;&gt;オフラインコンパイル&lt;/h3&gt;

&lt;p&gt;まだユーザーランドには降りてきていないですが、内部的にはオフラインコンパイルが可能な機構になってきています。&lt;br /&gt;
おそらくangular-cliとcodelyzerが近日中に対応するので、その様子を見て使い方を勉強できそうです。&lt;/p&gt;

&lt;h3 id=&#34;その他&#34;&gt;その他&lt;/h3&gt;

&lt;p&gt;ngUpgrade側で&lt;code&gt;ngOnInit&lt;/code&gt;の連携がうまくいってなかったバグなどいくつかが修正されてます。&lt;br /&gt;
詳しくはチェンジログを参照してください&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;今回はいくつかのサイトや記事も紹介します。&lt;/p&gt;

&lt;h3 id=&#34;5thingsangular&#34;&gt;5thingsAngular&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://5thingsangular.github.io/&#34; target=&#34;_blank&#34;&gt;5thingsAngular - Get weekly updates on 5 things Angular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;thoughtram blogでお馴染みのPascal Prechtが個人で始めたサイトです。&lt;br /&gt;
毎週月曜日(日本時間で火曜日)に、一週間の間に起きたAngular関連のトピックを5つ紹介してくれます。&lt;br /&gt;
RSSやメール購読など可能なので、ぜひチェックしてみてください。&lt;/p&gt;

&lt;h3 id=&#34;5-rookie-mistakes-to-avoid-with-angular-2&#34;&gt;5 Rookie Mistakes to Avoid with Angular 2&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://angularjs.blogspot.jp/2016/04/5-rookie-mistakes-to-avoid-with-angular.html&#34; target=&#34;_blank&#34;&gt;5 Rookie Mistakes to Avoid with Angular 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GooglerのKara EricksonがAngular公式ブログに書いた記事です。&lt;br /&gt;
初心者が陥る5つのミスについて書かれています。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最後に私のイベントの宣伝です。&lt;/p&gt;

&lt;h3 id=&#34;ng-sake-2&#34;&gt;ng-sake #2&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://ng-sake.connpass.com/event/29591/&#34; target=&#34;_blank&#34;&gt;ng-sake #2 - connpass&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;酒好きのためのAngularミートアップ、ng-sakeのチケットがまだ余っています。&lt;br /&gt;
来週の水曜日なのでぜひいらしてください。&lt;/p&gt;

&lt;h3 id=&#34;ng-conf-extended-tokyo&#34;&gt;ng-conf extended Tokyo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://connpass.com/event/29136/&#34; target=&#34;_blank&#34;&gt;ng-conf extended Tokyo - connpass&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ng-confをライブビューイングする会です。全然集まりませんが当日参加でもいいのでゴールデンウィークの予定が無い方はぜひ遊びに来てください&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;土曜日には大阪でAngular 2ハンズオンが開催されます。私もメンターとして参加しますので良いイベントになるよう努力します。&lt;/p&gt;

&lt;p&gt;それでは。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beta.14がリリースされました</title>
      <link>https://ng2-info.github.io/2016/04/beta-14/</link>
      <pubDate>Sat, 09 Apr 2016 00:12:23 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/04/beta-14/</guid>
      <description>&lt;p&gt;どうも、らこです。今週もベータリリースが行われ、Beta.14となりました。今回は殆どがバグ修正ですが、変更点をチェックしましょう。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;upgrade-angular-1のディレクティブ破棄イベントが取得できなかったバグを修正&#34;&gt;upgrade: Angular 1のディレクティブ破棄イベントが取得できなかったバグを修正&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/9be04f8&#34; target=&#34;_blank&#34;&gt;fix(upgrade): leak when angular1 destroys element · angular/angular@9be04f8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;UpgradeAdapterを使ってダウングレードしたコンポーネントが、正しく破棄イベントを拾えていなかったバグが修正されました&lt;/p&gt;

&lt;h3 id=&#34;form-select要素のvalueにオブジェクトをバインディングできるように修正&#34;&gt;form: select要素のvalueにオブジェクトをバインディングできるように修正&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/74e2bd7&#34; target=&#34;_blank&#34;&gt;fix(select): support objects as select values · angular/angular@74e2bd7&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/angular/angular/commit/8db97b0&#34; target=&#34;_blank&#34;&gt;fix(forms): support both value and ng-value · angular/angular@8db97b0&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/angular/angular/commit/3ca6df8&#34; target=&#34;_blank&#34;&gt;fix(select): update name from ng-value to ngValue · angular/angular@3ca6df8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いままではselect要素の中のoption要素はvalue属性に文字列しか渡せませんでしたが、オブジェクトをデータバインディングできるように修正されました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;option [ngValue]=&amp;quot;obj&amp;quot;&amp;gt;{{obj.text}}&amp;lt;/option&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;router-クエリパラメータにスラッシュが含まれている場合に起こる不具合を修正&#34;&gt;router: クエリパラメータにスラッシュが含まれている場合に起こる不具合を修正&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/4902244&#34; target=&#34;_blank&#34;&gt;fix(router): allow forward slashes in query parameters · angular/angular@4902244&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;クエリパラメータ中にスラッシュが存在するのを許容するようになりました。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;この他にもOffline Template Compilationに向けた内部的な機能追加やリファクタリングが進んでいます。ng-confまで1ヶ月を切ったのでこれからどんどんブラッシュアップが進むでしょう。&lt;br /&gt;
routerのリファクタリングも待っているので要チェックです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beta.13リリースとng-conf extendedのお知らせ</title>
      <link>https://ng2-info.github.io/2016/03/beta-13-and-ng-conf-extended/</link>
      <pubDate>Thu, 31 Mar 2016 22:14:33 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/03/beta-13-and-ng-conf-extended/</guid>
      <description>&lt;p&gt;どうも、らこです。今週もAngular 2のアップデートが行われ、Beta.13になりました。主な変更点をかいつまんで紹介します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;beta-13リリース&#34;&gt;Beta.13リリース&lt;/h1&gt;

&lt;h2 id=&#34;デコレータメタデータの静的解決が実装されました&#34;&gt;デコレータメタデータの静的解決が実装されました&lt;/h2&gt;

&lt;p&gt;将来的に実装されるOffline Template Compileのための基礎となる機能が実装されました。&lt;br /&gt;
コンポーネントやディレクティブなどのデコレータで定義している設定(メタデータ)にJavaScriptを実行することなくアクセスできるようにする仕組みです。&lt;br /&gt;
これまではコンポーネントのテンプレートは実行時に文字列が評価されるので静的に解析するのが難しかったですが、&lt;br /&gt;
この仕組みによって予めメタデータの情報だけを抽出できるようになり、ツールによる静的解析に大きく寄与します。&lt;/p&gt;

&lt;p&gt;さっそくcodelyzer(ng2lintから名前が変わりました)で使う計画もあるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/ae876d1&#34; target=&#34;_blank&#34;&gt;feat(build): Persisting decorator metadata · angular/angular@ae876d1&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mgechev/codelyzer/issues/11&#34; target=&#34;_blank&#34;&gt;Use metadata reader · Issue #11 · mgechev/codelyzer&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ngif-などの-系ディレクティブをng-contentで扱いやすくなりました&#34;&gt;&lt;code&gt;*ngIf&lt;/code&gt;などの&lt;code&gt;*-&lt;/code&gt;系ディレクティブをng-contentで扱いやすくなりました&lt;/h2&gt;

&lt;p&gt;これはバグ修正に含めるべきな気もしますが、今まで&lt;code&gt;*-&lt;/code&gt;系のディレクティブが付いた要素はng-contentのselectで選択するときに&lt;code&gt;template&lt;/code&gt;要素としてしかselectできませんでしたが、&lt;br /&gt;
この変更によって直接選択できるようになります。&lt;/p&gt;

&lt;p&gt;次の要素がcontentになっていたとして、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p *ngIf=&amp;quot;condition&amp;quot; foo&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以前はtemplateでしかselectできませんでしたが&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // Use the implicit template for projection
    &amp;lt;ng-content select=&amp;quot;template&amp;quot;&amp;gt;&amp;lt;/ng-content&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これからは直接selectできるようになります&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // Use the actual element for projection
    &amp;lt;ng-content select=&amp;quot;p[foo]&amp;quot;&amp;gt;&amp;lt;/ng-content&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/aa966f5&#34; target=&#34;_blank&#34;&gt;feat(Compiler): Allow overriding the projection selector · angular/angular@aa966f5&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;i18n関連機能の実装が終わりました&#34;&gt;i18n関連機能の実装が終わりました&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-cards=&#34;hidden&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Angular 2 beta 13 is out! The i18n support begins in this release&amp;hellip;&lt;a href=&#34;https://t.co/nsyUVw2Rpr&#34;&gt;https://t.co/nsyUVw2Rpr&lt;/a&gt; &lt;a href=&#34;https://t.co/QZU4ZfyR6s&#34;&gt;pic.twitter.com/QZU4ZfyR6s&lt;/a&gt;&lt;/p&gt;&amp;mdash; Angular (@angularjs) &lt;a href=&#34;https://twitter.com/angularjs/status/715390643732762625&#34;&gt;2016年3月31日&lt;/a&gt;&lt;/blockquote&gt;&lt;br /&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;i18nを実現するためのコンポーネント、ディレクティブ、サービスなどがようやく出揃い、i18n実装完了ということになったようです。&lt;br /&gt;
ただしi18n実装のトラッキングイシューでは全然完了してないので、公式ドキュメントが出るまでは待つほうがよさそうです。&lt;br /&gt;
急ぎで国際化を行いたい場合は、&lt;a href=&#34;https://github.com/ocombe/ng2-translate&#34; target=&#34;_blank&#34;&gt;ocombe/ng2-translate&lt;/a&gt;を使うと良いでしょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/issues/7480&#34; target=&#34;_blank&#34;&gt;Tracking: i18n support · Issue #7480 · angular/angular&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ng-conf-extendedのお知らせ&#34;&gt;ng-conf extendedのお知らせ&lt;/h2&gt;

&lt;p&gt;ソルトレイクシティで5/4から開催されるAngular最大のイベントng-confのライブビューイングイベントを開催します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://connpass.com/event/29136/&#34; target=&#34;_blank&#34;&gt;ng-conf extended Tokyo - connpass&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上のイベントページはすべて英語で書いていますが、ng-confも当然英語のセッションですのでご了承ください。&lt;br /&gt;
日本に住んでいる外国人の方も何人か来てくれそうなので、英語で話ができるいい機会にもなるんじゃないでしょうか。&lt;/p&gt;

&lt;p&gt;ちなみにイベントページにも書いていますが、ソルトレイクシティは日本と時差が15時間あるので、イベントの開始が日本時間の夜中0時で、終了が朝9時です。&lt;br /&gt;
結構ヘビーなので体力に自信のない方は自宅でゆったり見てもらったほうがよいと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Angular 2のフットプリントのサイズを小さくする件について少しずつ動きが出ています。&lt;br /&gt;
まずは現在配布中のmin.jsが軒並み壊れている問題を解決するようです。&lt;br /&gt;
その次に、npmでインストールしたライブラリを含めてアプリケーションをminifyするときに壊れないようにするための手段を用意してくれるようです。&lt;br /&gt;
2,3週間以内に動きがあると思うので楽しみに待ちましょう。&lt;/p&gt;

&lt;p&gt;それでは。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beta.12リリースと最近の動き</title>
      <link>https://ng2-info.github.io/2016/03/beta-12/</link>
      <pubDate>Sat, 26 Mar 2016 08:15:49 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/03/beta-12/</guid>
      <description>&lt;p&gt;こんにちは、らこです。最近ng-japanやミートアップや普段の仕事などで忙しくて更新が滞ってました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;ng-japan&#34;&gt;ng-japan&lt;/h2&gt;

&lt;p&gt;ng-japanお疲れ様でした！現地にいた方もYoutubeで見ていた方も楽しんでもらえたでしょうか？&lt;br /&gt;
私は「&lt;a href=&#34;http://laco0416.github.io/slides/a-way-for-happy-angular-days/#/&#34; target=&#34;_blank&#34;&gt;Angular 2の間違えない始め方&lt;/a&gt;」というセッションでトップバッターを務めさせてもらいまして、Twitterなんかの反応を見る限り好評だったようで嬉しいです。&lt;/p&gt;

&lt;p&gt;全体のまとめは&lt;a href=&#34;http://qiita.com/nyamogera/items/b83833d1e15a55d0bb66&#34; target=&#34;_blank&#34;&gt;ng-japan 2016 セッション資料まとめ - Qiita&lt;/a&gt;が参考になるでしょう。&lt;/p&gt;

&lt;h2 id=&#34;beta-12リリース&#34;&gt;Beta.12リリース&lt;/h2&gt;

&lt;p&gt;Angular 2のBeta.12がリリースされました。予定外のリリースでバグがたくさん残っていたBeta.11の修正がメインですので、&lt;br /&gt;
Beta.11で入った変更も含めて紹介します&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md&#34; target=&#34;_blank&#34;&gt;angular/CHANGELOG.md at master · angular/angular&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;view-アノテーションの廃止&#34;&gt;&lt;code&gt;@View&lt;/code&gt;アノテーションの廃止&lt;/h3&gt;

&lt;p&gt;前にも書きましたがついに廃止されました。今後は&lt;code&gt;@Component&lt;/code&gt;にビューの情報も含めることが必須になります。&lt;/p&gt;

&lt;p&gt;そもそもなぜ&lt;code&gt;@View&lt;/code&gt;と&lt;code&gt;@Component&lt;/code&gt;が共存していたかというと、&lt;br /&gt;
&lt;code&gt;@View&lt;/code&gt;は1つのコンポーネントに複数付けられることが想定されていたからです。&lt;br /&gt;
同じコンポーネントでも状態によってビューのテンプレートを切り替えたい、&lt;br /&gt;
同じロジックでもセレクタによってビューを変えたいなど、動的なビューの切り替えを想定したものでした。&lt;br /&gt;
ただし現状ではそれを実装することはコストが重く、需要もほとんどないので、一旦すべて白紙に戻して仕様から練り直すことになりました。&lt;/p&gt;

&lt;h3 id=&#34;zone-js-0-6-x&#34;&gt;Zone.js 0.6.x&lt;/h3&gt;

&lt;p&gt;すぐにBeta.11が出てしまったのでほとんど気づかれていませんでしたが、Beta.10からZone.jsが0.6系になっています。&lt;br /&gt;
Zone.jsは0.5系までは単なるAngularのサブプロジェクトでしたが、0.6系からはES.next ProposalとなったZones仕様のpolyfillとして存在します。&lt;/p&gt;

&lt;p&gt;Beta.11ではこの新しいZoneへの依存部分にバグがあったので、Beta.12で修正されました。&lt;br /&gt;
Beta.12の修正により、今まで必須だったZone.jsのlong-stack-traceがオプショナルになったので、commonjsでインポートする際は次の1行だけで実行可能になりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;zone.js/dist/zone&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただこれだとZoneをまたいだエラーのスタックトレースが追えなくなるので、特別な事情がなければlong-stack-traceも読み込んでおくほうが良いでしょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;zone.js/dist/zone&amp;quot;;
import &amp;quot;zone.js/dist/long-stack-trace-zone&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zonesの仕様&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/domenic/zones&#34; target=&#34;_blank&#34;&gt;domenic/zones: Zones proposal for JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;peerdependenciesからes6-promiseを削除&#34;&gt;peerDependenciesからes6-promiseを削除&lt;/h3&gt;

&lt;p&gt;peerDependenciesからes6-promiseが削除されました。&lt;br /&gt;
Zone.js 0.6系がPromiseのpolyfillを兼ねるようになったらしいので、ブラウザの対応状況に変化はありません。&lt;/p&gt;

&lt;h2 id=&#34;今後のイベント情報&#34;&gt;今後のイベント情報&lt;/h2&gt;

&lt;p&gt;最近はAngular 2の機運もあって日本でたくさんAngularのイベントが開催されています。&lt;br /&gt;
募集開始直後に埋まってしまうものがほとんどなので、まだ参加できるものを紹介します&lt;/p&gt;

&lt;h3 id=&#34;angularjsハンズオン-初心者向け-in-広島-crunch-lab-https-22525f535689619dc83bdcae89-doorkeeper-jp-events-41718&#34;&gt;&lt;a href=&#34;https://22525f535689619dc83bdcae89.doorkeeper.jp/events/41718&#34; target=&#34;_blank&#34;&gt;AngularJSハンズオン（初心者向け） in 広島 - Crunch-Lab&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;広島で開催されるAngularJSのハンズオンです&lt;/p&gt;

&lt;h3 id=&#34;ng-conf-extended-tokyo-http-connpass-com-event-29136&#34;&gt;&lt;a href=&#34;http://connpass.com/event/29136/&#34; target=&#34;_blank&#34;&gt;ng-conf extended Tokyo&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;私が主催するng-confのライブビューイングイベントです。これは抽選制にするので先着で埋まることはないです。&lt;/p&gt;

&lt;h2 id=&#34;その他&#34;&gt;その他&lt;/h2&gt;

&lt;p&gt;現在はRCに向けた作業がメインでコアチームは多忙なようですが、2,3週間後からはPRの整理を再開できるらしいです。&lt;br /&gt;
送ったパッチがなかなか取り込まれない期間でコントリビューションするにはやきもきしますが、今は待ちましょう。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>週次ミーティングとBeta.10予告</title>
      <link>https://ng2-info.github.io/2016/03/weekly-meeting-mar-15/</link>
      <pubDate>Tue, 15 Mar 2016 23:59:19 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/03/weekly-meeting-mar-15/</guid>
      <description>&lt;p&gt;こんばんは、らこです。今週も週次ミーティングの内容をかいつまんで紹介していきます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-14-週次ミーティング&#34;&gt;3/14 週次ミーティング&lt;/h2&gt;

&lt;h3 id=&#34;batarangleの更新&#34;&gt;Batarangleの更新&lt;/h3&gt;

&lt;p&gt;Angular 2用のBatarangleがBeta.8に対応したようです。というよりもBeta.8で追加されたAPIを元に解析するので、&lt;br /&gt;
Beta.8以前のAngular 2アプリケーションはBatarangleでデバッグできなくなりました。&lt;/p&gt;

&lt;p&gt;新機能としてRouterやDIのInjector周りのビジュアライズができるようになったらしいです。&lt;br /&gt;
今後はComponentやRoute、DIなどをリアルタイムでオンオフ切り替えしながらビューを比較できるようなことを目指すらしいです。期待。&lt;/p&gt;

&lt;h3 id=&#34;angular-2-final進捗報告&#34;&gt;Angular 2 Final進捗報告&lt;/h3&gt;

&lt;p&gt;Angular 2 Finalに向けて大きなカテゴリごとに進捗報告です。&lt;/p&gt;

&lt;h4 id=&#34;code-generation&#34;&gt;Code Generation&lt;/h4&gt;

&lt;p&gt;今まであまり表に出ていなかった計画ですが、Code Generation(コード生成)による爆速化に向けて作業が進められています。&lt;/p&gt;

&lt;p&gt;Code Generationとは、現在bootstrap時に計算しているリフレクションを事前に計算しておき、起動処理時間を短縮する試みです。&lt;br /&gt;
具体的には&lt;code&gt;@Component&lt;/code&gt;や&lt;code&gt;@Directive&lt;/code&gt;などのメタデータの計算結果をコードとして生成します。作業は&lt;a href=&#34;https://github.com/angular/angular/issues/6270&#34; target=&#34;_blank&#34;&gt;このPR&lt;/a&gt;で行われています。&lt;br /&gt;
現在はまだTypeScript/JavaScript版でしか動作せず、Dart版でも使えるようにしている段階ですが、完成すればざっくり5倍は速くなるそうです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/FU7jlvH.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;ng2-material&#34;&gt;ng2-material&lt;/h4&gt;

&lt;p&gt;今週Alpha版のリリースがあるようです。最初はAlpha.0からスタートで、&lt;code&gt;ngButton&lt;/code&gt;、&lt;code&gt;ngCard&lt;/code&gt;など基本的なパーツだけを含んでいます。&lt;br /&gt;
今後のアップデートで要素はもっと増えていく予定です。&lt;/p&gt;

&lt;h4 id=&#34;gesture&#34;&gt;Gesture&lt;/h4&gt;

&lt;p&gt;モバイルのタッチイベントなどに対応するライブラリも開発中で、ng2-materialからも利用される予定です。&lt;/p&gt;

&lt;h4 id=&#34;進捗具合&#34;&gt;進捗具合&lt;/h4&gt;

&lt;p&gt;現在のところ20%程度です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/milestones&#34; target=&#34;_blank&#34;&gt;https://github.com/angular/angular/milestones&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Angular 2 final release progress now at 20%.&lt;br&gt;This can regress if we find critical issues, but GO TEAM GO! :) &lt;a href=&#34;https://t.co/R7EExZOpTE&#34;&gt;pic.twitter.com/R7EExZOpTE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Brad Green (@bradlygreen) &lt;a href=&#34;https://twitter.com/bradlygreen/status/709521449070022657&#34;&gt;2016年3月14日&lt;/a&gt;&lt;/blockquote&gt;&lt;br /&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;angularプロジェクトのnpmガイドライン&#34;&gt;Angularプロジェクトのnpmガイドライン&lt;/h3&gt;

&lt;p&gt;Angularプロジェクトで公開するnpmパッケージについてルールを決めようという話です。&lt;br /&gt;
現在Angular2本体は&lt;code&gt;angular2&lt;/code&gt;として公開されていますが、npmで検索した時にどれが公式のパッケージなのかわからない問題があるということでどうにか解決できないかと模索中です。&lt;br /&gt;
具体的には、先日公開されたng1用のComponentRouterは&lt;code&gt;@angular/router&lt;/code&gt;として公開されており、&lt;code&gt;@angular/&lt;/code&gt;スコープを一律で使うようにするのがいいんじゃないかという意見が強いです。&lt;br /&gt;
ただし特殊なパッケージ名に見えるしnpm依存の何かしらのツールでは対応できないんじゃないかという懸念がありより良い方法がないか検討中です。&lt;/p&gt;

&lt;h3 id=&#34;fluent-conferenceが開催されました&#34;&gt;Fluent Conferenceが開催されました&lt;/h3&gt;

&lt;p&gt;オライリーが主催のFluent Conferenceが開催され、BradがKeynoteでAngular 2についてスピーチしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.oreilly.com/ideas/angular-2-and-the-future-of-html5-apps&#34; target=&#34;_blank&#34;&gt;Angular 2 and the future of HTML5 apps - O&amp;rsquo;Reilly Media&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先程のCode Generationの画像もこの動画からです。Angularイベントではないのに新情報が盛り沢山なのですが、一番衝撃的だったのはAngular Universalの今後です。&lt;br /&gt;
現在Node.js用に開発されているAngular Universalが将来的には.NetやPHP、Javaでも使えるようにするとの話です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/Dp3zMzm.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;p&gt;先日JeffがJavaやPythonもサポートするだろうと言っていたのはあまり真に受けてなかったのですが、Bradが公式にプレゼンした以上これはほぼ確約と言っていいのではないかと思います。&lt;br /&gt;
とはいえ今年中に来る気はしないですが楽しみに待ちましょう。&lt;/p&gt;

&lt;h3 id=&#34;ng1用componentrouterのドキュメントができました&#34;&gt;ng1用ComponentRouterのドキュメントができました&lt;/h3&gt;

&lt;p&gt;Angular 1.5のドキュメントにComponent Routerの使いかたが追加されました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.angularjs.org/guide/component-router&#34; target=&#34;_blank&#34;&gt;AngularJS: Developer Guide: Component Router&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;zonesの標準化&#34;&gt;Zonesの標準化&lt;/h3&gt;

&lt;p&gt;Zonesの仕様をTC39のStage 1に上げようという計画です。現在のZone.jsの全部の機能を仕様化するのはやめて、最小限の機能でまずはv1としてStage 1に移行させる予定です。&lt;br /&gt;
今月28日のTC39のミーティングにむけて作業中のようです。&lt;/p&gt;

&lt;h3 id=&#34;メソッドパラメータのdecoratorについて&#34;&gt;メソッドパラメータのDecoratorについて&lt;/h3&gt;

&lt;p&gt;Babelでメソッドの引数にDecoratorを使えるようにPRを出したらしいです。これが通ればAngular 2のES6版とTS版は型の有無以外の差がなくなります。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ざっくりこんな感じです。Bradの動画はぜひ見て欲しいです。&lt;/p&gt;

&lt;p&gt;今日はさらに今週リリースされるであろうBeta.10の予告も行います。久々に大きな変更がありますので備えておきましょう。&lt;/p&gt;

&lt;h3 id=&#34;view-の廃止-破壊的変更&#34;&gt;&lt;code&gt;@View&lt;/code&gt;の廃止 [破壊的変更]&lt;/h3&gt;

&lt;p&gt;随分前から非推奨になっていた&lt;code&gt;@View&lt;/code&gt;アノテーションがついに削除されました。もし古いコードで依存している場合は&lt;code&gt;@Component&lt;/code&gt;に切り替えましょう&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/f9fb72fb0e9bcbda7aeebbf8321ce5d70d78ecee&#34; target=&#34;_blank&#34;&gt;chore(core): remove @View annotation · angular/angular@f9fb72f&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;shadow-cssにおける-deep-と-のサポート&#34;&gt;Shadow CSSにおける&lt;code&gt;/deep/&lt;/code&gt;と&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;のサポート&lt;/h3&gt;

&lt;p&gt;CSSの&lt;code&gt;/deep/&lt;/code&gt;と&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;が`ViewEncapsulate.Emutatedでもサポートされます&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/pull/7563&#34; target=&#34;_blank&#34;&gt;feat(shadow_css): support &lt;code&gt;/deep/&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; by tbosch · Pull Request #7563 · angular/angular&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ngplural-の追加&#34;&gt;&lt;code&gt;ngPlural&lt;/code&gt;の追加&lt;/h3&gt;

&lt;p&gt;i18n用の新しいディレクティブ&lt;code&gt;ngPlural&lt;/code&gt;と&lt;code&gt;ngPluralCase&lt;/code&gt;が追加されました。&lt;code&gt;ngSwitch&lt;/code&gt;と似たような使い方をします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Component({
  selector: &#39;app&#39;,
  template: `
    &amp;lt;div [ngPlural]=&amp;quot;value&amp;quot;&amp;gt;
      &amp;lt;template ngPluralCase=&amp;quot;=0&amp;quot;&amp;gt;there is nothing&amp;lt;/template&amp;gt;
      &amp;lt;template ngPluralCase=&amp;quot;=1&amp;quot;&amp;gt;there is one&amp;lt;/template&amp;gt;
      &amp;lt;template ngPluralCase=&amp;quot;other&amp;quot;&amp;gt;there is some number&amp;lt;/template&amp;gt;
    &amp;lt;/div&amp;gt;
  `,
  directives: [NgPlural, NgPluralCase]
})
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;というわけで今回はここまで。それではまた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beta.8がリリースされました</title>
      <link>https://ng2-info.github.io/2016/03/beta-8-release/</link>
      <pubDate>Thu, 03 Mar 2016 21:08:12 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/03/beta-8-release/</guid>
      <description>&lt;p&gt;どうも、らこです。予想通り今週はBeta.8がリリースされましたので、主な変更点をさらっていこうと思います。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;componentrouter-angular-1用-の破壊的変更&#34;&gt;ComponentRouter(Angular 1用)の破壊的変更&lt;/h2&gt;

&lt;p&gt;Angular 1向けのComponent Routerに破壊的な変更が入りました。DIの文字列が大きく変わっています。&lt;br /&gt;
&lt;code&gt;$route&lt;/code&gt;から&lt;code&gt;$rootRouter&lt;/code&gt;に、&lt;code&gt;router&lt;/code&gt;から&lt;code&gt;$router&lt;/code&gt;になっているので、要注意です。&lt;br /&gt;
また、&lt;code&gt;templateUrl&lt;/code&gt;を持つcomponentにルーティングできなかったバグが修正されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/a1c3be2&#34; target=&#34;_blank&#34;&gt;fix(angular1_router): rename &lt;code&gt;$route&lt;/code&gt; service to &lt;code&gt;$rootRouter&lt;/code&gt; · angular/angular@a1c3be2&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/edad8e3&#34; target=&#34;_blank&#34;&gt;fix(angular1_router): rename &lt;code&gt;router&lt;/code&gt; component binding to &lt;code&gt;$router&lt;/code&gt; · angular/angular@edad8e3&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/d4a4d81&#34; target=&#34;_blank&#34;&gt;fix(angular1_router): support templateUrl components · angular/angular@d4a4d81&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;trackby-のバグ修正&#34;&gt;&lt;code&gt;trackBy&lt;/code&gt;のバグ修正&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ngFor&lt;/code&gt;の&lt;code&gt;trackBy&lt;/code&gt;でインデックスを使った際に配列の操作で容易にChange Detectorが壊れるバグが修正されました&lt;br /&gt;
いろいろ危なっかしい実装だったので心配してましたがようやく安心して&lt;code&gt;trackBy&lt;/code&gt;できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/ab36ea0&#34; target=&#34;_blank&#34;&gt;fix(differ): clean up stale identity change refs · angular/angular@ab36ea0&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみにAngular 1でもAngular 2でも共通する話ですが、&lt;code&gt;ng-repeat&lt;/code&gt;も&lt;code&gt;ngFor&lt;/code&gt;も&lt;code&gt;trackBy&lt;/code&gt;を使うと目に見えてパフォーマンスが上がります。&lt;br /&gt;
配列の変更検知をするためには「どの要素」が変わったのかを効率よく調べないと全要素舐め直すことになるので、&lt;br /&gt;
一意性の調べ方をこちらで提供してあげるとめっちゃ早くなります。前にも貼った気がしますが、&lt;br /&gt;
&lt;a href=&#34;https://github.com/angular/angular/issues/7088&#34; target=&#34;_blank&#34;&gt;Is Angular 2 faster ? · Issue #7088 · angular/angular&lt;/a&gt;&lt;br /&gt;
では最初に「&lt;code&gt;track by&lt;/code&gt;した&lt;code&gt;ng-repeat&lt;/code&gt;」と「素の&lt;code&gt;ngFor&lt;/code&gt;」を比較してAngular 2が本当に速いのか疑問を投げかけていますが、&lt;br /&gt;
&lt;a href=&#34;https://plnkr.co/edit/cjFGtnI704bjSg6F0DEM?p=preview&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ngFor&lt;/code&gt;と&lt;code&gt;trackBy&lt;/code&gt;を併用&lt;/a&gt;すると明らかにAngular 2のほうが速くなっていることがわかりました。&lt;/p&gt;

&lt;p&gt;要素数が多く、変更も多いパフォーマンスのネックになりがちな部分には&lt;code&gt;trackBy&lt;/code&gt;をつけるようにしましょう。&lt;/p&gt;

&lt;h2 id=&#34;querylist-foreach-の実装&#34;&gt;&lt;code&gt;QueryList#forEach()&lt;/code&gt;の実装&lt;/h2&gt;

&lt;p&gt;TypeScript/JavaScript側の&lt;code&gt;QueryList&lt;/code&gt;にはなかった&lt;code&gt;forEach&lt;/code&gt;メソッドが追加されました。ちなみに私が実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/b634a25&#34; target=&#34;_blank&#34;&gt;feat(core): Add &lt;code&gt;QueryList#forEach&lt;/code&gt; · angular/angular@b634a25&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/e7470d5&#34; target=&#34;_blank&#34;&gt;feat(core): Add &lt;code&gt;QueryList.forEach&lt;/code&gt; to public api. · angular/angular@e7470d5&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dart版では&lt;code&gt;QueryList&lt;/code&gt;は&lt;code&gt;IterableMixin&lt;/code&gt;クラスを継承しているのでそのまま&lt;code&gt;forEach&lt;/code&gt;が暗黙のうちに生えていたのですが、&lt;br /&gt;
TS/JSでは単なるクラスなので、APIに差ができてしまっていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/d4a4d81173ff31ab8af0f5928735399d92d73339/modules%2Fangular2%2Fsrc%2Fcore%2Flinker%2Fquery_list.ts&#34; target=&#34;_blank&#34;&gt;angular/query_list.ts at d4a4d81173ff31ab8af0f5928735399d92d73339 · angular/angular&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/d4a4d81173ff31ab8af0f5928735399d92d73339/modules%2Fangular2%2Fsrc%2Fcore%2Flinker%2Fquery_list.dart&#34; target=&#34;_blank&#34;&gt;angular/query_list.dart at d4a4d81173ff31ab8af0f5928735399d92d73339 · angular/angular&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://api.dartlang.org/1.14.2/dart-collection/IterableMixin-class.html&#34; target=&#34;_blank&#34;&gt;IterableMixin class - dart:collection library - Dart API&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;デバッグ用のapiが新しく追加された&#34;&gt;デバッグ用のAPIが新しく追加された&lt;/h2&gt;

&lt;p&gt;デバッグ用のAPIが3つも増えました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.getAllAngularRootElements()&lt;/code&gt; : ページ上で&lt;code&gt;angular.bootstrap()&lt;/code&gt;の対象となっているルートエレメントを取得できる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng.coreTokens.ApplicationRef&lt;/code&gt; : &lt;code&gt;ApplicationRef&lt;/code&gt;の参照が取れる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng.coreTokens.Ngzone&lt;/code&gt; : &lt;code&gt;NgZone&lt;/code&gt;の参照が取れる&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ng.prove&lt;/code&gt;と合わせたこれらデバッグAPIの使い方は近いうちに別に特集しようと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/b5e6319&#34; target=&#34;_blank&#34;&gt;feat(core): add more debug APIs to inspect the application form a bro… · angular/angular@b5e6319&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dart版でジェネリクスを使ったdiの廃止&#34;&gt;Dart版でジェネリクスを使ったDIの廃止&lt;/h2&gt;

&lt;p&gt;Dart版のみで、ジェネリック付きの型がDIできなくなりました。背景にはOffline Template Compiler周りの実装の障害になったことがあるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/c9a3df9&#34; target=&#34;_blank&#34;&gt;feat(di): drop support for injecting types with generics in Dart · angular/angular@c9a3df9&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pattern-バリデータの追加&#34;&gt;&lt;code&gt;pattern&lt;/code&gt;バリデータの追加&lt;/h2&gt;

&lt;p&gt;ビルトインのバリデータに&lt;code&gt;pattern&lt;/code&gt;バリデータが追加されました。&lt;code&gt;input&lt;/code&gt;要素のバリデーションに正規表現でパターンを指定できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input [ngControl]=&amp;quot;fullName&amp;quot; pattern=&amp;quot;[a-zA-Z ]*&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/38cb526&#34; target=&#34;_blank&#34;&gt;feat(forms/validators): pattern validator · angular/angular@38cb526&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;i18n機能のpipeの追加&#34;&gt;i18n機能のPipeの追加&lt;/h2&gt;

&lt;p&gt;i18n用に新しく&lt;code&gt;i18nPlural&lt;/code&gt;と&lt;code&gt;i18nSelect&lt;/code&gt;の2つのPipeが追加されました。&lt;/p&gt;

&lt;h3 id=&#34;i18nplural&#34;&gt;&lt;code&gt;i18nPlural&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;i18nPlural&lt;/code&gt;は数値に関するi18n対応を担います。数値の値によって文字列の単数形、複数形を対応させる際に使えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {{ messages.length | i18nPlural: messageMapping }}
&amp;lt;/div&amp;gt;

class MyApp {
  messages: any[];
  messageMapping: any = {
    &#39;=0&#39;: &#39;No messages.&#39;,
    &#39;=1&#39;: &#39;One message.&#39;,
    &#39;other&#39;: &#39;# messages.&#39;
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;i18nselect&#34;&gt;&lt;code&gt;i18nSelect&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;i18nSelect&lt;/code&gt;は文字列に関するi18n対応を担います。文字列の値によって表現を変える部分に有用です。&lt;br /&gt;
次の例では&lt;code&gt;gender&lt;/code&gt;の値によってテキストの中の&lt;code&gt;her&lt;/code&gt;や&lt;code&gt;him&lt;/code&gt;を切り替えています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {{ gender | i18nSelect: inviteMap }}
&amp;lt;/div&amp;gt;

class MyApp {
  gender: string = &#39;male&#39;;
  inviteMap: any = {
    &#39;male&#39;: &#39;Invite her.&#39;,
    &#39;female&#39;: &#39;Invite him.&#39;,
    &#39;other&#39;: &#39;Invite them.&#39;
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/59629a0&#34; target=&#34;_blank&#34;&gt;feat(i18n): added i18nPlural and i18nSelect pipes · angular/angular@59629a0&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;replace-pipeの追加&#34;&gt;&lt;code&gt;replace&lt;/code&gt; Pipeの追加&lt;/h2&gt;

&lt;p&gt;文字列を置換する&lt;code&gt;replace&lt;/code&gt; Pipeが追加されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ expression | replace:pattern:replacement }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という形式で記述できます。具体的には次のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {{ &#39;abcdef&#39; | replace:abcPattern:&#39;ABC&#39; }}
&amp;lt;/div&amp;gt;

class MyApp {
  abcPattern = /abc/g;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると &lt;code&gt;ABCdef&lt;/code&gt; という風に置換されます。挙動は&lt;code&gt;String.prototype.replace&lt;/code&gt;と互換があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/6ef2121&#34; target=&#34;_blank&#34;&gt;feat(pipes): add ReplacePipe for string manipulation · angular/angular@6ef2121&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;今週は便利なAPIがたくさん増えました。こういうアップデートは久々なので良いリファクタリングの機会かもしれません。&lt;/p&gt;

&lt;p&gt;ちなみにBeta.9のリリースからはいよいよrouterの改革が始まります。&lt;code&gt;routerLink&lt;/code&gt;のDSLが徐々に廃止され、正規表現と関数によってルーティングが記述できるようになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/75343eb34007579be9cdc803da834c38e02ae12c&#34; target=&#34;_blank&#34;&gt;feat(router): add regex matchers · angular/angular@75343eb&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;破壊的変更にはしないらしいのでゆったり構えておきましょう。&lt;/p&gt;

&lt;p&gt;参考資料&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-beta8-2016-03-02&#34; target=&#34;_blank&#34;&gt;angular/CHANGELOG.md at master · angular/angular&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Angular2 Beta.7リリースとng-nl情報</title>
      <link>https://ng2-info.github.io/2016/02/beta-7-has-released/</link>
      <pubDate>Sat, 20 Feb 2016 00:13:27 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/02/beta-7-has-released/</guid>
      <description>&lt;p&gt;こんにちは、らこです。&lt;br /&gt;
今週は週次ミーティングもなく、木曜日にリリースがなかったので次は来週かなと表いましたが、1日遅れでBeta.7にアップデートされました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;とはいえ今回のリリースはバグ修正のみで、そのバグも小さなものなので、変更点の解説は行いません。&lt;br /&gt;
CHANGELOGのリンクだけを貼っておくので、気になる方はチェックしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-beta7-2016-02-18&#34; target=&#34;_blank&#34;&gt;2.0.0-beta.7 (2016-02-18)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただ、CHANGELOGには載っていないのですがBeta.7でpeerDependenciesが更新されています。&lt;br /&gt;
RxJSは5.0.0-Beta.2に、Zone.jsは0.5.15に上がっています。&lt;br /&gt;
特にRxJSの方は破壊的変更があるので、忘れないようにアップデートしましょう。&lt;br /&gt;
&lt;code&gt;fromPromise&lt;/code&gt;から&lt;code&gt;PromiseObservable&lt;/code&gt;への改名がされているだけなので、忘れていてもビルドが通らなくて気付くはずです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/46d9c87ddc7071e8bc6c21032171610e6b5f6e5a&#34; target=&#34;_blank&#34;&gt;build(package): bump rxjs to 5.0.0-beta.2 · angular/angular@46d9c87&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;リリースノートの話が特になかったので、今回は &lt;strong&gt;ng-nl&lt;/strong&gt; について紹介します。&lt;br /&gt;
昨日、オランダでng-nlというAngularのコミュニティイベントが開催されました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ng-nl.org/&#34; target=&#34;_blank&#34;&gt;NG-NL 2016&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;公式サイト上ではまだセッションやスライドは公開されていないのですが、何人かの登壇者がTwitter上で共有しているので見ることができます。&lt;/p&gt;

&lt;h3 id=&#34;angular-2-change-detection-explained-http-pascalprecht-github-io-slides-angular-2-change-detection-explained&#34;&gt;&lt;a href=&#34;http://pascalprecht.github.io/slides/angular-2-change-detection-explained/#/&#34; target=&#34;_blank&#34;&gt;Angular 2 Change Detection Explained&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Pascal Precht氏によるChange Detectionの解説です。&lt;br /&gt;
Angular2を学習する上で必読といえるレベルのスライドです。ぜひ読んでみてください。&lt;/p&gt;

&lt;h3 id=&#34;angular-2-and-the-single-immutable-state-tree-speaker-deck-https-speakerdeck-com-cironunes-angular-2-and-the-single-immutable-state-tree&#34;&gt;&lt;a href=&#34;https://speakerdeck.com/cironunes/angular-2-and-the-single-immutable-state-tree&#34; target=&#34;_blank&#34;&gt;Angular 2 and the Single Immutable State Tree // Speaker Deck&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Ciro Nunes氏によるImmutableの利点についてのセッションです。&lt;br /&gt;
Angular2におけるMutableなモデルの欠点と、Immutableなモデルを使うことによる利点が説明されており、&lt;br /&gt;
PascalPrechtのCD解説の後に読むとよりわかりやすいと思います。&lt;/p&gt;

&lt;h3 id=&#34;introduction-to-rxjs-5-by-gerard-sans-http-slides-com-gerardsans-ng-nl-rxjs5&#34;&gt;&lt;a href=&#34;http://slides.com/gerardsans/ng-nl-rxjs5#/&#34; target=&#34;_blank&#34;&gt;Introduction to RxJS 5 by Gerard Sans&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Gerard Sans氏によるRxJSの解説です。&lt;br /&gt;
非同期処理の歴史やRxJS/Observableの思想から、Angular2がRxJSを使っていることによる利点を細かく解説しています。&lt;/p&gt;

&lt;p&gt;このスライドと一緒に、去年のAngular ConnectのRxJSセッションも読んでおくと良いでしょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/benlesh1/rxjs-indepth-angularconnect-2015&#34; target=&#34;_blank&#34;&gt;RxJS In-Depth - AngularConnect 2015&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;angular-2-and-relay-speaker-deck-https-speakerdeck-com-sfroestl-angular-2-and-realy&#34;&gt;&lt;a href=&#34;https://speakerdeck.com/sfroestl/angular-2-and-realy&#34; target=&#34;_blank&#34;&gt;Angular 2 and Relay // Speaker Deck&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Sebastian Fröstl氏によるAngular2とRelay/GraphQLの組み合わせに関するセッションです。&lt;br /&gt;
RelayとGraphQLによるクライアント・サーバー間のコミュニケーションの記述と、&lt;br /&gt;
それをAngular2と併用可能であることが紹介されています。&lt;/p&gt;

&lt;h3 id=&#34;how-to-write-an-angular-2-library-by-olivier-combe-http-slides-com-ocombe-ngnl2016&#34;&gt;&lt;a href=&#34;http://slides.com/ocombe/ngnl2016#/&#34; target=&#34;_blank&#34;&gt;How to write an Angular 2 library by Olivier Combe&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Olivier Combe氏によるAngular2のライブラリを書く方法のセッションです。&lt;br /&gt;
残念ながらスライドはあまり詳しくは書かれておらず、セッションの録画が欲しくなります。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;他にも多くのセッションがあったはずなので、見つかり次第紹介していきます。&lt;/p&gt;

&lt;p&gt;ところで、来週の2/24に東京で開催されるAngular2勉強会で、Angular2とライブラリの話で登壇する予定です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://lig.connpass.com/event/26115/&#34; target=&#34;_blank&#34;&gt;第1回Angular2勉強会 #ng2Curry - connpass&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;すでにconnpassの参加枠は埋まっているので今から参加はできませんが、参加予定の方はお楽しみに。&lt;/p&gt;

&lt;p&gt;それではまた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Angular2 Beta.5リリースと今週のニュース</title>
      <link>https://ng2-info.github.io/2016/02/beta-5-has-released/</link>
      <pubDate>Thu, 11 Feb 2016 10:23:58 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/02/beta-5-has-released/</guid>
      <description>&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt;:&lt;br /&gt;
Beta.5にも問題があり、すぐにBeta.6がリリースされています。&lt;br /&gt;
Beta.5で問題が発生した場合はアップデートで解決すると思われます。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;こんにちは、らこです。毎週リリースになってからng2-infoも週刊になりつつあります。&lt;br /&gt;
本来なら今週はBeta.4のリリースだったのですが、&lt;br /&gt;
Beta.4にバージョンが上がった直後に変更漏れが見つかったので、即時修正されてBeta.5としてリリースされています。&lt;br /&gt;
機能的にはほとんどBeta.3と変わらないのですが、多くの修正と開発環境の改善が盛り込まれているので&lt;br /&gt;
早めにアップデートしたいバージョンです。&lt;/p&gt;

&lt;p&gt;それでは注目すべき変更点を挙げていきます&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/c7261c295c130b3ec35687bb07b27c553c8f4961/CHANGELOG.md#200-beta5-2016-02-10&#34; target=&#34;_blank&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;angular1-router-allow-component-to-bind-to-router&#34;&gt;angular1_router: allow component to bind to router&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/0f22dce&#34; target=&#34;_blank&#34;&gt;0f22dce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先週から公開されているAngularJS用のComponentRouterがAngular 1.5で導入されたcomponentに対応しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/excellalabs/ngComponentRouter&#34; target=&#34;_blank&#34;&gt;excellalabs/ngComponentRouter: Angular 2 Component Router for Angular 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もはやngRouteを使う理由はないですが、ui-routerからどのタイミングでどう移行すべきかこれから検討が必要です。&lt;/p&gt;

&lt;h3 id=&#34;typings-install-es6-shim-typings-to-a-location-users-can-reference&#34;&gt;typings: install es6-shim typings to a location users can reference.&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/f1f5b45&#34; target=&#34;_blank&#34;&gt;f1f5b45&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今週の破壊的変更です。angular2パッケージが外部に公開する型定義ファイルが大きく変わりました。&lt;br /&gt;
今回の変更ではes6-shimの型定義がangular2の型定義から参照されなくなり、&lt;br /&gt;
TypeScriptの推奨コンパイルターゲットがes6になりました。&lt;/p&gt;

&lt;p&gt;es6向けにコンパイルする場合はTypeScriptのlib.d.tsからPromiseなどのES6型定義が提供されます。&lt;br /&gt;
今までどおりes5向けにコンパイルする場合はユーザーが明示的にes6-shimの型定義を読み込む必要があります。&lt;br /&gt;
その際の型定義ファイルも&lt;code&gt;browser.d.ts&lt;/code&gt;という型定義ファイルがangular2パッケージに同梱されているので、自分でインストールする必要はありません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;///&amp;lt;reference path=&amp;quot;node_modules/angular2/typings/browser.d.ts&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、テスト用の型定義も本体には含まれなくなっているので、testingモジュールを使う際は&lt;br /&gt;
&lt;a href=&#34;http://github.com/typings/typings&#34; target=&#34;_blank&#34;&gt;typings&lt;/a&gt;を使って、jasmineやangular-protractor、selenium-webdriverの型定義を個別にインストールしないといけません。&lt;/p&gt;

&lt;h3 id=&#34;zone-jsの依存バージョンが0-5-14に上がった&#34;&gt;zone.jsの依存バージョンが0.5.14に上がった&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/fc887774da144db3dd2c3ff0adf418b7ca97730f&#34; target=&#34;_blank&#34;&gt;fix(release): need to depend on latest rxjs and zone.js · angular/angular@fc88777&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beta.3で問題となったzone.jsのpostinstall問題が0.5.14で解決しました。&lt;br /&gt;
Beta.5からはzone.jsがtsdを要求することはありません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/zone.js/commit/877af62a6e39e4dd024517d05541b2f9e81d1bbd&#34; target=&#34;_blank&#34;&gt;chore(build): tsd install on prepublish · angular/zone.js@877af62&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;async-handle-synchronous-initial-value-in-async-pipe&#34;&gt;async: handle synchronous initial value in async pipe&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/26e60d6&#34; target=&#34;_blank&#34;&gt;26e60d6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AsyncPipeが初期値を与えられている場合に即反映するように修正されました&lt;/p&gt;

&lt;h3 id=&#34;compiler-use-event-names-for-matching-directives&#34;&gt;compiler: use event names for matching directives&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/231773e&#34; target=&#34;_blank&#34;&gt;231773e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Directive名と同じ名前のOutputを定義したときに、イベントとして直接Directiveのセレクタが使えるようになりました。&lt;/p&gt;

&lt;p&gt;以前までは次のようにDirectiveとイベントハンドラを別に書く必要がありました&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Directive({selector: &#39;[customEvent]&#39;})
class EventDir {
  @Output() customEvent = new EventEmitter();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div customEvent (customEvent)=&amp;quot;doSomething()&amp;quot;&amp;gt;click me&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今後はselectorとOutputが一致する場合はイベントハンドラだけで宣言できるようになります&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div (customEvent)=&amp;quot;doSomething()&amp;quot;&amp;gt;click me&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;upgrade-fix-infinite-rootscope-digest&#34;&gt;upgrade: fix infinite $rootScope.$digest()&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/7e0f02f&#34; target=&#34;_blank&#34;&gt;7e0f02f&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;UpgradeAdapterを使った時の$digestループ処理にバグがあり、無限にループし続けることがあった問題が修正されました。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;今週の週次ミーティングの内容もざっくりと紹介します。&lt;/p&gt;

&lt;h3 id=&#34;payload-reduction-progress&#34;&gt;Payload reduction &amp;ldquo;progress&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;Angular2のペイロードサイズの削減が本格的に始まる模様です。&lt;br /&gt;
Hello Worldアプリが10kBになるまでとことん減らしていくとのこと。&lt;/p&gt;

&lt;h3 id=&#34;popularity-report-brad&#34;&gt;Popularity report (Brad)&lt;/h3&gt;

&lt;p&gt;Angular2の普及度合いについてのレポートです。&lt;br /&gt;
angular.ioは1ヶ月で292000ビューを記録したらしいです。&lt;br /&gt;
ng-confとAngular Connectで大々的にアピールしてユーザー数を増やしたいという計画。&lt;/p&gt;

&lt;h3 id=&#34;php-rendering-update&#34;&gt;PHP rendering update&lt;/h3&gt;

&lt;p&gt;少し驚きですが、Angular UniversalがHTMLだけでなくPHPもレンダリングできるように拡張する予定があるそうです。&lt;br /&gt;
詳細は未定ですが既存のPHPアプリケーションのバックエンドを差し替えられるようなものを計画中とのこと。&lt;/p&gt;

&lt;h3 id=&#34;template-services-plan&#34;&gt;Template services plan&lt;/h3&gt;

&lt;p&gt;これも驚きの計画で、TypeScriptの入力補完候補などを提供しているLanguage Servicesにプラグイン機構を導入し、&lt;br /&gt;
Angular2のテンプレートHTML中で入力補完が可能になるプラグインを提供しようというものです。&lt;br /&gt;
スクリーンキャストではありますが、実際にAtom上で動作している様子が見られます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/TypeScript/issues/6508&#34; target=&#34;_blank&#34;&gt;TypeScript extensibility · Issue #6508 · Microsoft/TypeScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/billti/TypeScript/blob/ngml/src/services/plugin-ngml.ts#L1785&#34; target=&#34;_blank&#34;&gt;TypeScript/plugin-ngml.ts at ngml · billti/TypeScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript開発チームとともに作っているだけあり、やることが大胆です。&lt;br /&gt;
Language Servicesで対応されれば様々なエディタで入力補完ができるようになるので楽しみにしましょう。&lt;/p&gt;

&lt;h3 id=&#34;angular-2-s-http-moving-to-it-s-own-repo&#34;&gt;Angular 2&amp;rsquo;s HTTP moving to it&amp;rsquo;s own repo&lt;/h3&gt;

&lt;p&gt;Angular2のhttpモジュールは今まではangular/angular内で開発されていましたが、Issueを分けたい、将来的に開発場所も分けたいということで&lt;br /&gt;
リポジトリが独立しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/http&#34; target=&#34;_blank&#34;&gt;angular/http: Angular 2.0 HTTP Module&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今はまだangular/angularで開発されたものがコピーされているだけです。&lt;/p&gt;

&lt;h3 id=&#34;electron&#34;&gt;Electron&lt;/h3&gt;

&lt;p&gt;Angular2でのデスクトップアプリ開発を支援するために、angular/electronというプロジェクトが動くようです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;結構情報盛りだくさんの一週間でした。Beta.5は結構アタリのバージョンだと思うので特に心配なくアップデートしてよさそうです。&lt;/p&gt;

&lt;p&gt;それではまた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Angular2 Beta.3リリースと今週のニュース</title>
      <link>https://ng2-info.github.io/2016/02/beta-3-has-released/</link>
      <pubDate>Thu, 04 Feb 2016 11:32:35 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/02/beta-3-has-released/</guid>
      <description>&lt;p&gt;こんにちは、らこです。先週の宣言通り、Beta.2からは週間リリースが始まっています。&lt;br /&gt;
今週はBeta.3がリリースされたので、主な変更点をピックアップしていきます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md#200-beta3-2016-02-03&#34; target=&#34;_blank&#34;&gt;CHANGELOG: 2.0.0-beta.3 (2016-02-03)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;はじめに-beta-3はアップデートしないほうがよい&#34;&gt;はじめに：Beta.3はアップデートしないほうがよい&lt;/h3&gt;

&lt;p&gt;まず初めに不具合と思われる症状についての情報です。&lt;br /&gt;
Beta.3ではpeerDependenciesに指定されているzone.jsのバージョンが0.5.11に上がりましたが、&lt;br /&gt;
このバージョンはnpmの&lt;code&gt;postinstall&lt;/code&gt;でtsdのコマンドを実行します。&lt;br /&gt;
ところがzone.jsのdependenciesにはtsdが入っていないため、グローバルにtsdをインストールしているユーザー以外はインストールに失敗します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/zone.js/issues/240&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;postinstall&amp;rdquo;: &amp;ldquo;tsd install&amp;rdquo; · Issue #240 · angular/zone.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beta.2を使っている環境から依存パッケージを一括アップデートするとzone.jsもアップデートされてしまい、&lt;br /&gt;
その際に上記のエラーによりインストールに失敗するようになります。&lt;/p&gt;

&lt;p&gt;Beta.3はさほど大きな変更もないのでここはBeta.4で解決されるまでアップデートを控えるのが安心でしょう。&lt;/p&gt;

&lt;p&gt;もしBeta.3を使いたい場合はzone.jsのバージョンを今はまだ0.5.10に固定しておき、Angular2だけをアップデートするのが良さそうです。&lt;br /&gt;
一時的にpeerDependenciesが一致せず警告が表示されるとは思いますがしょうがありません。&lt;br /&gt;
tsdはTypeScriptの公式でも非推奨なツールになりましたので、今からインストールしたくないものです。&lt;/p&gt;

&lt;h3 id=&#34;ngfor-add-custom-trackby-function-support&#34;&gt;ngFor: add custom trackBy function support&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/cee2318&#34; target=&#34;_blank&#34;&gt;https://github.com/angular/angular/commit/cee2318&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;ngFor&lt;/code&gt;に&lt;code&gt;trackBy&lt;/code&gt;が指定できるようになりました。&lt;/p&gt;

&lt;p&gt;使ってみたサンプルが&lt;a href=&#34;http://plnkr.co/edit/ksy5bnRz2VsufDrYJPOh&#34; target=&#34;_blank&#34;&gt;こちら&lt;/a&gt;です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div *ngFor=&amp;quot;#item of items; trackBy:customTrackBy&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という形式で関数を指定できます。trackByに設定した関数にはインデックスと要素が引数で渡されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trackByValue(index: number, item: any): any {
  return item;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この関数で返した値によって反復する要素に一意性を持たせることができるようです。&lt;br /&gt;
しかしAngularJSの&lt;code&gt;ng-repeat&lt;/code&gt;と違い、&lt;code&gt;ngFor&lt;/code&gt;は&lt;code&gt;[1,2,1]&lt;/code&gt;などの配列でも問題なく反復できるので、&lt;br /&gt;
明示的に設定しなければいけないケースはあまり発生しないように思われます。&lt;/p&gt;

&lt;p&gt;無理やりtrackByで挙動をおかしくした例が&lt;a href=&#34;http://plnkr.co/edit/2KISdMxgxLcf3PlklS5E?p=preview&#34; target=&#34;_blank&#34;&gt;こちら&lt;/a&gt;。&lt;br /&gt;
むしろインデックスを&lt;code&gt;trackBy&lt;/code&gt;で返したほうが挙動が変わるので、&lt;br /&gt;
よほど特殊な例でないとこの機能を活用することはないでしょう…&lt;/p&gt;

&lt;h3 id=&#34;debug-replace-debugelement-with-new-debug-dom&#34;&gt;debug: replace DebugElement with new Debug DOM&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/e1bf3d3&#34; target=&#34;_blank&#34;&gt;https://github.com/angular/angular/commit/e1bf3d3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beta.3唯一の破壊的変更です。&lt;br /&gt;
DOM操作のユニットテスト用に&lt;code&gt;DebugElement&lt;/code&gt;というディレクティブが用意されていましたが、&lt;br /&gt;
その使い方が変わりました。&lt;br /&gt;
詳しくはCHANGELOGのBefore/Afterを見ると良いでしょう。&lt;br /&gt;
全体的に記述量が減ってわかりやすいAPIになりました。&lt;/p&gt;

&lt;p&gt;しかしそもそも&lt;code&gt;DebugElement&lt;/code&gt;をもう使っている人がどれだけいるのかというところ…&lt;/p&gt;

&lt;h2 id=&#34;今週の週次ミーティング&#34;&gt;今週の週次ミーティング&lt;/h2&gt;

&lt;p&gt;今週月曜日のミーティングの内容もかいつまんでまとめます。&lt;/p&gt;

&lt;h3 id=&#34;angular-1-focus-areas&#34;&gt;Angular 1 focus areas&lt;/h3&gt;

&lt;p&gt;AngularJSについての話題です。&lt;/p&gt;

&lt;p&gt;AngularJSはもうこれ以上の機能追加の予定がないことを確認しました。&lt;br /&gt;
今後のAngularJSの開発はAngular2へのマイグレーションをサポートすることがメインになります。&lt;/p&gt;

&lt;p&gt;来週にはAngularJSのユーザー向けにAngular2へのアップグレードガイドを公開する予定のようです。&lt;br /&gt;
これまではAngular2ユーザー向けへのガイドだけでしたが、いよいよ本格的にAngularJSユーザーを取り込んでいくようです。&lt;br /&gt;
マイグレーション用のツールを作るかもしれないとも言及しています。&lt;/p&gt;

&lt;p&gt;また、これと平行してAngularJS向けのComponent Routerも今週中にリリースされる予定です。&lt;br /&gt;
Component RouterはAngular2で公式に提供されているRouterで、&lt;br /&gt;
AngularJSでも使えるようにすることでマイグレーションをスムーズに行えるようになるはずです。&lt;/p&gt;

&lt;p&gt;Routerだけでなく、i18nやアニメーションもAngularJS向けにライブラリを提供する計画があるようです。&lt;br /&gt;
これまでサードパーティに頼っていてAngular2から公式に提供するものについては、&lt;br /&gt;
このようにPolyfillのような形で移行しやすい形を作っていくようです。&lt;/p&gt;

&lt;h3 id=&#34;angularconnect-and-ngeurope&#34;&gt;AngularConnect and ngEurope&lt;/h3&gt;

&lt;p&gt;これは余談ですが、9月のAngularConnectと10月のngEuropeが近すぎる件について、&lt;br /&gt;
セッティングミスらしいことがわかりました。&lt;br /&gt;
チームの大半はAngularConnect側に参加するようです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;今週中にリリースされる予定のComponent Router for AngularJSが楽しみですね。&lt;br /&gt;
それでは。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Angular2 Beta.2のリリース</title>
      <link>https://ng2-info.github.io/2016/01/beta-2-has-released/</link>
      <pubDate>Sat, 30 Jan 2016 01:25:58 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/01/beta-2-has-released/</guid>
      <description>&lt;p&gt;Angular2のBeta.2バージョンがリリースされました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md&#34; target=&#34;_blank&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そこそこに大きいリリースですが、大半はバグ修正なのでアップデートをためらう理由はないでしょう。&lt;br /&gt;
変更点の中で気になるものについて取り上げます。&lt;/p&gt;

&lt;h3 id=&#34;core-application-ref-allow-asyncronous-app-initializers-df3074f-closes-5929-6063&#34;&gt;core/application_ref: Allow asyncronous app initializers. (df3074f), closes #5929 #6063&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/df3074f&#34; target=&#34;_blank&#34;&gt;df3074f&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Angular2の起動時に解決されるDIのひとつに&lt;code&gt;APP_INITIALIZER&lt;/code&gt;というプロバイダがあります。&lt;br /&gt;
&lt;code&gt;APP_INITIALIZER&lt;/code&gt;はデフォルトでは何も設定されていませんが、関数が注入された場合は&lt;br /&gt;
アプリケーションの起動前に実行されるものです。&lt;/p&gt;

&lt;p&gt;これまではただ実行するだけでしたが、戻り値がPromiseだった場合は完了を待ってからアプリケーションを起動するようになりました。&lt;/p&gt;

&lt;h3 id=&#34;test-allow-tests-to-specify-the-platform-and-application-providers-used-b0cebdb-closes-5351-5585-5975&#34;&gt;test: allow tests to specify the platform and application providers used (b0cebdb), closes #5351 #5585 #5975&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/b0cebdb&#34; target=&#34;_blank&#34;&gt;b0cebdb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;testingパッケージがプラットフォームごとにProviderを切り替えられるようになりました。&lt;br /&gt;
現在はbrowserとbrowser_static、serverの3つがありますが、具体的な手法についてはまだbrowserでのテストしかドキュメントがありません。&lt;br /&gt;
serverプラットフォームについてはもうしばらくドキュメントを待ちましょう。&lt;/p&gt;

&lt;h3 id=&#34;build-node-split-test-and-src-compilation-units&#34;&gt;build(node): split test and src compilation units&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/commit/a4b5cb837682ce61f8c07eabd7ae8c4dc3ba80a7&#34; target=&#34;_blank&#34;&gt;a4b5cb8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これはCHANGELOGには含まれていないのですが個人的にはBeta.2最大の変更です。&lt;br /&gt;
Angular2本体の型定義ファイルから、Angular2自体のテストに必要な依存ライブラリを排除しました。&lt;/p&gt;

&lt;p&gt;具体的にはJasmineとProtoractorの型定義を参照しないようにしたので、&lt;br /&gt;
以前からの問題であったjQueryの&lt;code&gt;$&lt;/code&gt;変数とProtoractorの型定義が衝突する問題や、&lt;br /&gt;
Jasmineとその他のテスティングフレームワーク（mochaなど）で型定義が衝突する問題が解消されました。&lt;/p&gt;

&lt;p&gt;beta.3は来週リリースされる予定です。週次になるとそこまで大きなアップデートにはならないと思われますが、&lt;br /&gt;
Router周りの改善が予告されているので楽しみにしていましょう。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Angular2 Beta.1のリリース</title>
      <link>https://ng2-info.github.io/2016/01/beta-1-has-released/</link>
      <pubDate>Mon, 11 Jan 2016 14:03:31 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/01/beta-1-has-released/</guid>
      <description>&lt;p&gt;Angular2のBeta.1バージョンがリリースされました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md&#34; target=&#34;_blank&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;2-0-0-beta-1-catamorphic-involution-2016-01-08&#34;&gt;2.0.0-beta.1 catamorphic-involution (2016-01-08)&lt;/h1&gt;

&lt;h3 id=&#34;bug-fixes&#34;&gt;Bug Fixes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;benchpress:&lt;/strong&gt; fix flake (&lt;a href=&#34;https://github.com/angular/angular/commit/9d28147&#34; target=&#34;_blank&#34;&gt;9d28147&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/6161&#34; target=&#34;_blank&#34;&gt;#6161&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CHANGELOG:&lt;/strong&gt; typo (&lt;a href=&#34;https://github.com/angular/angular/commit/d116861&#34; target=&#34;_blank&#34;&gt;d116861&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/6075&#34; target=&#34;_blank&#34;&gt;#6075&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/6078&#34; target=&#34;_blank&#34;&gt;#6078&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code size:&lt;/strong&gt; revert previous devMode change to restore size targets (&lt;a href=&#34;https://github.com/angular/angular/commit/c47d85b&#34; target=&#34;_blank&#34;&gt;c47d85b&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;core:&lt;/strong&gt; IE only supports parentNode (&lt;a href=&#34;https://github.com/angular/angular/commit/630d931&#34; target=&#34;_blank&#34;&gt;630d931&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/5994&#34; target=&#34;_blank&#34;&gt;#5994&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docs:&lt;/strong&gt; fix an import in TOOLS_DART.md (&lt;a href=&#34;https://github.com/angular/angular/commit/3524946&#34; target=&#34;_blank&#34;&gt;3524946&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/5923&#34; target=&#34;_blank&#34;&gt;#5923&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forms:&lt;/strong&gt; fix SelectControlValueAccessor not to call onChange twice (&lt;a href=&#34;https://github.com/angular/angular/commit/b44d36c&#34; target=&#34;_blank&#34;&gt;b44d36c&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/5969&#34; target=&#34;_blank&#34;&gt;#5969&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;router:&lt;/strong&gt; correctly sort route matches with children by specificity (&lt;a href=&#34;https://github.com/angular/angular/commit/b2bc50d&#34; target=&#34;_blank&#34;&gt;b2bc50d&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/5848&#34; target=&#34;_blank&#34;&gt;#5848&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/6011&#34; target=&#34;_blank&#34;&gt;#6011&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;router:&lt;/strong&gt; preserve specificity for redirects (&lt;a href=&#34;https://github.com/angular/angular/commit/a038bb9&#34; target=&#34;_blank&#34;&gt;a038bb9&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/5933&#34; target=&#34;_blank&#34;&gt;#5933&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TemplateParser:&lt;/strong&gt; do not match on attrs that are bindings (&lt;a href=&#34;https://github.com/angular/angular/commit/9a70f1a&#34; target=&#34;_blank&#34;&gt;9a70f1a&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/5914&#34; target=&#34;_blank&#34;&gt;#5914&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;core:&lt;/strong&gt; improve NoAnnotationError message (&lt;a href=&#34;https://github.com/angular/angular/commit/197cf09&#34; target=&#34;_blank&#34;&gt;197cf09&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/4866&#34; target=&#34;_blank&#34;&gt;#4866&lt;/a&gt; &lt;a href=&#34;https://github.com/angular/angular/issues/5927&#34; target=&#34;_blank&#34;&gt;#5927&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;core:&lt;/strong&gt; improve stringify for dart to handle closures (&lt;a href=&#34;https://github.com/angular/angular/commit/e67ebb7&#34; target=&#34;_blank&#34;&gt;e67ebb7&lt;/a&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;core:&lt;/strong&gt; speed up view creation via code gen for view factories. (&lt;a href=&#34;https://github.com/angular/angular/commit/7ae23ad&#34; target=&#34;_blank&#34;&gt;7ae23ad&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/5993&#34; target=&#34;_blank&#34;&gt;#5993&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;router:&lt;/strong&gt; support links with just auxiliary routes (&lt;a href=&#34;https://github.com/angular/angular/commit/2a2f9a9&#34; target=&#34;_blank&#34;&gt;2a2f9a9&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/5930&#34; target=&#34;_blank&#34;&gt;#5930&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;performance-improvements&#34;&gt;Performance Improvements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dart/transform:&lt;/strong&gt; Avoid unnecessary reads for files with no view (&lt;a href=&#34;https://github.com/angular/angular/commit/89f32f8&#34; target=&#34;_blank&#34;&gt;89f32f8&lt;/a&gt;), closes &lt;a href=&#34;https://github.com/angular/angular/issues/6183&#34; target=&#34;_blank&#34;&gt;#6183&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;breaking-changes&#34;&gt;BREAKING CHANGES&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Platform pipes can only contain types and arrays of types,&lt;br /&gt;
but no bindings any more.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;When using transformers, platform pipes need to be specified explicitly&lt;br /&gt;
in the pubspec.yaml via the new config option&lt;br /&gt;
&lt;code&gt;platform_pipes&lt;/code&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Compiler.compileInHost&lt;/code&gt; now returns a &lt;code&gt;HostViewFactoryRef&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Component view is not yet created when component constructor is called.&lt;br /&gt;
-&amp;gt; use &lt;code&gt;onInit&lt;/code&gt; lifecycle callback to access the view of a component&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ViewRef#setLocal&lt;/code&gt; has been moved to new type &lt;code&gt;EmbeddedViewRef&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;internalView&lt;/code&gt; is gone, use &lt;code&gt;EmbeddedViewRef.rootNodes&lt;/code&gt; to access&lt;br /&gt;
the root nodes of an embedded view&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;renderer.setElementProperty&lt;/code&gt;, &lt;code&gt;..setElementStyle&lt;/code&gt;, &lt;code&gt;..setElementAttribute&lt;/code&gt; now&lt;br /&gt;
take a native element instead of an ElementRef&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Renderer&lt;/code&gt; interface now operates on plain native nodes,&lt;br /&gt;
instead of &lt;code&gt;RenderElementRef&lt;/code&gt;s or &lt;code&gt;RenderViewRef&lt;/code&gt;s&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;いくつかのバグフィックスの他に、エラーメッセージの改善やRouterの機能追加がありますが、メインはView生成機構の破壊的変更ですね。&lt;br /&gt;
この件に関しては&lt;a href=&#34;https://ng2-info.github.io/2016/01/06/view-creation-changes/&#34;&gt;過去の記事&lt;/a&gt;で取り上げています。&lt;/p&gt;

&lt;p&gt;RouterはAuxRouteについてもrouterLinkで&lt;code&gt;&amp;lt;a [routerLink]=&amp;quot;[&#39;/&#39;, [&#39;Modal&#39;]]&amp;quot;&amp;gt;open modal&amp;lt;/a&amp;gt;&lt;/code&gt;のようにリンクを生成できるようになりました。&lt;a href=&#34;https://github.com/angular/angular/pull/5930&#34; target=&#34;_blank&#34;&gt;#5930&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2016年のAngular2について</title>
      <link>https://ng2-info.github.io/2016/01/angular2-in-2016/</link>
      <pubDate>Thu, 07 Jan 2016 12:07:19 +0900</pubDate>
      
      <guid>https://ng2-info.github.io/2016/01/angular2-in-2016/</guid>
      <description>&lt;p&gt;2015年12月にBeta.0バージョンをリリースしたあと、年末年始の休暇もあってしばらくおとなしかったAngular2開発チームですが、今週から本格的にBeta.1に向かって活動を再開しました。&lt;br /&gt;
新年最初のミーティングが1/4に行われたので、その議事録から今後の短期〜中期のAngular2の展望を予想します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.google.com/document/d/150lerb1LmNLuau_a_EznPV1I1UHMTbEl61t4hZ7ZpS0/edit#&#34; target=&#34;_blank&#34;&gt;議事録&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;post-beta-0-and-post-ngmaterial-1-0-check-in-and-what-s-next-brad-igor&#34;&gt;Post beta.0 (and post ngmaterial 1.0) check-in and what&amp;rsquo;s next? (Brad/Igor)&lt;/h3&gt;

&lt;p&gt;まずはじめに、angular2 beta.0とangular-matetial 1.0がリリースされたので、次に何を行うべきかを話し合っています。&lt;br /&gt;
挙げられたのは次の項目&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;パフォーマンスの向上とライブラリのファイルサイズ圧縮&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;FormやRouterについてのフィードバックを公開&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;angular2-materialの開発&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;GoogleでのTypeScriptサポートを拡充する&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Angular2のトレーニング用のコンテンツの拡充&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;開発ガイドとAPIリファレンス、exampleのテスト&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この他に重要なものは個別に下で述べられています。&lt;/p&gt;

&lt;h3 id=&#34;ng-merry-cleanup-2015-igor&#34;&gt;ng-merry-cleanup 2015 (Igor)&lt;/h3&gt;

&lt;p&gt;ng-merry-cleanup（merry-christmasとかけた？）という名前で、2015年柱に溜まったIssueやPRややり残し、負債、いろいろなものを処理するミニプロジェクトが立ち上がっています。&lt;br /&gt;
&lt;a href=&#34;https://docs.google.com/document/d/13RcOCClz_FyKSthZgFTDnHUYfRoHnyCcz5MQFarLSAk/edit&#34; target=&#34;_blank&#34;&gt;ドキュメント&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このプロジェクトの目的は開発チームの生産性向上で、直接我々ユーザー側に影響することはほとんどないですが、唯一npm3対応だけは影響がありそうです。&lt;br /&gt;
npm3対応はBrian氏が地道にマイグレーション作業を行っています。&lt;/p&gt;

&lt;h3 id=&#34;interactive-mary-poppins-matias&#34;&gt;Interactive Mary Poppins (Matias)&lt;/h3&gt;

&lt;p&gt;GitHub上のbotの話題です。Mary PoppinsというのはAngularJSのプロジェクトで動いているGitHubのbotで、PRの受付などいろいろ自動化してくれるやつですが、それをさらに強化したものを検討中ということです。&lt;/p&gt;

&lt;h3 id=&#34;caretaker-igor&#34;&gt;Caretaker (Igor)&lt;/h3&gt;

&lt;p&gt;旅行中などに誰が管理人を代行するのかなど、プロジェクトの運営に関する話題です&lt;/p&gt;

&lt;h3 id=&#34;the-journey-to-10k-igor&#34;&gt;The Journey to 10K (Igor)&lt;/h3&gt;

&lt;p&gt;Angular2のファイルサイズを2016年中に10kB以下まで減らそうという計画が立ち上がっています。海外のモバイルは未だ2G回線などの需要もあるので、それらを意識した取り組みです。&lt;/p&gt;

&lt;p&gt;現在のライブラリの仕組みでは、アプリケーションの規模にかかわらずAngular2のすべてのコードをロードしてしまうので、とても小さなアプリケーションでもペイロードのサイズは肥大化してしまいます。これを解決し、使用する機能に応じて小分けにインポートできる仕組みを目指しています。&lt;/p&gt;

&lt;p&gt;現在のAngular2は164kB (angular2.min.js + dependencies)ですが、3月までのQ1の間にAngularJSと同じ50kBまで減らせるようにする見込みです。&lt;/p&gt;

&lt;h3 id=&#34;angular-dream-ci-igor&#34;&gt;Angular Dream CI (Igor)&lt;/h3&gt;

&lt;p&gt;現在のTravis CIが不便らしく、いろいろやるようです。詳細は後日出てくるらしい。&lt;/p&gt;

&lt;h3 id=&#34;analytics-igor&#34;&gt;Analytics (Igor)&lt;/h3&gt;

&lt;p&gt;Google Analyticsを使って開発チームの生産性を向上させる計画があるようです。&lt;/p&gt;

&lt;h3 id=&#34;pre-tc39-briefing-igor&#34;&gt;pre-TC39 briefing (Igor)&lt;/h3&gt;

&lt;p&gt;Angular2チームとMSが合同で、Zones(zone.js), Decorators(TypeScript decorators), Module Loader(おそらくSystemJSベース)をTS39のプロポーザルとして持ち込もうとしているようです。&lt;/p&gt;

&lt;h3 id=&#34;even-faster-angular-2-tobias&#34;&gt;Even faster Angular 2 (Tobias)&lt;/h3&gt;

&lt;p&gt;最後にパフォーマンス向上についての話題です。&lt;br /&gt;
近いうちにオフラインコンパイルという新しい仕組みが導入され、ライブラリからAngular2のコンパイラを分離することでスタートアップ時間やペイロードサイズの圧縮が実現できるようです。&lt;/p&gt;

&lt;p&gt;プロポーザルのドキュメントは&lt;a href=&#34;https://docs.google.com/document/d/11r8IuS4xDyhVSEBp7fDYo7aiLYsLEXKs4lPd36umUGM/edit&#34; target=&#34;_blank&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DIに関しても同様に静的に解決してしまうことでペイロードサイズをどんどん減らそうという計画もあります。&lt;/p&gt;

&lt;p&gt;コンパイル結果はヒューマンリーダブルで読みやすく、出力後のコードをさらにオンライン処理（今までどおりのAngular2の使い方）に持ち込むこともできる予定です。&lt;br /&gt;
デバッグも行いやすくなり、ComponentのHTMLテンプレート中にブレークポイントを作れるようになるかもとのこと。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;4日のミーティングの議事録はここまでですが、11日に2016年のAngular2のプランについてアナウンスをする予定らしいので、そこでまた詳しい話があるかもしれません。期待しましょう。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>